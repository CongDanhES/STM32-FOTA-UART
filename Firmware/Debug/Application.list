
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0802314c  0802314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023170  08023170  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08023170  08023170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023178  08023178  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023178  08023178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802317c  0802317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08023180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fe2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5d  00000000  00000000  0002a01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204d8  00000000  00000000  0002cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aad4  00000000  00000000  0004d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1d15  00000000  00000000  00057ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001199f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ff0  00000000  00000000  00119a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	2000000c 	.word	0x2000000c
 80201a4:	00000000 	.word	0x00000000
 80201a8:	08023134 	.word	0x08023134

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	20000010 	.word	0x20000010
 80201c4:	08023134 	.word	0x08023134

080201c8 <strcmp>:
 80201c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201d0:	2a01      	cmp	r2, #1
 80201d2:	bf28      	it	cs
 80201d4:	429a      	cmpcs	r2, r3
 80201d6:	d0f7      	beq.n	80201c8 <strcmp>
 80201d8:	1ad0      	subs	r0, r2, r3
 80201da:	4770      	bx	lr

080201dc <__aeabi_uldivmod>:
 80201dc:	b953      	cbnz	r3, 80201f4 <__aeabi_uldivmod+0x18>
 80201de:	b94a      	cbnz	r2, 80201f4 <__aeabi_uldivmod+0x18>
 80201e0:	2900      	cmp	r1, #0
 80201e2:	bf08      	it	eq
 80201e4:	2800      	cmpeq	r0, #0
 80201e6:	bf1c      	itt	ne
 80201e8:	f04f 31ff 	movne.w	r1, #4294967295
 80201ec:	f04f 30ff 	movne.w	r0, #4294967295
 80201f0:	f000 b974 	b.w	80204dc <__aeabi_idiv0>
 80201f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80201f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80201fc:	f000 f806 	bl	802020c <__udivmoddi4>
 8020200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020208:	b004      	add	sp, #16
 802020a:	4770      	bx	lr

0802020c <__udivmoddi4>:
 802020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020210:	9d08      	ldr	r5, [sp, #32]
 8020212:	4604      	mov	r4, r0
 8020214:	468e      	mov	lr, r1
 8020216:	2b00      	cmp	r3, #0
 8020218:	d14d      	bne.n	80202b6 <__udivmoddi4+0xaa>
 802021a:	428a      	cmp	r2, r1
 802021c:	4694      	mov	ip, r2
 802021e:	d969      	bls.n	80202f4 <__udivmoddi4+0xe8>
 8020220:	fab2 f282 	clz	r2, r2
 8020224:	b152      	cbz	r2, 802023c <__udivmoddi4+0x30>
 8020226:	fa01 f302 	lsl.w	r3, r1, r2
 802022a:	f1c2 0120 	rsb	r1, r2, #32
 802022e:	fa20 f101 	lsr.w	r1, r0, r1
 8020232:	fa0c fc02 	lsl.w	ip, ip, r2
 8020236:	ea41 0e03 	orr.w	lr, r1, r3
 802023a:	4094      	lsls	r4, r2
 802023c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020240:	0c21      	lsrs	r1, r4, #16
 8020242:	fbbe f6f8 	udiv	r6, lr, r8
 8020246:	fa1f f78c 	uxth.w	r7, ip
 802024a:	fb08 e316 	mls	r3, r8, r6, lr
 802024e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020252:	fb06 f107 	mul.w	r1, r6, r7
 8020256:	4299      	cmp	r1, r3
 8020258:	d90a      	bls.n	8020270 <__udivmoddi4+0x64>
 802025a:	eb1c 0303 	adds.w	r3, ip, r3
 802025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8020262:	f080 811f 	bcs.w	80204a4 <__udivmoddi4+0x298>
 8020266:	4299      	cmp	r1, r3
 8020268:	f240 811c 	bls.w	80204a4 <__udivmoddi4+0x298>
 802026c:	3e02      	subs	r6, #2
 802026e:	4463      	add	r3, ip
 8020270:	1a5b      	subs	r3, r3, r1
 8020272:	b2a4      	uxth	r4, r4
 8020274:	fbb3 f0f8 	udiv	r0, r3, r8
 8020278:	fb08 3310 	mls	r3, r8, r0, r3
 802027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020280:	fb00 f707 	mul.w	r7, r0, r7
 8020284:	42a7      	cmp	r7, r4
 8020286:	d90a      	bls.n	802029e <__udivmoddi4+0x92>
 8020288:	eb1c 0404 	adds.w	r4, ip, r4
 802028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020290:	f080 810a 	bcs.w	80204a8 <__udivmoddi4+0x29c>
 8020294:	42a7      	cmp	r7, r4
 8020296:	f240 8107 	bls.w	80204a8 <__udivmoddi4+0x29c>
 802029a:	4464      	add	r4, ip
 802029c:	3802      	subs	r0, #2
 802029e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80202a2:	1be4      	subs	r4, r4, r7
 80202a4:	2600      	movs	r6, #0
 80202a6:	b11d      	cbz	r5, 80202b0 <__udivmoddi4+0xa4>
 80202a8:	40d4      	lsrs	r4, r2
 80202aa:	2300      	movs	r3, #0
 80202ac:	e9c5 4300 	strd	r4, r3, [r5]
 80202b0:	4631      	mov	r1, r6
 80202b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202b6:	428b      	cmp	r3, r1
 80202b8:	d909      	bls.n	80202ce <__udivmoddi4+0xc2>
 80202ba:	2d00      	cmp	r5, #0
 80202bc:	f000 80ef 	beq.w	802049e <__udivmoddi4+0x292>
 80202c0:	2600      	movs	r6, #0
 80202c2:	e9c5 0100 	strd	r0, r1, [r5]
 80202c6:	4630      	mov	r0, r6
 80202c8:	4631      	mov	r1, r6
 80202ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ce:	fab3 f683 	clz	r6, r3
 80202d2:	2e00      	cmp	r6, #0
 80202d4:	d14a      	bne.n	802036c <__udivmoddi4+0x160>
 80202d6:	428b      	cmp	r3, r1
 80202d8:	d302      	bcc.n	80202e0 <__udivmoddi4+0xd4>
 80202da:	4282      	cmp	r2, r0
 80202dc:	f200 80f9 	bhi.w	80204d2 <__udivmoddi4+0x2c6>
 80202e0:	1a84      	subs	r4, r0, r2
 80202e2:	eb61 0303 	sbc.w	r3, r1, r3
 80202e6:	2001      	movs	r0, #1
 80202e8:	469e      	mov	lr, r3
 80202ea:	2d00      	cmp	r5, #0
 80202ec:	d0e0      	beq.n	80202b0 <__udivmoddi4+0xa4>
 80202ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80202f2:	e7dd      	b.n	80202b0 <__udivmoddi4+0xa4>
 80202f4:	b902      	cbnz	r2, 80202f8 <__udivmoddi4+0xec>
 80202f6:	deff      	udf	#255	; 0xff
 80202f8:	fab2 f282 	clz	r2, r2
 80202fc:	2a00      	cmp	r2, #0
 80202fe:	f040 8092 	bne.w	8020426 <__udivmoddi4+0x21a>
 8020302:	eba1 010c 	sub.w	r1, r1, ip
 8020306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802030a:	fa1f fe8c 	uxth.w	lr, ip
 802030e:	2601      	movs	r6, #1
 8020310:	0c20      	lsrs	r0, r4, #16
 8020312:	fbb1 f3f7 	udiv	r3, r1, r7
 8020316:	fb07 1113 	mls	r1, r7, r3, r1
 802031a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 802031e:	fb0e f003 	mul.w	r0, lr, r3
 8020322:	4288      	cmp	r0, r1
 8020324:	d908      	bls.n	8020338 <__udivmoddi4+0x12c>
 8020326:	eb1c 0101 	adds.w	r1, ip, r1
 802032a:	f103 38ff 	add.w	r8, r3, #4294967295
 802032e:	d202      	bcs.n	8020336 <__udivmoddi4+0x12a>
 8020330:	4288      	cmp	r0, r1
 8020332:	f200 80cb 	bhi.w	80204cc <__udivmoddi4+0x2c0>
 8020336:	4643      	mov	r3, r8
 8020338:	1a09      	subs	r1, r1, r0
 802033a:	b2a4      	uxth	r4, r4
 802033c:	fbb1 f0f7 	udiv	r0, r1, r7
 8020340:	fb07 1110 	mls	r1, r7, r0, r1
 8020344:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020348:	fb0e fe00 	mul.w	lr, lr, r0
 802034c:	45a6      	cmp	lr, r4
 802034e:	d908      	bls.n	8020362 <__udivmoddi4+0x156>
 8020350:	eb1c 0404 	adds.w	r4, ip, r4
 8020354:	f100 31ff 	add.w	r1, r0, #4294967295
 8020358:	d202      	bcs.n	8020360 <__udivmoddi4+0x154>
 802035a:	45a6      	cmp	lr, r4
 802035c:	f200 80bb 	bhi.w	80204d6 <__udivmoddi4+0x2ca>
 8020360:	4608      	mov	r0, r1
 8020362:	eba4 040e 	sub.w	r4, r4, lr
 8020366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802036a:	e79c      	b.n	80202a6 <__udivmoddi4+0x9a>
 802036c:	f1c6 0720 	rsb	r7, r6, #32
 8020370:	40b3      	lsls	r3, r6
 8020372:	fa22 fc07 	lsr.w	ip, r2, r7
 8020376:	ea4c 0c03 	orr.w	ip, ip, r3
 802037a:	fa20 f407 	lsr.w	r4, r0, r7
 802037e:	fa01 f306 	lsl.w	r3, r1, r6
 8020382:	431c      	orrs	r4, r3
 8020384:	40f9      	lsrs	r1, r7
 8020386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802038a:	fa00 f306 	lsl.w	r3, r0, r6
 802038e:	fbb1 f8f9 	udiv	r8, r1, r9
 8020392:	0c20      	lsrs	r0, r4, #16
 8020394:	fa1f fe8c 	uxth.w	lr, ip
 8020398:	fb09 1118 	mls	r1, r9, r8, r1
 802039c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203a0:	fb08 f00e 	mul.w	r0, r8, lr
 80203a4:	4288      	cmp	r0, r1
 80203a6:	fa02 f206 	lsl.w	r2, r2, r6
 80203aa:	d90b      	bls.n	80203c4 <__udivmoddi4+0x1b8>
 80203ac:	eb1c 0101 	adds.w	r1, ip, r1
 80203b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80203b4:	f080 8088 	bcs.w	80204c8 <__udivmoddi4+0x2bc>
 80203b8:	4288      	cmp	r0, r1
 80203ba:	f240 8085 	bls.w	80204c8 <__udivmoddi4+0x2bc>
 80203be:	f1a8 0802 	sub.w	r8, r8, #2
 80203c2:	4461      	add	r1, ip
 80203c4:	1a09      	subs	r1, r1, r0
 80203c6:	b2a4      	uxth	r4, r4
 80203c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80203cc:	fb09 1110 	mls	r1, r9, r0, r1
 80203d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80203d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80203d8:	458e      	cmp	lr, r1
 80203da:	d908      	bls.n	80203ee <__udivmoddi4+0x1e2>
 80203dc:	eb1c 0101 	adds.w	r1, ip, r1
 80203e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80203e4:	d26c      	bcs.n	80204c0 <__udivmoddi4+0x2b4>
 80203e6:	458e      	cmp	lr, r1
 80203e8:	d96a      	bls.n	80204c0 <__udivmoddi4+0x2b4>
 80203ea:	3802      	subs	r0, #2
 80203ec:	4461      	add	r1, ip
 80203ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80203f2:	fba0 9402 	umull	r9, r4, r0, r2
 80203f6:	eba1 010e 	sub.w	r1, r1, lr
 80203fa:	42a1      	cmp	r1, r4
 80203fc:	46c8      	mov	r8, r9
 80203fe:	46a6      	mov	lr, r4
 8020400:	d356      	bcc.n	80204b0 <__udivmoddi4+0x2a4>
 8020402:	d053      	beq.n	80204ac <__udivmoddi4+0x2a0>
 8020404:	b15d      	cbz	r5, 802041e <__udivmoddi4+0x212>
 8020406:	ebb3 0208 	subs.w	r2, r3, r8
 802040a:	eb61 010e 	sbc.w	r1, r1, lr
 802040e:	fa01 f707 	lsl.w	r7, r1, r7
 8020412:	fa22 f306 	lsr.w	r3, r2, r6
 8020416:	40f1      	lsrs	r1, r6
 8020418:	431f      	orrs	r7, r3
 802041a:	e9c5 7100 	strd	r7, r1, [r5]
 802041e:	2600      	movs	r6, #0
 8020420:	4631      	mov	r1, r6
 8020422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020426:	f1c2 0320 	rsb	r3, r2, #32
 802042a:	40d8      	lsrs	r0, r3
 802042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8020430:	fa21 f303 	lsr.w	r3, r1, r3
 8020434:	4091      	lsls	r1, r2
 8020436:	4301      	orrs	r1, r0
 8020438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802043c:	fa1f fe8c 	uxth.w	lr, ip
 8020440:	fbb3 f0f7 	udiv	r0, r3, r7
 8020444:	fb07 3610 	mls	r6, r7, r0, r3
 8020448:	0c0b      	lsrs	r3, r1, #16
 802044a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802044e:	fb00 f60e 	mul.w	r6, r0, lr
 8020452:	429e      	cmp	r6, r3
 8020454:	fa04 f402 	lsl.w	r4, r4, r2
 8020458:	d908      	bls.n	802046c <__udivmoddi4+0x260>
 802045a:	eb1c 0303 	adds.w	r3, ip, r3
 802045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8020462:	d22f      	bcs.n	80204c4 <__udivmoddi4+0x2b8>
 8020464:	429e      	cmp	r6, r3
 8020466:	d92d      	bls.n	80204c4 <__udivmoddi4+0x2b8>
 8020468:	3802      	subs	r0, #2
 802046a:	4463      	add	r3, ip
 802046c:	1b9b      	subs	r3, r3, r6
 802046e:	b289      	uxth	r1, r1
 8020470:	fbb3 f6f7 	udiv	r6, r3, r7
 8020474:	fb07 3316 	mls	r3, r7, r6, r3
 8020478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802047c:	fb06 f30e 	mul.w	r3, r6, lr
 8020480:	428b      	cmp	r3, r1
 8020482:	d908      	bls.n	8020496 <__udivmoddi4+0x28a>
 8020484:	eb1c 0101 	adds.w	r1, ip, r1
 8020488:	f106 38ff 	add.w	r8, r6, #4294967295
 802048c:	d216      	bcs.n	80204bc <__udivmoddi4+0x2b0>
 802048e:	428b      	cmp	r3, r1
 8020490:	d914      	bls.n	80204bc <__udivmoddi4+0x2b0>
 8020492:	3e02      	subs	r6, #2
 8020494:	4461      	add	r1, ip
 8020496:	1ac9      	subs	r1, r1, r3
 8020498:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 802049c:	e738      	b.n	8020310 <__udivmoddi4+0x104>
 802049e:	462e      	mov	r6, r5
 80204a0:	4628      	mov	r0, r5
 80204a2:	e705      	b.n	80202b0 <__udivmoddi4+0xa4>
 80204a4:	4606      	mov	r6, r0
 80204a6:	e6e3      	b.n	8020270 <__udivmoddi4+0x64>
 80204a8:	4618      	mov	r0, r3
 80204aa:	e6f8      	b.n	802029e <__udivmoddi4+0x92>
 80204ac:	454b      	cmp	r3, r9
 80204ae:	d2a9      	bcs.n	8020404 <__udivmoddi4+0x1f8>
 80204b0:	ebb9 0802 	subs.w	r8, r9, r2
 80204b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80204b8:	3801      	subs	r0, #1
 80204ba:	e7a3      	b.n	8020404 <__udivmoddi4+0x1f8>
 80204bc:	4646      	mov	r6, r8
 80204be:	e7ea      	b.n	8020496 <__udivmoddi4+0x28a>
 80204c0:	4620      	mov	r0, r4
 80204c2:	e794      	b.n	80203ee <__udivmoddi4+0x1e2>
 80204c4:	4640      	mov	r0, r8
 80204c6:	e7d1      	b.n	802046c <__udivmoddi4+0x260>
 80204c8:	46d0      	mov	r8, sl
 80204ca:	e77b      	b.n	80203c4 <__udivmoddi4+0x1b8>
 80204cc:	3b02      	subs	r3, #2
 80204ce:	4461      	add	r1, ip
 80204d0:	e732      	b.n	8020338 <__udivmoddi4+0x12c>
 80204d2:	4630      	mov	r0, r6
 80204d4:	e709      	b.n	80202ea <__udivmoddi4+0xde>
 80204d6:	4464      	add	r4, ip
 80204d8:	3802      	subs	r0, #2
 80204da:	e742      	b.n	8020362 <__udivmoddi4+0x156>

080204dc <__aeabi_idiv0>:
 80204dc:	4770      	bx	lr
 80204de:	bf00      	nop

080204e0 <GetSector>:
 * @brief  Retrieves the sector number for a given address(F407).
 * @param  Address: Flash memory address for which the sector is needed.
 * @retval uint32_t: Sector number corresponding to the given address.
 */
uint32_t GetSector(uint32_t Address)
{
 80204e0:	b480      	push	{r7}
 80204e2:	b085      	sub	sp, #20
 80204e4:	af00      	add	r7, sp, #0
 80204e6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80204e8:	2300      	movs	r3, #0
 80204ea:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	4a44      	ldr	r2, [pc, #272]	; (8020600 <GetSector+0x120>)
 80204f0:	4293      	cmp	r3, r2
 80204f2:	d806      	bhi.n	8020502 <GetSector+0x22>
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80204fa:	d302      	bcc.n	8020502 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80204fc:	2300      	movs	r3, #0
 80204fe:	60fb      	str	r3, [r7, #12]
 8020500:	e077      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	4a3f      	ldr	r2, [pc, #252]	; (8020604 <GetSector+0x124>)
 8020506:	4293      	cmp	r3, r2
 8020508:	d806      	bhi.n	8020518 <GetSector+0x38>
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	4a3e      	ldr	r2, [pc, #248]	; (8020608 <GetSector+0x128>)
 802050e:	4293      	cmp	r3, r2
 8020510:	d302      	bcc.n	8020518 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8020512:	2301      	movs	r3, #1
 8020514:	60fb      	str	r3, [r7, #12]
 8020516:	e06c      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	4a3c      	ldr	r2, [pc, #240]	; (802060c <GetSector+0x12c>)
 802051c:	4293      	cmp	r3, r2
 802051e:	d806      	bhi.n	802052e <GetSector+0x4e>
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	4a3b      	ldr	r2, [pc, #236]	; (8020610 <GetSector+0x130>)
 8020524:	4293      	cmp	r3, r2
 8020526:	d302      	bcc.n	802052e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8020528:	2302      	movs	r3, #2
 802052a:	60fb      	str	r3, [r7, #12]
 802052c:	e061      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	4a38      	ldr	r2, [pc, #224]	; (8020614 <GetSector+0x134>)
 8020532:	4293      	cmp	r3, r2
 8020534:	d206      	bcs.n	8020544 <GetSector+0x64>
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	4a37      	ldr	r2, [pc, #220]	; (8020618 <GetSector+0x138>)
 802053a:	4293      	cmp	r3, r2
 802053c:	d302      	bcc.n	8020544 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 802053e:	2303      	movs	r3, #3
 8020540:	60fb      	str	r3, [r7, #12]
 8020542:	e056      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	4a35      	ldr	r2, [pc, #212]	; (802061c <GetSector+0x13c>)
 8020548:	4293      	cmp	r3, r2
 802054a:	d206      	bcs.n	802055a <GetSector+0x7a>
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	4a31      	ldr	r2, [pc, #196]	; (8020614 <GetSector+0x134>)
 8020550:	4293      	cmp	r3, r2
 8020552:	d902      	bls.n	802055a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8020554:	2304      	movs	r3, #4
 8020556:	60fb      	str	r3, [r7, #12]
 8020558:	e04b      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	4a30      	ldr	r2, [pc, #192]	; (8020620 <GetSector+0x140>)
 802055e:	4293      	cmp	r3, r2
 8020560:	d206      	bcs.n	8020570 <GetSector+0x90>
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	4a2d      	ldr	r2, [pc, #180]	; (802061c <GetSector+0x13c>)
 8020566:	4293      	cmp	r3, r2
 8020568:	d902      	bls.n	8020570 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 802056a:	2305      	movs	r3, #5
 802056c:	60fb      	str	r3, [r7, #12]
 802056e:	e040      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	4a2c      	ldr	r2, [pc, #176]	; (8020624 <GetSector+0x144>)
 8020574:	4293      	cmp	r3, r2
 8020576:	d206      	bcs.n	8020586 <GetSector+0xa6>
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	4a29      	ldr	r2, [pc, #164]	; (8020620 <GetSector+0x140>)
 802057c:	4293      	cmp	r3, r2
 802057e:	d902      	bls.n	8020586 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8020580:	2306      	movs	r3, #6
 8020582:	60fb      	str	r3, [r7, #12]
 8020584:	e035      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	4a27      	ldr	r2, [pc, #156]	; (8020628 <GetSector+0x148>)
 802058a:	4293      	cmp	r3, r2
 802058c:	d206      	bcs.n	802059c <GetSector+0xbc>
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	4a24      	ldr	r2, [pc, #144]	; (8020624 <GetSector+0x144>)
 8020592:	4293      	cmp	r3, r2
 8020594:	d902      	bls.n	802059c <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8020596:	2307      	movs	r3, #7
 8020598:	60fb      	str	r3, [r7, #12]
 802059a:	e02a      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	4a23      	ldr	r2, [pc, #140]	; (802062c <GetSector+0x14c>)
 80205a0:	4293      	cmp	r3, r2
 80205a2:	d206      	bcs.n	80205b2 <GetSector+0xd2>
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	4a20      	ldr	r2, [pc, #128]	; (8020628 <GetSector+0x148>)
 80205a8:	4293      	cmp	r3, r2
 80205aa:	d902      	bls.n	80205b2 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80205ac:	2308      	movs	r3, #8
 80205ae:	60fb      	str	r3, [r7, #12]
 80205b0:	e01f      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	4a1e      	ldr	r2, [pc, #120]	; (8020630 <GetSector+0x150>)
 80205b6:	4293      	cmp	r3, r2
 80205b8:	d206      	bcs.n	80205c8 <GetSector+0xe8>
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	4a1b      	ldr	r2, [pc, #108]	; (802062c <GetSector+0x14c>)
 80205be:	4293      	cmp	r3, r2
 80205c0:	d902      	bls.n	80205c8 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80205c2:	2309      	movs	r3, #9
 80205c4:	60fb      	str	r3, [r7, #12]
 80205c6:	e014      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	4a1a      	ldr	r2, [pc, #104]	; (8020634 <GetSector+0x154>)
 80205cc:	4293      	cmp	r3, r2
 80205ce:	d806      	bhi.n	80205de <GetSector+0xfe>
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	4a17      	ldr	r2, [pc, #92]	; (8020630 <GetSector+0x150>)
 80205d4:	4293      	cmp	r3, r2
 80205d6:	d902      	bls.n	80205de <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80205d8:	230a      	movs	r3, #10
 80205da:	60fb      	str	r3, [r7, #12]
 80205dc:	e009      	b.n	80205f2 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	4a15      	ldr	r2, [pc, #84]	; (8020638 <GetSector+0x158>)
 80205e2:	4293      	cmp	r3, r2
 80205e4:	d805      	bhi.n	80205f2 <GetSector+0x112>
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	4a14      	ldr	r2, [pc, #80]	; (802063c <GetSector+0x15c>)
 80205ea:	4293      	cmp	r3, r2
 80205ec:	d901      	bls.n	80205f2 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80205ee:	230b      	movs	r3, #11
 80205f0:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 80205f2:	68fb      	ldr	r3, [r7, #12]
}
 80205f4:	4618      	mov	r0, r3
 80205f6:	3714      	adds	r7, #20
 80205f8:	46bd      	mov	sp, r7
 80205fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205fe:	4770      	bx	lr
 8020600:	08003ffe 	.word	0x08003ffe
 8020604:	08007ffe 	.word	0x08007ffe
 8020608:	08004000 	.word	0x08004000
 802060c:	0800bffe 	.word	0x0800bffe
 8020610:	08008000 	.word	0x08008000
 8020614:	0800ffff 	.word	0x0800ffff
 8020618:	0800c000 	.word	0x0800c000
 802061c:	0801ffff 	.word	0x0801ffff
 8020620:	0803ffff 	.word	0x0803ffff
 8020624:	0805ffff 	.word	0x0805ffff
 8020628:	0807ffff 	.word	0x0807ffff
 802062c:	0809ffff 	.word	0x0809ffff
 8020630:	080bffff 	.word	0x080bffff
 8020634:	080dfffe 	.word	0x080dfffe
 8020638:	080ffffe 	.word	0x080ffffe
 802063c:	080dffff 	.word	0x080dffff

08020640 <Flash_Write_Data>:
//	     to protect the FLASH memory against possible unwanted operation) *********/
//	  HAL_FLASH_Lock();
//	  return 0;
//}

uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords) {
 8020640:	b5b0      	push	{r4, r5, r7, lr}
 8020642:	b08a      	sub	sp, #40	; 0x28
 8020644:	af00      	add	r7, sp, #0
 8020646:	60f8      	str	r0, [r7, #12]
 8020648:	60b9      	str	r1, [r7, #8]
 802064a:	4613      	mov	r3, r2
 802064c:	80fb      	strh	r3, [r7, #6]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SECTORError;
    int sofar = 0;
 802064e:	2300      	movs	r3, #0
 8020650:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unlock the Flash to enable the flash control register access */
    HAL_FLASH_Unlock();
 8020652:	f000 fd13 	bl	802107c <HAL_FLASH_Unlock>

    /* Get the sector of the starting address */
    uint32_t StartSector = GetSector(StartSectorAddress);
 8020656:	68f8      	ldr	r0, [r7, #12]
 8020658:	f7ff ff42 	bl	80204e0 <GetSector>
 802065c:	6238      	str	r0, [r7, #32]

    /* Check if the sector has been erased or if data can be written */
    if (*(uint32_t *)StartSectorAddress != 0xFFFFFFFF) {
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	681b      	ldr	r3, [r3, #0]
 8020662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020666:	d041      	beq.n	80206ec <Flash_Write_Data+0xac>
        /* If the start address is not erased (0xFFFFFFFF is the erased state),
           then we need to erase the sector before writing */

        uint32_t EndSectorAddress = StartSectorAddress + numberofwords * 4;
 8020668:	88fb      	ldrh	r3, [r7, #6]
 802066a:	009b      	lsls	r3, r3, #2
 802066c:	461a      	mov	r2, r3
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	4413      	add	r3, r2
 8020672:	61fb      	str	r3, [r7, #28]
        uint32_t EndSector = GetSector(EndSectorAddress);
 8020674:	69f8      	ldr	r0, [r7, #28]
 8020676:	f7ff ff33 	bl	80204e0 <GetSector>
 802067a:	61b8      	str	r0, [r7, #24]

        /* Fill EraseInit structure for the sector we want to erase */
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 802067c:	4b21      	ldr	r3, [pc, #132]	; (8020704 <Flash_Write_Data+0xc4>)
 802067e:	2200      	movs	r2, #0
 8020680:	601a      	str	r2, [r3, #0]
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8020682:	4b20      	ldr	r3, [pc, #128]	; (8020704 <Flash_Write_Data+0xc4>)
 8020684:	2202      	movs	r2, #2
 8020686:	611a      	str	r2, [r3, #16]
        EraseInitStruct.Sector = StartSector;
 8020688:	4a1e      	ldr	r2, [pc, #120]	; (8020704 <Flash_Write_Data+0xc4>)
 802068a:	6a3b      	ldr	r3, [r7, #32]
 802068c:	6093      	str	r3, [r2, #8]
        EraseInitStruct.NbSectors = (EndSector - StartSector) + 1;
 802068e:	69ba      	ldr	r2, [r7, #24]
 8020690:	6a3b      	ldr	r3, [r7, #32]
 8020692:	1ad3      	subs	r3, r2, r3
 8020694:	3301      	adds	r3, #1
 8020696:	4a1b      	ldr	r2, [pc, #108]	; (8020704 <Flash_Write_Data+0xc4>)
 8020698:	60d3      	str	r3, [r2, #12]

        /* Erase the required sector */
        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 802069a:	f107 0314 	add.w	r3, r7, #20
 802069e:	4619      	mov	r1, r3
 80206a0:	4818      	ldr	r0, [pc, #96]	; (8020704 <Flash_Write_Data+0xc4>)
 80206a2:	f000 fe59 	bl	8021358 <HAL_FLASHEx_Erase>
 80206a6:	4603      	mov	r3, r0
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d01f      	beq.n	80206ec <Flash_Write_Data+0xac>
            return HAL_FLASH_GetError(); // Error during erase
 80206ac:	f000 fd18 	bl	80210e0 <HAL_FLASH_GetError>
 80206b0:	4603      	mov	r3, r0
 80206b2:	e022      	b.n	80206fa <Flash_Write_Data+0xba>
        }
    }

    /* Program the user Flash area word by word */
    while (sofar < numberofwords) {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK) {
 80206b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206b6:	009b      	lsls	r3, r3, #2
 80206b8:	68ba      	ldr	r2, [r7, #8]
 80206ba:	4413      	add	r3, r2
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	2200      	movs	r2, #0
 80206c0:	461c      	mov	r4, r3
 80206c2:	4615      	mov	r5, r2
 80206c4:	4622      	mov	r2, r4
 80206c6:	462b      	mov	r3, r5
 80206c8:	68f9      	ldr	r1, [r7, #12]
 80206ca:	2002      	movs	r0, #2
 80206cc:	f000 fc82 	bl	8020fd4 <HAL_FLASH_Program>
 80206d0:	4603      	mov	r3, r0
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d106      	bne.n	80206e4 <Flash_Write_Data+0xa4>
            StartSectorAddress += 4; // Move to the next word address
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	3304      	adds	r3, #4
 80206da:	60fb      	str	r3, [r7, #12]
            sofar++;
 80206dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206de:	3301      	adds	r3, #1
 80206e0:	627b      	str	r3, [r7, #36]	; 0x24
 80206e2:	e003      	b.n	80206ec <Flash_Write_Data+0xac>
        } else {
            /* Error occurred while writing data in Flash memory */
            return HAL_FLASH_GetError();
 80206e4:	f000 fcfc 	bl	80210e0 <HAL_FLASH_GetError>
 80206e8:	4603      	mov	r3, r0
 80206ea:	e006      	b.n	80206fa <Flash_Write_Data+0xba>
    while (sofar < numberofwords) {
 80206ec:	88fb      	ldrh	r3, [r7, #6]
 80206ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206f0:	429a      	cmp	r2, r3
 80206f2:	dbdf      	blt.n	80206b4 <Flash_Write_Data+0x74>
        }
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 80206f4:	f000 fce4 	bl	80210c0 <HAL_FLASH_Lock>
    return 0;
 80206f8:	2300      	movs	r3, #0
}
 80206fa:	4618      	mov	r0, r3
 80206fc:	3728      	adds	r7, #40	; 0x28
 80206fe:	46bd      	mov	sp, r7
 8020700:	bdb0      	pop	{r4, r5, r7, pc}
 8020702:	bf00      	nop
 8020704:	20000028 	.word	0x20000028

08020708 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020708:	b480      	push	{r7}
 802070a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802070c:	f3bf 8f4f 	dsb	sy
}
 8020710:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020712:	4b06      	ldr	r3, [pc, #24]	; (802072c <__NVIC_SystemReset+0x24>)
 8020714:	68db      	ldr	r3, [r3, #12]
 8020716:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802071a:	4904      	ldr	r1, [pc, #16]	; (802072c <__NVIC_SystemReset+0x24>)
 802071c:	4b04      	ldr	r3, [pc, #16]	; (8020730 <__NVIC_SystemReset+0x28>)
 802071e:	4313      	orrs	r3, r2
 8020720:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020722:	f3bf 8f4f 	dsb	sy
}
 8020726:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020728:	bf00      	nop
 802072a:	e7fd      	b.n	8020728 <__NVIC_SystemReset+0x20>
 802072c:	e000ed00 	.word	0xe000ed00
 8020730:	05fa0004 	.word	0x05fa0004

08020734 <HAL_UART_RxCpltCallback>:

uint8_t rx_data = 0;
uint8_t uart_rx[30];
uint8_t uart_count= 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020734:	b580      	push	{r7, lr}
 8020736:	b084      	sub	sp, #16
 8020738:	af00      	add	r7, sp, #0
 802073a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	4a19      	ldr	r2, [pc, #100]	; (80207a8 <HAL_UART_RxCpltCallback+0x74>)
 8020742:	4293      	cmp	r3, r2
 8020744:	d12b      	bne.n	802079e <HAL_UART_RxCpltCallback+0x6a>
    	if(rx_data == '\r' || rx_data == '\n'){
 8020746:	4b19      	ldr	r3, [pc, #100]	; (80207ac <HAL_UART_RxCpltCallback+0x78>)
 8020748:	781b      	ldrb	r3, [r3, #0]
 802074a:	2b0d      	cmp	r3, #13
 802074c:	d003      	beq.n	8020756 <HAL_UART_RxCpltCallback+0x22>
 802074e:	4b17      	ldr	r3, [pc, #92]	; (80207ac <HAL_UART_RxCpltCallback+0x78>)
 8020750:	781b      	ldrb	r3, [r3, #0]
 8020752:	2b0a      	cmp	r3, #10
 8020754:	d111      	bne.n	802077a <HAL_UART_RxCpltCallback+0x46>
			if(strcmp((char* )uart_rx, "OTA_START") == 0){
 8020756:	4916      	ldr	r1, [pc, #88]	; (80207b0 <HAL_UART_RxCpltCallback+0x7c>)
 8020758:	4816      	ldr	r0, [pc, #88]	; (80207b4 <HAL_UART_RxCpltCallback+0x80>)
 802075a:	f7ff fd35 	bl	80201c8 <strcmp>
 802075e:	4603      	mov	r3, r0
 8020760:	2b00      	cmp	r3, #0
 8020762:	d10a      	bne.n	802077a <HAL_UART_RxCpltCallback+0x46>
				uint32_t OTA_FLAG = 10;
 8020764:	230a      	movs	r3, #10
 8020766:	60fb      	str	r3, [r7, #12]
				Flash_Write_Data(0x08004000, &OTA_FLAG, 1);
 8020768:	f107 030c 	add.w	r3, r7, #12
 802076c:	2201      	movs	r2, #1
 802076e:	4619      	mov	r1, r3
 8020770:	4811      	ldr	r0, [pc, #68]	; (80207b8 <HAL_UART_RxCpltCallback+0x84>)
 8020772:	f7ff ff65 	bl	8020640 <Flash_Write_Data>
//				ENTER_OTA_Mode();
			    NVIC_SystemReset();
 8020776:	f7ff ffc7 	bl	8020708 <__NVIC_SystemReset>
			}
    	}
		uart_rx[uart_count]= rx_data;
 802077a:	4b10      	ldr	r3, [pc, #64]	; (80207bc <HAL_UART_RxCpltCallback+0x88>)
 802077c:	781b      	ldrb	r3, [r3, #0]
 802077e:	461a      	mov	r2, r3
 8020780:	4b0a      	ldr	r3, [pc, #40]	; (80207ac <HAL_UART_RxCpltCallback+0x78>)
 8020782:	7819      	ldrb	r1, [r3, #0]
 8020784:	4b0b      	ldr	r3, [pc, #44]	; (80207b4 <HAL_UART_RxCpltCallback+0x80>)
 8020786:	5499      	strb	r1, [r3, r2]
		uart_count++;
 8020788:	4b0c      	ldr	r3, [pc, #48]	; (80207bc <HAL_UART_RxCpltCallback+0x88>)
 802078a:	781b      	ldrb	r3, [r3, #0]
 802078c:	3301      	adds	r3, #1
 802078e:	b2da      	uxtb	r2, r3
 8020790:	4b0a      	ldr	r3, [pc, #40]	; (80207bc <HAL_UART_RxCpltCallback+0x88>)
 8020792:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8020794:	2201      	movs	r2, #1
 8020796:	4905      	ldr	r1, [pc, #20]	; (80207ac <HAL_UART_RxCpltCallback+0x78>)
 8020798:	4809      	ldr	r0, [pc, #36]	; (80207c0 <HAL_UART_RxCpltCallback+0x8c>)
 802079a:	f001 fd74 	bl	8022286 <HAL_UART_Receive_IT>
    }
}
 802079e:	bf00      	nop
 80207a0:	3710      	adds	r7, #16
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	bf00      	nop
 80207a8:	40004400 	.word	0x40004400
 80207ac:	2000003c 	.word	0x2000003c
 80207b0:	0802314c 	.word	0x0802314c
 80207b4:	20000040 	.word	0x20000040
 80207b8:	08004000 	.word	0x08004000
 80207bc:	2000005e 	.word	0x2000005e
 80207c0:	20000060 	.word	0x20000060

080207c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80207c8:	f000 f9ca 	bl	8020b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80207cc:	f000 f81a 	bl	8020804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80207d0:	f000 f8a0 	bl	8020914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80207d4:	f000 f874 	bl	80208c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  SCB->VTOR = 0x08008000;
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80207d8:	2201      	movs	r2, #1
 80207da:	4907      	ldr	r1, [pc, #28]	; (80207f8 <main+0x34>)
 80207dc:	4807      	ldr	r0, [pc, #28]	; (80207fc <main+0x38>)
 80207de:	f001 fd52 	bl	8022286 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80207e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80207e6:	4806      	ldr	r0, [pc, #24]	; (8020800 <main+0x3c>)
 80207e8:	f001 f88d 	bl	8021906 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80207ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80207f0:	f000 fa28 	bl	8020c44 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80207f4:	e7f5      	b.n	80207e2 <main+0x1e>
 80207f6:	bf00      	nop
 80207f8:	2000003c 	.word	0x2000003c
 80207fc:	20000060 	.word	0x20000060
 8020800:	40020c00 	.word	0x40020c00

08020804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b094      	sub	sp, #80	; 0x50
 8020808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802080a:	f107 0320 	add.w	r3, r7, #32
 802080e:	2230      	movs	r2, #48	; 0x30
 8020810:	2100      	movs	r1, #0
 8020812:	4618      	mov	r0, r3
 8020814:	f002 fc86 	bl	8023124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020818:	f107 030c 	add.w	r3, r7, #12
 802081c:	2200      	movs	r2, #0
 802081e:	601a      	str	r2, [r3, #0]
 8020820:	605a      	str	r2, [r3, #4]
 8020822:	609a      	str	r2, [r3, #8]
 8020824:	60da      	str	r2, [r3, #12]
 8020826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020828:	2300      	movs	r3, #0
 802082a:	60bb      	str	r3, [r7, #8]
 802082c:	4b22      	ldr	r3, [pc, #136]	; (80208b8 <SystemClock_Config+0xb4>)
 802082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020830:	4a21      	ldr	r2, [pc, #132]	; (80208b8 <SystemClock_Config+0xb4>)
 8020832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020836:	6413      	str	r3, [r2, #64]	; 0x40
 8020838:	4b1f      	ldr	r3, [pc, #124]	; (80208b8 <SystemClock_Config+0xb4>)
 802083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020840:	60bb      	str	r3, [r7, #8]
 8020842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020844:	2300      	movs	r3, #0
 8020846:	607b      	str	r3, [r7, #4]
 8020848:	4b1c      	ldr	r3, [pc, #112]	; (80208bc <SystemClock_Config+0xb8>)
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	4a1b      	ldr	r2, [pc, #108]	; (80208bc <SystemClock_Config+0xb8>)
 802084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020852:	6013      	str	r3, [r2, #0]
 8020854:	4b19      	ldr	r3, [pc, #100]	; (80208bc <SystemClock_Config+0xb8>)
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802085c:	607b      	str	r3, [r7, #4]
 802085e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8020860:	2302      	movs	r3, #2
 8020862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8020864:	2301      	movs	r3, #1
 8020866:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020868:	2310      	movs	r3, #16
 802086a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 802086c:	2300      	movs	r3, #0
 802086e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020870:	f107 0320 	add.w	r3, r7, #32
 8020874:	4618      	mov	r0, r3
 8020876:	f001 f861 	bl	802193c <HAL_RCC_OscConfig>
 802087a:	4603      	mov	r3, r0
 802087c:	2b00      	cmp	r3, #0
 802087e:	d001      	beq.n	8020884 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8020880:	f000 f87c 	bl	802097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020884:	230f      	movs	r3, #15
 8020886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8020888:	2300      	movs	r3, #0
 802088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802088c:	2300      	movs	r3, #0
 802088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020890:	2300      	movs	r3, #0
 8020892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020894:	2300      	movs	r3, #0
 8020896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020898:	f107 030c 	add.w	r3, r7, #12
 802089c:	2100      	movs	r1, #0
 802089e:	4618      	mov	r0, r3
 80208a0:	f001 fac4 	bl	8021e2c <HAL_RCC_ClockConfig>
 80208a4:	4603      	mov	r3, r0
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80208aa:	f000 f867 	bl	802097c <Error_Handler>
  }
}
 80208ae:	bf00      	nop
 80208b0:	3750      	adds	r7, #80	; 0x50
 80208b2:	46bd      	mov	sp, r7
 80208b4:	bd80      	pop	{r7, pc}
 80208b6:	bf00      	nop
 80208b8:	40023800 	.word	0x40023800
 80208bc:	40007000 	.word	0x40007000

080208c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80208c4:	4b11      	ldr	r3, [pc, #68]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208c6:	4a12      	ldr	r2, [pc, #72]	; (8020910 <MX_USART2_UART_Init+0x50>)
 80208c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80208ca:	4b10      	ldr	r3, [pc, #64]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80208d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80208d2:	4b0e      	ldr	r3, [pc, #56]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208d4:	2200      	movs	r2, #0
 80208d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80208d8:	4b0c      	ldr	r3, [pc, #48]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208da:	2200      	movs	r2, #0
 80208dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80208de:	4b0b      	ldr	r3, [pc, #44]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208e0:	2200      	movs	r2, #0
 80208e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80208e4:	4b09      	ldr	r3, [pc, #36]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208e6:	220c      	movs	r2, #12
 80208e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80208ea:	4b08      	ldr	r3, [pc, #32]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208ec:	2200      	movs	r2, #0
 80208ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80208f0:	4b06      	ldr	r3, [pc, #24]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208f2:	2200      	movs	r2, #0
 80208f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80208f6:	4805      	ldr	r0, [pc, #20]	; (802090c <MX_USART2_UART_Init+0x4c>)
 80208f8:	f001 fc78 	bl	80221ec <HAL_UART_Init>
 80208fc:	4603      	mov	r3, r0
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d001      	beq.n	8020906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8020902:	f000 f83b 	bl	802097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020906:	bf00      	nop
 8020908:	bd80      	pop	{r7, pc}
 802090a:	bf00      	nop
 802090c:	20000060 	.word	0x20000060
 8020910:	40004400 	.word	0x40004400

08020914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020914:	b580      	push	{r7, lr}
 8020916:	b086      	sub	sp, #24
 8020918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802091a:	1d3b      	adds	r3, r7, #4
 802091c:	2200      	movs	r2, #0
 802091e:	601a      	str	r2, [r3, #0]
 8020920:	605a      	str	r2, [r3, #4]
 8020922:	609a      	str	r2, [r3, #8]
 8020924:	60da      	str	r2, [r3, #12]
 8020926:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020928:	2300      	movs	r3, #0
 802092a:	603b      	str	r3, [r7, #0]
 802092c:	4b11      	ldr	r3, [pc, #68]	; (8020974 <MX_GPIO_Init+0x60>)
 802092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020930:	4a10      	ldr	r2, [pc, #64]	; (8020974 <MX_GPIO_Init+0x60>)
 8020932:	f043 0308 	orr.w	r3, r3, #8
 8020936:	6313      	str	r3, [r2, #48]	; 0x30
 8020938:	4b0e      	ldr	r3, [pc, #56]	; (8020974 <MX_GPIO_Init+0x60>)
 802093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802093c:	f003 0308 	and.w	r3, r3, #8
 8020940:	603b      	str	r3, [r7, #0]
 8020942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8020944:	2200      	movs	r2, #0
 8020946:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 802094a:	480b      	ldr	r0, [pc, #44]	; (8020978 <MX_GPIO_Init+0x64>)
 802094c:	f000 ffc2 	bl	80218d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8020950:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8020954:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020956:	2301      	movs	r3, #1
 8020958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802095a:	2300      	movs	r3, #0
 802095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802095e:	2300      	movs	r3, #0
 8020960:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020962:	1d3b      	adds	r3, r7, #4
 8020964:	4619      	mov	r1, r3
 8020966:	4804      	ldr	r0, [pc, #16]	; (8020978 <MX_GPIO_Init+0x64>)
 8020968:	f000 fe18 	bl	802159c <HAL_GPIO_Init>

}
 802096c:	bf00      	nop
 802096e:	3718      	adds	r7, #24
 8020970:	46bd      	mov	sp, r7
 8020972:	bd80      	pop	{r7, pc}
 8020974:	40023800 	.word	0x40023800
 8020978:	40020c00 	.word	0x40020c00

0802097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802097c:	b480      	push	{r7}
 802097e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8020980:	b672      	cpsid	i
}
 8020982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020984:	e7fe      	b.n	8020984 <Error_Handler+0x8>
	...

08020988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020988:	b480      	push	{r7}
 802098a:	b083      	sub	sp, #12
 802098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802098e:	2300      	movs	r3, #0
 8020990:	607b      	str	r3, [r7, #4]
 8020992:	4b10      	ldr	r3, [pc, #64]	; (80209d4 <HAL_MspInit+0x4c>)
 8020994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020996:	4a0f      	ldr	r2, [pc, #60]	; (80209d4 <HAL_MspInit+0x4c>)
 8020998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802099c:	6453      	str	r3, [r2, #68]	; 0x44
 802099e:	4b0d      	ldr	r3, [pc, #52]	; (80209d4 <HAL_MspInit+0x4c>)
 80209a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80209a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80209a6:	607b      	str	r3, [r7, #4]
 80209a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80209aa:	2300      	movs	r3, #0
 80209ac:	603b      	str	r3, [r7, #0]
 80209ae:	4b09      	ldr	r3, [pc, #36]	; (80209d4 <HAL_MspInit+0x4c>)
 80209b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209b2:	4a08      	ldr	r2, [pc, #32]	; (80209d4 <HAL_MspInit+0x4c>)
 80209b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80209b8:	6413      	str	r3, [r2, #64]	; 0x40
 80209ba:	4b06      	ldr	r3, [pc, #24]	; (80209d4 <HAL_MspInit+0x4c>)
 80209bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80209be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80209c2:	603b      	str	r3, [r7, #0]
 80209c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80209c6:	bf00      	nop
 80209c8:	370c      	adds	r7, #12
 80209ca:	46bd      	mov	sp, r7
 80209cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d0:	4770      	bx	lr
 80209d2:	bf00      	nop
 80209d4:	40023800 	.word	0x40023800

080209d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80209d8:	b580      	push	{r7, lr}
 80209da:	b08a      	sub	sp, #40	; 0x28
 80209dc:	af00      	add	r7, sp, #0
 80209de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80209e0:	f107 0314 	add.w	r3, r7, #20
 80209e4:	2200      	movs	r2, #0
 80209e6:	601a      	str	r2, [r3, #0]
 80209e8:	605a      	str	r2, [r3, #4]
 80209ea:	609a      	str	r2, [r3, #8]
 80209ec:	60da      	str	r2, [r3, #12]
 80209ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	4a1d      	ldr	r2, [pc, #116]	; (8020a6c <HAL_UART_MspInit+0x94>)
 80209f6:	4293      	cmp	r3, r2
 80209f8:	d133      	bne.n	8020a62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80209fa:	2300      	movs	r3, #0
 80209fc:	613b      	str	r3, [r7, #16]
 80209fe:	4b1c      	ldr	r3, [pc, #112]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a02:	4a1b      	ldr	r2, [pc, #108]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020a08:	6413      	str	r3, [r2, #64]	; 0x40
 8020a0a:	4b19      	ldr	r3, [pc, #100]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020a12:	613b      	str	r3, [r7, #16]
 8020a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020a16:	2300      	movs	r3, #0
 8020a18:	60fb      	str	r3, [r7, #12]
 8020a1a:	4b15      	ldr	r3, [pc, #84]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a1e:	4a14      	ldr	r2, [pc, #80]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a20:	f043 0308 	orr.w	r3, r3, #8
 8020a24:	6313      	str	r3, [r2, #48]	; 0x30
 8020a26:	4b12      	ldr	r3, [pc, #72]	; (8020a70 <HAL_UART_MspInit+0x98>)
 8020a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a2a:	f003 0308 	and.w	r3, r3, #8
 8020a2e:	60fb      	str	r3, [r7, #12]
 8020a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8020a32:	2360      	movs	r3, #96	; 0x60
 8020a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a36:	2302      	movs	r3, #2
 8020a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a3e:	2303      	movs	r3, #3
 8020a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020a42:	2307      	movs	r3, #7
 8020a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020a46:	f107 0314 	add.w	r3, r7, #20
 8020a4a:	4619      	mov	r1, r3
 8020a4c:	4809      	ldr	r0, [pc, #36]	; (8020a74 <HAL_UART_MspInit+0x9c>)
 8020a4e:	f000 fda5 	bl	802159c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8020a52:	2200      	movs	r2, #0
 8020a54:	2100      	movs	r1, #0
 8020a56:	2026      	movs	r0, #38	; 0x26
 8020a58:	f000 f9f3 	bl	8020e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8020a5c:	2026      	movs	r0, #38	; 0x26
 8020a5e:	f000 fa0c 	bl	8020e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8020a62:	bf00      	nop
 8020a64:	3728      	adds	r7, #40	; 0x28
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd80      	pop	{r7, pc}
 8020a6a:	bf00      	nop
 8020a6c:	40004400 	.word	0x40004400
 8020a70:	40023800 	.word	0x40023800
 8020a74:	40020c00 	.word	0x40020c00

08020a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020a78:	b480      	push	{r7}
 8020a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020a7c:	e7fe      	b.n	8020a7c <NMI_Handler+0x4>

08020a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020a7e:	b480      	push	{r7}
 8020a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020a82:	e7fe      	b.n	8020a82 <HardFault_Handler+0x4>

08020a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020a84:	b480      	push	{r7}
 8020a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020a88:	e7fe      	b.n	8020a88 <MemManage_Handler+0x4>

08020a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020a8a:	b480      	push	{r7}
 8020a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020a8e:	e7fe      	b.n	8020a8e <BusFault_Handler+0x4>

08020a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020a90:	b480      	push	{r7}
 8020a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020a94:	e7fe      	b.n	8020a94 <UsageFault_Handler+0x4>

08020a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020a96:	b480      	push	{r7}
 8020a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020a9a:	bf00      	nop
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aa2:	4770      	bx	lr

08020aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020aa4:	b480      	push	{r7}
 8020aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020aa8:	bf00      	nop
 8020aaa:	46bd      	mov	sp, r7
 8020aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ab0:	4770      	bx	lr

08020ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020ab2:	b480      	push	{r7}
 8020ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020ab6:	bf00      	nop
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020abe:	4770      	bx	lr

08020ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020ac4:	f000 f89e 	bl	8020c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020ac8:	bf00      	nop
 8020aca:	bd80      	pop	{r7, pc}

08020acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8020ad0:	4802      	ldr	r0, [pc, #8]	; (8020adc <USART2_IRQHandler+0x10>)
 8020ad2:	f001 fc09 	bl	80222e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8020ad6:	bf00      	nop
 8020ad8:	bd80      	pop	{r7, pc}
 8020ada:	bf00      	nop
 8020adc:	20000060 	.word	0x20000060

08020ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020ae0:	b480      	push	{r7}
 8020ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020ae4:	4b07      	ldr	r3, [pc, #28]	; (8020b04 <SystemInit+0x24>)
 8020ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020aea:	4a06      	ldr	r2, [pc, #24]	; (8020b04 <SystemInit+0x24>)
 8020aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020af4:	4b03      	ldr	r3, [pc, #12]	; (8020b04 <SystemInit+0x24>)
 8020af6:	4a04      	ldr	r2, [pc, #16]	; (8020b08 <SystemInit+0x28>)
 8020af8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020afa:	bf00      	nop
 8020afc:	46bd      	mov	sp, r7
 8020afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b02:	4770      	bx	lr
 8020b04:	e000ed00 	.word	0xe000ed00
 8020b08:	08020000 	.word	0x08020000

08020b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020b10:	480d      	ldr	r0, [pc, #52]	; (8020b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8020b12:	490e      	ldr	r1, [pc, #56]	; (8020b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020b14:	4a0e      	ldr	r2, [pc, #56]	; (8020b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020b18:	e002      	b.n	8020b20 <LoopCopyDataInit>

08020b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020b1e:	3304      	adds	r3, #4

08020b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020b24:	d3f9      	bcc.n	8020b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020b26:	4a0b      	ldr	r2, [pc, #44]	; (8020b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020b28:	4c0b      	ldr	r4, [pc, #44]	; (8020b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020b2c:	e001      	b.n	8020b32 <LoopFillZerobss>

08020b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020b30:	3204      	adds	r2, #4

08020b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020b34:	d3fb      	bcc.n	8020b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020b36:	f7ff ffd3 	bl	8020ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020b3a:	f002 facf 	bl	80230dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020b3e:	f7ff fe41 	bl	80207c4 <main>
  bx  lr    
 8020b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8020b50:	08023180 	.word	0x08023180
  ldr r2, =_sbss
 8020b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8020b58:	200000c8 	.word	0x200000c8

08020b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020b5c:	e7fe      	b.n	8020b5c <ADC_IRQHandler>
	...

08020b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020b64:	4b0e      	ldr	r3, [pc, #56]	; (8020ba0 <HAL_Init+0x40>)
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	4a0d      	ldr	r2, [pc, #52]	; (8020ba0 <HAL_Init+0x40>)
 8020b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020b70:	4b0b      	ldr	r3, [pc, #44]	; (8020ba0 <HAL_Init+0x40>)
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	4a0a      	ldr	r2, [pc, #40]	; (8020ba0 <HAL_Init+0x40>)
 8020b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8020b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020b7c:	4b08      	ldr	r3, [pc, #32]	; (8020ba0 <HAL_Init+0x40>)
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	4a07      	ldr	r2, [pc, #28]	; (8020ba0 <HAL_Init+0x40>)
 8020b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020b88:	2003      	movs	r0, #3
 8020b8a:	f000 f94f 	bl	8020e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020b8e:	200f      	movs	r0, #15
 8020b90:	f000 f808 	bl	8020ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020b94:	f7ff fef8 	bl	8020988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020b98:	2300      	movs	r3, #0
}
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	bd80      	pop	{r7, pc}
 8020b9e:	bf00      	nop
 8020ba0:	40023c00 	.word	0x40023c00

08020ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	b082      	sub	sp, #8
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020bac:	4b12      	ldr	r3, [pc, #72]	; (8020bf8 <HAL_InitTick+0x54>)
 8020bae:	681a      	ldr	r2, [r3, #0]
 8020bb0:	4b12      	ldr	r3, [pc, #72]	; (8020bfc <HAL_InitTick+0x58>)
 8020bb2:	781b      	ldrb	r3, [r3, #0]
 8020bb4:	4619      	mov	r1, r3
 8020bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8020bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8020bc2:	4618      	mov	r0, r3
 8020bc4:	f000 f967 	bl	8020e96 <HAL_SYSTICK_Config>
 8020bc8:	4603      	mov	r3, r0
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d001      	beq.n	8020bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020bce:	2301      	movs	r3, #1
 8020bd0:	e00e      	b.n	8020bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	2b0f      	cmp	r3, #15
 8020bd6:	d80a      	bhi.n	8020bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020bd8:	2200      	movs	r2, #0
 8020bda:	6879      	ldr	r1, [r7, #4]
 8020bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8020be0:	f000 f92f 	bl	8020e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020be4:	4a06      	ldr	r2, [pc, #24]	; (8020c00 <HAL_InitTick+0x5c>)
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020bea:	2300      	movs	r3, #0
 8020bec:	e000      	b.n	8020bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020bee:	2301      	movs	r3, #1
}
 8020bf0:	4618      	mov	r0, r3
 8020bf2:	3708      	adds	r7, #8
 8020bf4:	46bd      	mov	sp, r7
 8020bf6:	bd80      	pop	{r7, pc}
 8020bf8:	20000000 	.word	0x20000000
 8020bfc:	20000008 	.word	0x20000008
 8020c00:	20000004 	.word	0x20000004

08020c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020c04:	b480      	push	{r7}
 8020c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020c08:	4b06      	ldr	r3, [pc, #24]	; (8020c24 <HAL_IncTick+0x20>)
 8020c0a:	781b      	ldrb	r3, [r3, #0]
 8020c0c:	461a      	mov	r2, r3
 8020c0e:	4b06      	ldr	r3, [pc, #24]	; (8020c28 <HAL_IncTick+0x24>)
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	4413      	add	r3, r2
 8020c14:	4a04      	ldr	r2, [pc, #16]	; (8020c28 <HAL_IncTick+0x24>)
 8020c16:	6013      	str	r3, [r2, #0]
}
 8020c18:	bf00      	nop
 8020c1a:	46bd      	mov	sp, r7
 8020c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c20:	4770      	bx	lr
 8020c22:	bf00      	nop
 8020c24:	20000008 	.word	0x20000008
 8020c28:	200000a4 	.word	0x200000a4

08020c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020c2c:	b480      	push	{r7}
 8020c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8020c30:	4b03      	ldr	r3, [pc, #12]	; (8020c40 <HAL_GetTick+0x14>)
 8020c32:	681b      	ldr	r3, [r3, #0]
}
 8020c34:	4618      	mov	r0, r3
 8020c36:	46bd      	mov	sp, r7
 8020c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3c:	4770      	bx	lr
 8020c3e:	bf00      	nop
 8020c40:	200000a4 	.word	0x200000a4

08020c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b084      	sub	sp, #16
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020c4c:	f7ff ffee 	bl	8020c2c <HAL_GetTick>
 8020c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020c56:	68fb      	ldr	r3, [r7, #12]
 8020c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c5c:	d005      	beq.n	8020c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020c5e:	4b0a      	ldr	r3, [pc, #40]	; (8020c88 <HAL_Delay+0x44>)
 8020c60:	781b      	ldrb	r3, [r3, #0]
 8020c62:	461a      	mov	r2, r3
 8020c64:	68fb      	ldr	r3, [r7, #12]
 8020c66:	4413      	add	r3, r2
 8020c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020c6a:	bf00      	nop
 8020c6c:	f7ff ffde 	bl	8020c2c <HAL_GetTick>
 8020c70:	4602      	mov	r2, r0
 8020c72:	68bb      	ldr	r3, [r7, #8]
 8020c74:	1ad3      	subs	r3, r2, r3
 8020c76:	68fa      	ldr	r2, [r7, #12]
 8020c78:	429a      	cmp	r2, r3
 8020c7a:	d8f7      	bhi.n	8020c6c <HAL_Delay+0x28>
  {
  }
}
 8020c7c:	bf00      	nop
 8020c7e:	bf00      	nop
 8020c80:	3710      	adds	r7, #16
 8020c82:	46bd      	mov	sp, r7
 8020c84:	bd80      	pop	{r7, pc}
 8020c86:	bf00      	nop
 8020c88:	20000008 	.word	0x20000008

08020c8c <__NVIC_SetPriorityGrouping>:
{
 8020c8c:	b480      	push	{r7}
 8020c8e:	b085      	sub	sp, #20
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f003 0307 	and.w	r3, r3, #7
 8020c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020c9c:	4b0c      	ldr	r3, [pc, #48]	; (8020cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8020c9e:	68db      	ldr	r3, [r3, #12]
 8020ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020ca2:	68ba      	ldr	r2, [r7, #8]
 8020ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020ca8:	4013      	ands	r3, r2
 8020caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020cb0:	68bb      	ldr	r3, [r7, #8]
 8020cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020cbe:	4a04      	ldr	r2, [pc, #16]	; (8020cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8020cc0:	68bb      	ldr	r3, [r7, #8]
 8020cc2:	60d3      	str	r3, [r2, #12]
}
 8020cc4:	bf00      	nop
 8020cc6:	3714      	adds	r7, #20
 8020cc8:	46bd      	mov	sp, r7
 8020cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cce:	4770      	bx	lr
 8020cd0:	e000ed00 	.word	0xe000ed00

08020cd4 <__NVIC_GetPriorityGrouping>:
{
 8020cd4:	b480      	push	{r7}
 8020cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020cd8:	4b04      	ldr	r3, [pc, #16]	; (8020cec <__NVIC_GetPriorityGrouping+0x18>)
 8020cda:	68db      	ldr	r3, [r3, #12]
 8020cdc:	0a1b      	lsrs	r3, r3, #8
 8020cde:	f003 0307 	and.w	r3, r3, #7
}
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	46bd      	mov	sp, r7
 8020ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cea:	4770      	bx	lr
 8020cec:	e000ed00 	.word	0xe000ed00

08020cf0 <__NVIC_EnableIRQ>:
{
 8020cf0:	b480      	push	{r7}
 8020cf2:	b083      	sub	sp, #12
 8020cf4:	af00      	add	r7, sp, #0
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	db0b      	blt.n	8020d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020d02:	79fb      	ldrb	r3, [r7, #7]
 8020d04:	f003 021f 	and.w	r2, r3, #31
 8020d08:	4907      	ldr	r1, [pc, #28]	; (8020d28 <__NVIC_EnableIRQ+0x38>)
 8020d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d0e:	095b      	lsrs	r3, r3, #5
 8020d10:	2001      	movs	r0, #1
 8020d12:	fa00 f202 	lsl.w	r2, r0, r2
 8020d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8020d1a:	bf00      	nop
 8020d1c:	370c      	adds	r7, #12
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d24:	4770      	bx	lr
 8020d26:	bf00      	nop
 8020d28:	e000e100 	.word	0xe000e100

08020d2c <__NVIC_SetPriority>:
{
 8020d2c:	b480      	push	{r7}
 8020d2e:	b083      	sub	sp, #12
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	4603      	mov	r3, r0
 8020d34:	6039      	str	r1, [r7, #0]
 8020d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	db0a      	blt.n	8020d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	b2da      	uxtb	r2, r3
 8020d44:	490c      	ldr	r1, [pc, #48]	; (8020d78 <__NVIC_SetPriority+0x4c>)
 8020d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020d4a:	0112      	lsls	r2, r2, #4
 8020d4c:	b2d2      	uxtb	r2, r2
 8020d4e:	440b      	add	r3, r1
 8020d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8020d54:	e00a      	b.n	8020d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020d56:	683b      	ldr	r3, [r7, #0]
 8020d58:	b2da      	uxtb	r2, r3
 8020d5a:	4908      	ldr	r1, [pc, #32]	; (8020d7c <__NVIC_SetPriority+0x50>)
 8020d5c:	79fb      	ldrb	r3, [r7, #7]
 8020d5e:	f003 030f 	and.w	r3, r3, #15
 8020d62:	3b04      	subs	r3, #4
 8020d64:	0112      	lsls	r2, r2, #4
 8020d66:	b2d2      	uxtb	r2, r2
 8020d68:	440b      	add	r3, r1
 8020d6a:	761a      	strb	r2, [r3, #24]
}
 8020d6c:	bf00      	nop
 8020d6e:	370c      	adds	r7, #12
 8020d70:	46bd      	mov	sp, r7
 8020d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d76:	4770      	bx	lr
 8020d78:	e000e100 	.word	0xe000e100
 8020d7c:	e000ed00 	.word	0xe000ed00

08020d80 <NVIC_EncodePriority>:
{
 8020d80:	b480      	push	{r7}
 8020d82:	b089      	sub	sp, #36	; 0x24
 8020d84:	af00      	add	r7, sp, #0
 8020d86:	60f8      	str	r0, [r7, #12]
 8020d88:	60b9      	str	r1, [r7, #8]
 8020d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	f003 0307 	and.w	r3, r3, #7
 8020d92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020d94:	69fb      	ldr	r3, [r7, #28]
 8020d96:	f1c3 0307 	rsb	r3, r3, #7
 8020d9a:	2b04      	cmp	r3, #4
 8020d9c:	bf28      	it	cs
 8020d9e:	2304      	movcs	r3, #4
 8020da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020da2:	69fb      	ldr	r3, [r7, #28]
 8020da4:	3304      	adds	r3, #4
 8020da6:	2b06      	cmp	r3, #6
 8020da8:	d902      	bls.n	8020db0 <NVIC_EncodePriority+0x30>
 8020daa:	69fb      	ldr	r3, [r7, #28]
 8020dac:	3b03      	subs	r3, #3
 8020dae:	e000      	b.n	8020db2 <NVIC_EncodePriority+0x32>
 8020db0:	2300      	movs	r3, #0
 8020db2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020db4:	f04f 32ff 	mov.w	r2, #4294967295
 8020db8:	69bb      	ldr	r3, [r7, #24]
 8020dba:	fa02 f303 	lsl.w	r3, r2, r3
 8020dbe:	43da      	mvns	r2, r3
 8020dc0:	68bb      	ldr	r3, [r7, #8]
 8020dc2:	401a      	ands	r2, r3
 8020dc4:	697b      	ldr	r3, [r7, #20]
 8020dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8020dcc:	697b      	ldr	r3, [r7, #20]
 8020dce:	fa01 f303 	lsl.w	r3, r1, r3
 8020dd2:	43d9      	mvns	r1, r3
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020dd8:	4313      	orrs	r3, r2
}
 8020dda:	4618      	mov	r0, r3
 8020ddc:	3724      	adds	r7, #36	; 0x24
 8020dde:	46bd      	mov	sp, r7
 8020de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de4:	4770      	bx	lr
	...

08020de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b082      	sub	sp, #8
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	3b01      	subs	r3, #1
 8020df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020df8:	d301      	bcc.n	8020dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	e00f      	b.n	8020e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020dfe:	4a0a      	ldr	r2, [pc, #40]	; (8020e28 <SysTick_Config+0x40>)
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	3b01      	subs	r3, #1
 8020e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020e06:	210f      	movs	r1, #15
 8020e08:	f04f 30ff 	mov.w	r0, #4294967295
 8020e0c:	f7ff ff8e 	bl	8020d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020e10:	4b05      	ldr	r3, [pc, #20]	; (8020e28 <SysTick_Config+0x40>)
 8020e12:	2200      	movs	r2, #0
 8020e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020e16:	4b04      	ldr	r3, [pc, #16]	; (8020e28 <SysTick_Config+0x40>)
 8020e18:	2207      	movs	r2, #7
 8020e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020e1c:	2300      	movs	r3, #0
}
 8020e1e:	4618      	mov	r0, r3
 8020e20:	3708      	adds	r7, #8
 8020e22:	46bd      	mov	sp, r7
 8020e24:	bd80      	pop	{r7, pc}
 8020e26:	bf00      	nop
 8020e28:	e000e010 	.word	0xe000e010

08020e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b082      	sub	sp, #8
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020e34:	6878      	ldr	r0, [r7, #4]
 8020e36:	f7ff ff29 	bl	8020c8c <__NVIC_SetPriorityGrouping>
}
 8020e3a:	bf00      	nop
 8020e3c:	3708      	adds	r7, #8
 8020e3e:	46bd      	mov	sp, r7
 8020e40:	bd80      	pop	{r7, pc}

08020e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020e42:	b580      	push	{r7, lr}
 8020e44:	b086      	sub	sp, #24
 8020e46:	af00      	add	r7, sp, #0
 8020e48:	4603      	mov	r3, r0
 8020e4a:	60b9      	str	r1, [r7, #8]
 8020e4c:	607a      	str	r2, [r7, #4]
 8020e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020e50:	2300      	movs	r3, #0
 8020e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020e54:	f7ff ff3e 	bl	8020cd4 <__NVIC_GetPriorityGrouping>
 8020e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020e5a:	687a      	ldr	r2, [r7, #4]
 8020e5c:	68b9      	ldr	r1, [r7, #8]
 8020e5e:	6978      	ldr	r0, [r7, #20]
 8020e60:	f7ff ff8e 	bl	8020d80 <NVIC_EncodePriority>
 8020e64:	4602      	mov	r2, r0
 8020e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020e6a:	4611      	mov	r1, r2
 8020e6c:	4618      	mov	r0, r3
 8020e6e:	f7ff ff5d 	bl	8020d2c <__NVIC_SetPriority>
}
 8020e72:	bf00      	nop
 8020e74:	3718      	adds	r7, #24
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}

08020e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020e7a:	b580      	push	{r7, lr}
 8020e7c:	b082      	sub	sp, #8
 8020e7e:	af00      	add	r7, sp, #0
 8020e80:	4603      	mov	r3, r0
 8020e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020e88:	4618      	mov	r0, r3
 8020e8a:	f7ff ff31 	bl	8020cf0 <__NVIC_EnableIRQ>
}
 8020e8e:	bf00      	nop
 8020e90:	3708      	adds	r7, #8
 8020e92:	46bd      	mov	sp, r7
 8020e94:	bd80      	pop	{r7, pc}

08020e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020e96:	b580      	push	{r7, lr}
 8020e98:	b082      	sub	sp, #8
 8020e9a:	af00      	add	r7, sp, #0
 8020e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020e9e:	6878      	ldr	r0, [r7, #4]
 8020ea0:	f7ff ffa2 	bl	8020de8 <SysTick_Config>
 8020ea4:	4603      	mov	r3, r0
}
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	3708      	adds	r7, #8
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	bd80      	pop	{r7, pc}

08020eae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020eae:	b580      	push	{r7, lr}
 8020eb0:	b084      	sub	sp, #16
 8020eb2:	af00      	add	r7, sp, #0
 8020eb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020eba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8020ebc:	f7ff feb6 	bl	8020c2c <HAL_GetTick>
 8020ec0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020ec8:	b2db      	uxtb	r3, r3
 8020eca:	2b02      	cmp	r3, #2
 8020ecc:	d008      	beq.n	8020ee0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	2280      	movs	r2, #128	; 0x80
 8020ed2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	2200      	movs	r2, #0
 8020ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8020edc:	2301      	movs	r3, #1
 8020ede:	e052      	b.n	8020f86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	681a      	ldr	r2, [r3, #0]
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	f022 0216 	bic.w	r2, r2, #22
 8020eee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	695a      	ldr	r2, [r3, #20]
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020efe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d103      	bne.n	8020f10 <HAL_DMA_Abort+0x62>
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d007      	beq.n	8020f20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	681a      	ldr	r2, [r3, #0]
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	681b      	ldr	r3, [r3, #0]
 8020f1a:	f022 0208 	bic.w	r2, r2, #8
 8020f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	681b      	ldr	r3, [r3, #0]
 8020f24:	681a      	ldr	r2, [r3, #0]
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	f022 0201 	bic.w	r2, r2, #1
 8020f2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020f30:	e013      	b.n	8020f5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8020f32:	f7ff fe7b 	bl	8020c2c <HAL_GetTick>
 8020f36:	4602      	mov	r2, r0
 8020f38:	68bb      	ldr	r3, [r7, #8]
 8020f3a:	1ad3      	subs	r3, r2, r3
 8020f3c:	2b05      	cmp	r3, #5
 8020f3e:	d90c      	bls.n	8020f5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	2220      	movs	r2, #32
 8020f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	2203      	movs	r2, #3
 8020f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	2200      	movs	r2, #0
 8020f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8020f56:	2303      	movs	r3, #3
 8020f58:	e015      	b.n	8020f86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	681b      	ldr	r3, [r3, #0]
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	f003 0301 	and.w	r3, r3, #1
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d1e4      	bne.n	8020f32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020f6c:	223f      	movs	r2, #63	; 0x3f
 8020f6e:	409a      	lsls	r2, r3
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	2201      	movs	r2, #1
 8020f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	2200      	movs	r2, #0
 8020f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8020f84:	2300      	movs	r3, #0
}
 8020f86:	4618      	mov	r0, r3
 8020f88:	3710      	adds	r7, #16
 8020f8a:	46bd      	mov	sp, r7
 8020f8c:	bd80      	pop	{r7, pc}

08020f8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8020f8e:	b480      	push	{r7}
 8020f90:	b083      	sub	sp, #12
 8020f92:	af00      	add	r7, sp, #0
 8020f94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020f9c:	b2db      	uxtb	r3, r3
 8020f9e:	2b02      	cmp	r3, #2
 8020fa0:	d004      	beq.n	8020fac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	2280      	movs	r2, #128	; 0x80
 8020fa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8020fa8:	2301      	movs	r3, #1
 8020faa:	e00c      	b.n	8020fc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	2205      	movs	r2, #5
 8020fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	681a      	ldr	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	f022 0201 	bic.w	r2, r2, #1
 8020fc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8020fc4:	2300      	movs	r3, #0
}
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	370c      	adds	r7, #12
 8020fca:	46bd      	mov	sp, r7
 8020fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd0:	4770      	bx	lr
	...

08020fd4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8020fd4:	b580      	push	{r7, lr}
 8020fd6:	b086      	sub	sp, #24
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	60f8      	str	r0, [r7, #12]
 8020fdc:	60b9      	str	r1, [r7, #8]
 8020fde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8020fe2:	2301      	movs	r3, #1
 8020fe4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8020fe6:	4b23      	ldr	r3, [pc, #140]	; (8021074 <HAL_FLASH_Program+0xa0>)
 8020fe8:	7e1b      	ldrb	r3, [r3, #24]
 8020fea:	2b01      	cmp	r3, #1
 8020fec:	d101      	bne.n	8020ff2 <HAL_FLASH_Program+0x1e>
 8020fee:	2302      	movs	r3, #2
 8020ff0:	e03b      	b.n	802106a <HAL_FLASH_Program+0x96>
 8020ff2:	4b20      	ldr	r3, [pc, #128]	; (8021074 <HAL_FLASH_Program+0xa0>)
 8020ff4:	2201      	movs	r2, #1
 8020ff6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8020ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8020ffc:	f000 f87c 	bl	80210f8 <FLASH_WaitForLastOperation>
 8021000:	4603      	mov	r3, r0
 8021002:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	d12b      	bne.n	8021062 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	2b00      	cmp	r3, #0
 802100e:	d105      	bne.n	802101c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8021010:	783b      	ldrb	r3, [r7, #0]
 8021012:	4619      	mov	r1, r3
 8021014:	68b8      	ldr	r0, [r7, #8]
 8021016:	f000 f927 	bl	8021268 <FLASH_Program_Byte>
 802101a:	e016      	b.n	802104a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 802101c:	68fb      	ldr	r3, [r7, #12]
 802101e:	2b01      	cmp	r3, #1
 8021020:	d105      	bne.n	802102e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8021022:	883b      	ldrh	r3, [r7, #0]
 8021024:	4619      	mov	r1, r3
 8021026:	68b8      	ldr	r0, [r7, #8]
 8021028:	f000 f8fa 	bl	8021220 <FLASH_Program_HalfWord>
 802102c:	e00d      	b.n	802104a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	2b02      	cmp	r3, #2
 8021032:	d105      	bne.n	8021040 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8021034:	683b      	ldr	r3, [r7, #0]
 8021036:	4619      	mov	r1, r3
 8021038:	68b8      	ldr	r0, [r7, #8]
 802103a:	f000 f8cf 	bl	80211dc <FLASH_Program_Word>
 802103e:	e004      	b.n	802104a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8021040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021044:	68b8      	ldr	r0, [r7, #8]
 8021046:	f000 f897 	bl	8021178 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802104a:	f24c 3050 	movw	r0, #50000	; 0xc350
 802104e:	f000 f853 	bl	80210f8 <FLASH_WaitForLastOperation>
 8021052:	4603      	mov	r3, r0
 8021054:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8021056:	4b08      	ldr	r3, [pc, #32]	; (8021078 <HAL_FLASH_Program+0xa4>)
 8021058:	691b      	ldr	r3, [r3, #16]
 802105a:	4a07      	ldr	r2, [pc, #28]	; (8021078 <HAL_FLASH_Program+0xa4>)
 802105c:	f023 0301 	bic.w	r3, r3, #1
 8021060:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8021062:	4b04      	ldr	r3, [pc, #16]	; (8021074 <HAL_FLASH_Program+0xa0>)
 8021064:	2200      	movs	r2, #0
 8021066:	761a      	strb	r2, [r3, #24]
  
  return status;
 8021068:	7dfb      	ldrb	r3, [r7, #23]
}
 802106a:	4618      	mov	r0, r3
 802106c:	3718      	adds	r7, #24
 802106e:	46bd      	mov	sp, r7
 8021070:	bd80      	pop	{r7, pc}
 8021072:	bf00      	nop
 8021074:	200000a8 	.word	0x200000a8
 8021078:	40023c00 	.word	0x40023c00

0802107c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 802107c:	b480      	push	{r7}
 802107e:	b083      	sub	sp, #12
 8021080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8021082:	2300      	movs	r3, #0
 8021084:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8021086:	4b0b      	ldr	r3, [pc, #44]	; (80210b4 <HAL_FLASH_Unlock+0x38>)
 8021088:	691b      	ldr	r3, [r3, #16]
 802108a:	2b00      	cmp	r3, #0
 802108c:	da0b      	bge.n	80210a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802108e:	4b09      	ldr	r3, [pc, #36]	; (80210b4 <HAL_FLASH_Unlock+0x38>)
 8021090:	4a09      	ldr	r2, [pc, #36]	; (80210b8 <HAL_FLASH_Unlock+0x3c>)
 8021092:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8021094:	4b07      	ldr	r3, [pc, #28]	; (80210b4 <HAL_FLASH_Unlock+0x38>)
 8021096:	4a09      	ldr	r2, [pc, #36]	; (80210bc <HAL_FLASH_Unlock+0x40>)
 8021098:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802109a:	4b06      	ldr	r3, [pc, #24]	; (80210b4 <HAL_FLASH_Unlock+0x38>)
 802109c:	691b      	ldr	r3, [r3, #16]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	da01      	bge.n	80210a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80210a2:	2301      	movs	r3, #1
 80210a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80210a6:	79fb      	ldrb	r3, [r7, #7]
}
 80210a8:	4618      	mov	r0, r3
 80210aa:	370c      	adds	r7, #12
 80210ac:	46bd      	mov	sp, r7
 80210ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b2:	4770      	bx	lr
 80210b4:	40023c00 	.word	0x40023c00
 80210b8:	45670123 	.word	0x45670123
 80210bc:	cdef89ab 	.word	0xcdef89ab

080210c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80210c0:	b480      	push	{r7}
 80210c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80210c4:	4b05      	ldr	r3, [pc, #20]	; (80210dc <HAL_FLASH_Lock+0x1c>)
 80210c6:	691b      	ldr	r3, [r3, #16]
 80210c8:	4a04      	ldr	r2, [pc, #16]	; (80210dc <HAL_FLASH_Lock+0x1c>)
 80210ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80210ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80210d0:	2300      	movs	r3, #0
}
 80210d2:	4618      	mov	r0, r3
 80210d4:	46bd      	mov	sp, r7
 80210d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210da:	4770      	bx	lr
 80210dc:	40023c00 	.word	0x40023c00

080210e0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80210e0:	b480      	push	{r7}
 80210e2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80210e4:	4b03      	ldr	r3, [pc, #12]	; (80210f4 <HAL_FLASH_GetError+0x14>)
 80210e6:	69db      	ldr	r3, [r3, #28]
}  
 80210e8:	4618      	mov	r0, r3
 80210ea:	46bd      	mov	sp, r7
 80210ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop
 80210f4:	200000a8 	.word	0x200000a8

080210f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80210f8:	b580      	push	{r7, lr}
 80210fa:	b084      	sub	sp, #16
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8021100:	2300      	movs	r3, #0
 8021102:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021104:	4b1a      	ldr	r3, [pc, #104]	; (8021170 <FLASH_WaitForLastOperation+0x78>)
 8021106:	2200      	movs	r2, #0
 8021108:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802110a:	f7ff fd8f 	bl	8020c2c <HAL_GetTick>
 802110e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8021110:	e010      	b.n	8021134 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8021112:	687b      	ldr	r3, [r7, #4]
 8021114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021118:	d00c      	beq.n	8021134 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	2b00      	cmp	r3, #0
 802111e:	d007      	beq.n	8021130 <FLASH_WaitForLastOperation+0x38>
 8021120:	f7ff fd84 	bl	8020c2c <HAL_GetTick>
 8021124:	4602      	mov	r2, r0
 8021126:	68fb      	ldr	r3, [r7, #12]
 8021128:	1ad3      	subs	r3, r2, r3
 802112a:	687a      	ldr	r2, [r7, #4]
 802112c:	429a      	cmp	r2, r3
 802112e:	d201      	bcs.n	8021134 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8021130:	2303      	movs	r3, #3
 8021132:	e019      	b.n	8021168 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8021134:	4b0f      	ldr	r3, [pc, #60]	; (8021174 <FLASH_WaitForLastOperation+0x7c>)
 8021136:	68db      	ldr	r3, [r3, #12]
 8021138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802113c:	2b00      	cmp	r3, #0
 802113e:	d1e8      	bne.n	8021112 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8021140:	4b0c      	ldr	r3, [pc, #48]	; (8021174 <FLASH_WaitForLastOperation+0x7c>)
 8021142:	68db      	ldr	r3, [r3, #12]
 8021144:	f003 0301 	and.w	r3, r3, #1
 8021148:	2b00      	cmp	r3, #0
 802114a:	d002      	beq.n	8021152 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802114c:	4b09      	ldr	r3, [pc, #36]	; (8021174 <FLASH_WaitForLastOperation+0x7c>)
 802114e:	2201      	movs	r2, #1
 8021150:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8021152:	4b08      	ldr	r3, [pc, #32]	; (8021174 <FLASH_WaitForLastOperation+0x7c>)
 8021154:	68db      	ldr	r3, [r3, #12]
 8021156:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802115a:	2b00      	cmp	r3, #0
 802115c:	d003      	beq.n	8021166 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802115e:	f000 f8a5 	bl	80212ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8021162:	2301      	movs	r3, #1
 8021164:	e000      	b.n	8021168 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8021166:	2300      	movs	r3, #0
  
}  
 8021168:	4618      	mov	r0, r3
 802116a:	3710      	adds	r7, #16
 802116c:	46bd      	mov	sp, r7
 802116e:	bd80      	pop	{r7, pc}
 8021170:	200000a8 	.word	0x200000a8
 8021174:	40023c00 	.word	0x40023c00

08021178 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8021178:	b480      	push	{r7}
 802117a:	b085      	sub	sp, #20
 802117c:	af00      	add	r7, sp, #0
 802117e:	60f8      	str	r0, [r7, #12]
 8021180:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021184:	4b14      	ldr	r3, [pc, #80]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 8021186:	691b      	ldr	r3, [r3, #16]
 8021188:	4a13      	ldr	r2, [pc, #76]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 802118a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802118e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8021190:	4b11      	ldr	r3, [pc, #68]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 8021192:	691b      	ldr	r3, [r3, #16]
 8021194:	4a10      	ldr	r2, [pc, #64]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 8021196:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802119a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802119c:	4b0e      	ldr	r3, [pc, #56]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 802119e:	691b      	ldr	r3, [r3, #16]
 80211a0:	4a0d      	ldr	r2, [pc, #52]	; (80211d8 <FLASH_Program_DoubleWord+0x60>)
 80211a2:	f043 0301 	orr.w	r3, r3, #1
 80211a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	683a      	ldr	r2, [r7, #0]
 80211ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80211ae:	f3bf 8f6f 	isb	sy
}
 80211b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80211b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80211b8:	f04f 0200 	mov.w	r2, #0
 80211bc:	f04f 0300 	mov.w	r3, #0
 80211c0:	000a      	movs	r2, r1
 80211c2:	2300      	movs	r3, #0
 80211c4:	68f9      	ldr	r1, [r7, #12]
 80211c6:	3104      	adds	r1, #4
 80211c8:	4613      	mov	r3, r2
 80211ca:	600b      	str	r3, [r1, #0]
}
 80211cc:	bf00      	nop
 80211ce:	3714      	adds	r7, #20
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr
 80211d8:	40023c00 	.word	0x40023c00

080211dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80211dc:	b480      	push	{r7}
 80211de:	b083      	sub	sp, #12
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	6078      	str	r0, [r7, #4]
 80211e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80211e6:	4b0d      	ldr	r3, [pc, #52]	; (802121c <FLASH_Program_Word+0x40>)
 80211e8:	691b      	ldr	r3, [r3, #16]
 80211ea:	4a0c      	ldr	r2, [pc, #48]	; (802121c <FLASH_Program_Word+0x40>)
 80211ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80211f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80211f2:	4b0a      	ldr	r3, [pc, #40]	; (802121c <FLASH_Program_Word+0x40>)
 80211f4:	691b      	ldr	r3, [r3, #16]
 80211f6:	4a09      	ldr	r2, [pc, #36]	; (802121c <FLASH_Program_Word+0x40>)
 80211f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80211fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80211fe:	4b07      	ldr	r3, [pc, #28]	; (802121c <FLASH_Program_Word+0x40>)
 8021200:	691b      	ldr	r3, [r3, #16]
 8021202:	4a06      	ldr	r2, [pc, #24]	; (802121c <FLASH_Program_Word+0x40>)
 8021204:	f043 0301 	orr.w	r3, r3, #1
 8021208:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	683a      	ldr	r2, [r7, #0]
 802120e:	601a      	str	r2, [r3, #0]
}
 8021210:	bf00      	nop
 8021212:	370c      	adds	r7, #12
 8021214:	46bd      	mov	sp, r7
 8021216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802121a:	4770      	bx	lr
 802121c:	40023c00 	.word	0x40023c00

08021220 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8021220:	b480      	push	{r7}
 8021222:	b083      	sub	sp, #12
 8021224:	af00      	add	r7, sp, #0
 8021226:	6078      	str	r0, [r7, #4]
 8021228:	460b      	mov	r3, r1
 802122a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802122c:	4b0d      	ldr	r3, [pc, #52]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 802122e:	691b      	ldr	r3, [r3, #16]
 8021230:	4a0c      	ldr	r2, [pc, #48]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 8021232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021236:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8021238:	4b0a      	ldr	r3, [pc, #40]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 802123a:	691b      	ldr	r3, [r3, #16]
 802123c:	4a09      	ldr	r2, [pc, #36]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 802123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021244:	4b07      	ldr	r3, [pc, #28]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 8021246:	691b      	ldr	r3, [r3, #16]
 8021248:	4a06      	ldr	r2, [pc, #24]	; (8021264 <FLASH_Program_HalfWord+0x44>)
 802124a:	f043 0301 	orr.w	r3, r3, #1
 802124e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	887a      	ldrh	r2, [r7, #2]
 8021254:	801a      	strh	r2, [r3, #0]
}
 8021256:	bf00      	nop
 8021258:	370c      	adds	r7, #12
 802125a:	46bd      	mov	sp, r7
 802125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021260:	4770      	bx	lr
 8021262:	bf00      	nop
 8021264:	40023c00 	.word	0x40023c00

08021268 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8021268:	b480      	push	{r7}
 802126a:	b083      	sub	sp, #12
 802126c:	af00      	add	r7, sp, #0
 802126e:	6078      	str	r0, [r7, #4]
 8021270:	460b      	mov	r3, r1
 8021272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021274:	4b0c      	ldr	r3, [pc, #48]	; (80212a8 <FLASH_Program_Byte+0x40>)
 8021276:	691b      	ldr	r3, [r3, #16]
 8021278:	4a0b      	ldr	r2, [pc, #44]	; (80212a8 <FLASH_Program_Byte+0x40>)
 802127a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802127e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8021280:	4b09      	ldr	r3, [pc, #36]	; (80212a8 <FLASH_Program_Byte+0x40>)
 8021282:	4a09      	ldr	r2, [pc, #36]	; (80212a8 <FLASH_Program_Byte+0x40>)
 8021284:	691b      	ldr	r3, [r3, #16]
 8021286:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8021288:	4b07      	ldr	r3, [pc, #28]	; (80212a8 <FLASH_Program_Byte+0x40>)
 802128a:	691b      	ldr	r3, [r3, #16]
 802128c:	4a06      	ldr	r2, [pc, #24]	; (80212a8 <FLASH_Program_Byte+0x40>)
 802128e:	f043 0301 	orr.w	r3, r3, #1
 8021292:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	78fa      	ldrb	r2, [r7, #3]
 8021298:	701a      	strb	r2, [r3, #0]
}
 802129a:	bf00      	nop
 802129c:	370c      	adds	r7, #12
 802129e:	46bd      	mov	sp, r7
 80212a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212a4:	4770      	bx	lr
 80212a6:	bf00      	nop
 80212a8:	40023c00 	.word	0x40023c00

080212ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80212ac:	b480      	push	{r7}
 80212ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80212b0:	4b27      	ldr	r3, [pc, #156]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 80212b2:	68db      	ldr	r3, [r3, #12]
 80212b4:	f003 0310 	and.w	r3, r3, #16
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d008      	beq.n	80212ce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80212bc:	4b25      	ldr	r3, [pc, #148]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 80212be:	69db      	ldr	r3, [r3, #28]
 80212c0:	f043 0310 	orr.w	r3, r3, #16
 80212c4:	4a23      	ldr	r2, [pc, #140]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 80212c6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80212c8:	4b21      	ldr	r3, [pc, #132]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 80212ca:	2210      	movs	r2, #16
 80212cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80212ce:	4b20      	ldr	r3, [pc, #128]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 80212d0:	68db      	ldr	r3, [r3, #12]
 80212d2:	f003 0320 	and.w	r3, r3, #32
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	d008      	beq.n	80212ec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80212da:	4b1e      	ldr	r3, [pc, #120]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 80212dc:	69db      	ldr	r3, [r3, #28]
 80212de:	f043 0308 	orr.w	r3, r3, #8
 80212e2:	4a1c      	ldr	r2, [pc, #112]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 80212e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80212e6:	4b1a      	ldr	r3, [pc, #104]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 80212e8:	2220      	movs	r2, #32
 80212ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80212ec:	4b18      	ldr	r3, [pc, #96]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 80212ee:	68db      	ldr	r3, [r3, #12]
 80212f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d008      	beq.n	802130a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80212f8:	4b16      	ldr	r3, [pc, #88]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 80212fa:	69db      	ldr	r3, [r3, #28]
 80212fc:	f043 0304 	orr.w	r3, r3, #4
 8021300:	4a14      	ldr	r2, [pc, #80]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 8021302:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8021304:	4b12      	ldr	r3, [pc, #72]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 8021306:	2240      	movs	r2, #64	; 0x40
 8021308:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802130a:	4b11      	ldr	r3, [pc, #68]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 802130c:	68db      	ldr	r3, [r3, #12]
 802130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021312:	2b00      	cmp	r3, #0
 8021314:	d008      	beq.n	8021328 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8021316:	4b0f      	ldr	r3, [pc, #60]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 8021318:	69db      	ldr	r3, [r3, #28]
 802131a:	f043 0302 	orr.w	r3, r3, #2
 802131e:	4a0d      	ldr	r2, [pc, #52]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 8021320:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8021322:	4b0b      	ldr	r3, [pc, #44]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 8021324:	2280      	movs	r2, #128	; 0x80
 8021326:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8021328:	4b09      	ldr	r3, [pc, #36]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 802132a:	68db      	ldr	r3, [r3, #12]
 802132c:	f003 0302 	and.w	r3, r3, #2
 8021330:	2b00      	cmp	r3, #0
 8021332:	d008      	beq.n	8021346 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8021334:	4b07      	ldr	r3, [pc, #28]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 8021336:	69db      	ldr	r3, [r3, #28]
 8021338:	f043 0320 	orr.w	r3, r3, #32
 802133c:	4a05      	ldr	r2, [pc, #20]	; (8021354 <FLASH_SetErrorCode+0xa8>)
 802133e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8021340:	4b03      	ldr	r3, [pc, #12]	; (8021350 <FLASH_SetErrorCode+0xa4>)
 8021342:	2202      	movs	r2, #2
 8021344:	60da      	str	r2, [r3, #12]
  }
}
 8021346:	bf00      	nop
 8021348:	46bd      	mov	sp, r7
 802134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802134e:	4770      	bx	lr
 8021350:	40023c00 	.word	0x40023c00
 8021354:	200000a8 	.word	0x200000a8

08021358 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8021358:	b580      	push	{r7, lr}
 802135a:	b084      	sub	sp, #16
 802135c:	af00      	add	r7, sp, #0
 802135e:	6078      	str	r0, [r7, #4]
 8021360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8021362:	2301      	movs	r3, #1
 8021364:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8021366:	2300      	movs	r3, #0
 8021368:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802136a:	4b31      	ldr	r3, [pc, #196]	; (8021430 <HAL_FLASHEx_Erase+0xd8>)
 802136c:	7e1b      	ldrb	r3, [r3, #24]
 802136e:	2b01      	cmp	r3, #1
 8021370:	d101      	bne.n	8021376 <HAL_FLASHEx_Erase+0x1e>
 8021372:	2302      	movs	r3, #2
 8021374:	e058      	b.n	8021428 <HAL_FLASHEx_Erase+0xd0>
 8021376:	4b2e      	ldr	r3, [pc, #184]	; (8021430 <HAL_FLASHEx_Erase+0xd8>)
 8021378:	2201      	movs	r2, #1
 802137a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802137c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021380:	f7ff feba 	bl	80210f8 <FLASH_WaitForLastOperation>
 8021384:	4603      	mov	r3, r0
 8021386:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8021388:	7bfb      	ldrb	r3, [r7, #15]
 802138a:	2b00      	cmp	r3, #0
 802138c:	d148      	bne.n	8021420 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802138e:	683b      	ldr	r3, [r7, #0]
 8021390:	f04f 32ff 	mov.w	r2, #4294967295
 8021394:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	2b01      	cmp	r3, #1
 802139c:	d115      	bne.n	80213ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	691b      	ldr	r3, [r3, #16]
 80213a2:	b2da      	uxtb	r2, r3
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	685b      	ldr	r3, [r3, #4]
 80213a8:	4619      	mov	r1, r3
 80213aa:	4610      	mov	r0, r2
 80213ac:	f000 f844 	bl	8021438 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80213b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80213b4:	f7ff fea0 	bl	80210f8 <FLASH_WaitForLastOperation>
 80213b8:	4603      	mov	r3, r0
 80213ba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80213bc:	4b1d      	ldr	r3, [pc, #116]	; (8021434 <HAL_FLASHEx_Erase+0xdc>)
 80213be:	691b      	ldr	r3, [r3, #16]
 80213c0:	4a1c      	ldr	r2, [pc, #112]	; (8021434 <HAL_FLASHEx_Erase+0xdc>)
 80213c2:	f023 0304 	bic.w	r3, r3, #4
 80213c6:	6113      	str	r3, [r2, #16]
 80213c8:	e028      	b.n	802141c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	689b      	ldr	r3, [r3, #8]
 80213ce:	60bb      	str	r3, [r7, #8]
 80213d0:	e01c      	b.n	802140c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	691b      	ldr	r3, [r3, #16]
 80213d6:	b2db      	uxtb	r3, r3
 80213d8:	4619      	mov	r1, r3
 80213da:	68b8      	ldr	r0, [r7, #8]
 80213dc:	f000 f850 	bl	8021480 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80213e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80213e4:	f7ff fe88 	bl	80210f8 <FLASH_WaitForLastOperation>
 80213e8:	4603      	mov	r3, r0
 80213ea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80213ec:	4b11      	ldr	r3, [pc, #68]	; (8021434 <HAL_FLASHEx_Erase+0xdc>)
 80213ee:	691b      	ldr	r3, [r3, #16]
 80213f0:	4a10      	ldr	r2, [pc, #64]	; (8021434 <HAL_FLASHEx_Erase+0xdc>)
 80213f2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80213f6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80213f8:	7bfb      	ldrb	r3, [r7, #15]
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d003      	beq.n	8021406 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80213fe:	683b      	ldr	r3, [r7, #0]
 8021400:	68ba      	ldr	r2, [r7, #8]
 8021402:	601a      	str	r2, [r3, #0]
          break;
 8021404:	e00a      	b.n	802141c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8021406:	68bb      	ldr	r3, [r7, #8]
 8021408:	3301      	adds	r3, #1
 802140a:	60bb      	str	r3, [r7, #8]
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	68da      	ldr	r2, [r3, #12]
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	689b      	ldr	r3, [r3, #8]
 8021414:	4413      	add	r3, r2
 8021416:	68ba      	ldr	r2, [r7, #8]
 8021418:	429a      	cmp	r2, r3
 802141a:	d3da      	bcc.n	80213d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802141c:	f000 f878 	bl	8021510 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8021420:	4b03      	ldr	r3, [pc, #12]	; (8021430 <HAL_FLASHEx_Erase+0xd8>)
 8021422:	2200      	movs	r2, #0
 8021424:	761a      	strb	r2, [r3, #24]

  return status;
 8021426:	7bfb      	ldrb	r3, [r7, #15]
}
 8021428:	4618      	mov	r0, r3
 802142a:	3710      	adds	r7, #16
 802142c:	46bd      	mov	sp, r7
 802142e:	bd80      	pop	{r7, pc}
 8021430:	200000a8 	.word	0x200000a8
 8021434:	40023c00 	.word	0x40023c00

08021438 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8021438:	b480      	push	{r7}
 802143a:	b083      	sub	sp, #12
 802143c:	af00      	add	r7, sp, #0
 802143e:	4603      	mov	r3, r0
 8021440:	6039      	str	r1, [r7, #0]
 8021442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8021444:	4b0d      	ldr	r3, [pc, #52]	; (802147c <FLASH_MassErase+0x44>)
 8021446:	691b      	ldr	r3, [r3, #16]
 8021448:	4a0c      	ldr	r2, [pc, #48]	; (802147c <FLASH_MassErase+0x44>)
 802144a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802144e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8021450:	4b0a      	ldr	r3, [pc, #40]	; (802147c <FLASH_MassErase+0x44>)
 8021452:	691b      	ldr	r3, [r3, #16]
 8021454:	4a09      	ldr	r2, [pc, #36]	; (802147c <FLASH_MassErase+0x44>)
 8021456:	f043 0304 	orr.w	r3, r3, #4
 802145a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802145c:	4b07      	ldr	r3, [pc, #28]	; (802147c <FLASH_MassErase+0x44>)
 802145e:	691a      	ldr	r2, [r3, #16]
 8021460:	79fb      	ldrb	r3, [r7, #7]
 8021462:	021b      	lsls	r3, r3, #8
 8021464:	4313      	orrs	r3, r2
 8021466:	4a05      	ldr	r2, [pc, #20]	; (802147c <FLASH_MassErase+0x44>)
 8021468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802146c:	6113      	str	r3, [r2, #16]
}
 802146e:	bf00      	nop
 8021470:	370c      	adds	r7, #12
 8021472:	46bd      	mov	sp, r7
 8021474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021478:	4770      	bx	lr
 802147a:	bf00      	nop
 802147c:	40023c00 	.word	0x40023c00

08021480 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8021480:	b480      	push	{r7}
 8021482:	b085      	sub	sp, #20
 8021484:	af00      	add	r7, sp, #0
 8021486:	6078      	str	r0, [r7, #4]
 8021488:	460b      	mov	r3, r1
 802148a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802148c:	2300      	movs	r3, #0
 802148e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8021490:	78fb      	ldrb	r3, [r7, #3]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d102      	bne.n	802149c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8021496:	2300      	movs	r3, #0
 8021498:	60fb      	str	r3, [r7, #12]
 802149a:	e010      	b.n	80214be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802149c:	78fb      	ldrb	r3, [r7, #3]
 802149e:	2b01      	cmp	r3, #1
 80214a0:	d103      	bne.n	80214aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80214a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80214a6:	60fb      	str	r3, [r7, #12]
 80214a8:	e009      	b.n	80214be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80214aa:	78fb      	ldrb	r3, [r7, #3]
 80214ac:	2b02      	cmp	r3, #2
 80214ae:	d103      	bne.n	80214b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80214b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80214b4:	60fb      	str	r3, [r7, #12]
 80214b6:	e002      	b.n	80214be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80214b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80214bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80214be:	4b13      	ldr	r3, [pc, #76]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214c0:	691b      	ldr	r3, [r3, #16]
 80214c2:	4a12      	ldr	r2, [pc, #72]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80214c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80214ca:	4b10      	ldr	r3, [pc, #64]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214cc:	691a      	ldr	r2, [r3, #16]
 80214ce:	490f      	ldr	r1, [pc, #60]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	4313      	orrs	r3, r2
 80214d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80214d6:	4b0d      	ldr	r3, [pc, #52]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214d8:	691b      	ldr	r3, [r3, #16]
 80214da:	4a0c      	ldr	r2, [pc, #48]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80214e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80214e2:	4b0a      	ldr	r3, [pc, #40]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214e4:	691a      	ldr	r2, [r3, #16]
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	00db      	lsls	r3, r3, #3
 80214ea:	4313      	orrs	r3, r2
 80214ec:	4a07      	ldr	r2, [pc, #28]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214ee:	f043 0302 	orr.w	r3, r3, #2
 80214f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80214f4:	4b05      	ldr	r3, [pc, #20]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214f6:	691b      	ldr	r3, [r3, #16]
 80214f8:	4a04      	ldr	r2, [pc, #16]	; (802150c <FLASH_Erase_Sector+0x8c>)
 80214fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80214fe:	6113      	str	r3, [r2, #16]
}
 8021500:	bf00      	nop
 8021502:	3714      	adds	r7, #20
 8021504:	46bd      	mov	sp, r7
 8021506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150a:	4770      	bx	lr
 802150c:	40023c00 	.word	0x40023c00

08021510 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8021510:	b480      	push	{r7}
 8021512:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8021514:	4b20      	ldr	r3, [pc, #128]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802151c:	2b00      	cmp	r3, #0
 802151e:	d017      	beq.n	8021550 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8021520:	4b1d      	ldr	r3, [pc, #116]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	4a1c      	ldr	r2, [pc, #112]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021526:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802152a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802152c:	4b1a      	ldr	r3, [pc, #104]	; (8021598 <FLASH_FlushCaches+0x88>)
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	4a19      	ldr	r2, [pc, #100]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021536:	6013      	str	r3, [r2, #0]
 8021538:	4b17      	ldr	r3, [pc, #92]	; (8021598 <FLASH_FlushCaches+0x88>)
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	4a16      	ldr	r2, [pc, #88]	; (8021598 <FLASH_FlushCaches+0x88>)
 802153e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021542:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021544:	4b14      	ldr	r3, [pc, #80]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	4a13      	ldr	r2, [pc, #76]	; (8021598 <FLASH_FlushCaches+0x88>)
 802154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802154e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8021550:	4b11      	ldr	r3, [pc, #68]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021558:	2b00      	cmp	r3, #0
 802155a:	d017      	beq.n	802158c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802155c:	4b0e      	ldr	r3, [pc, #56]	; (8021598 <FLASH_FlushCaches+0x88>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	4a0d      	ldr	r2, [pc, #52]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021566:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8021568:	4b0b      	ldr	r3, [pc, #44]	; (8021598 <FLASH_FlushCaches+0x88>)
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	4a0a      	ldr	r2, [pc, #40]	; (8021598 <FLASH_FlushCaches+0x88>)
 802156e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021572:	6013      	str	r3, [r2, #0]
 8021574:	4b08      	ldr	r3, [pc, #32]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	4a07      	ldr	r2, [pc, #28]	; (8021598 <FLASH_FlushCaches+0x88>)
 802157a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802157e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8021580:	4b05      	ldr	r3, [pc, #20]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	4a04      	ldr	r2, [pc, #16]	; (8021598 <FLASH_FlushCaches+0x88>)
 8021586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802158a:	6013      	str	r3, [r2, #0]
  }
}
 802158c:	bf00      	nop
 802158e:	46bd      	mov	sp, r7
 8021590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021594:	4770      	bx	lr
 8021596:	bf00      	nop
 8021598:	40023c00 	.word	0x40023c00

0802159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802159c:	b480      	push	{r7}
 802159e:	b089      	sub	sp, #36	; 0x24
 80215a0:	af00      	add	r7, sp, #0
 80215a2:	6078      	str	r0, [r7, #4]
 80215a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80215a6:	2300      	movs	r3, #0
 80215a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80215aa:	2300      	movs	r3, #0
 80215ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80215ae:	2300      	movs	r3, #0
 80215b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80215b2:	2300      	movs	r3, #0
 80215b4:	61fb      	str	r3, [r7, #28]
 80215b6:	e16b      	b.n	8021890 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80215b8:	2201      	movs	r2, #1
 80215ba:	69fb      	ldr	r3, [r7, #28]
 80215bc:	fa02 f303 	lsl.w	r3, r2, r3
 80215c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	697a      	ldr	r2, [r7, #20]
 80215c8:	4013      	ands	r3, r2
 80215ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80215cc:	693a      	ldr	r2, [r7, #16]
 80215ce:	697b      	ldr	r3, [r7, #20]
 80215d0:	429a      	cmp	r2, r3
 80215d2:	f040 815a 	bne.w	802188a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80215d6:	683b      	ldr	r3, [r7, #0]
 80215d8:	685b      	ldr	r3, [r3, #4]
 80215da:	f003 0303 	and.w	r3, r3, #3
 80215de:	2b01      	cmp	r3, #1
 80215e0:	d005      	beq.n	80215ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80215e2:	683b      	ldr	r3, [r7, #0]
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80215ea:	2b02      	cmp	r3, #2
 80215ec:	d130      	bne.n	8021650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	689b      	ldr	r3, [r3, #8]
 80215f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80215f4:	69fb      	ldr	r3, [r7, #28]
 80215f6:	005b      	lsls	r3, r3, #1
 80215f8:	2203      	movs	r2, #3
 80215fa:	fa02 f303 	lsl.w	r3, r2, r3
 80215fe:	43db      	mvns	r3, r3
 8021600:	69ba      	ldr	r2, [r7, #24]
 8021602:	4013      	ands	r3, r2
 8021604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021606:	683b      	ldr	r3, [r7, #0]
 8021608:	68da      	ldr	r2, [r3, #12]
 802160a:	69fb      	ldr	r3, [r7, #28]
 802160c:	005b      	lsls	r3, r3, #1
 802160e:	fa02 f303 	lsl.w	r3, r2, r3
 8021612:	69ba      	ldr	r2, [r7, #24]
 8021614:	4313      	orrs	r3, r2
 8021616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	69ba      	ldr	r2, [r7, #24]
 802161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	685b      	ldr	r3, [r3, #4]
 8021622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021624:	2201      	movs	r2, #1
 8021626:	69fb      	ldr	r3, [r7, #28]
 8021628:	fa02 f303 	lsl.w	r3, r2, r3
 802162c:	43db      	mvns	r3, r3
 802162e:	69ba      	ldr	r2, [r7, #24]
 8021630:	4013      	ands	r3, r2
 8021632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021634:	683b      	ldr	r3, [r7, #0]
 8021636:	685b      	ldr	r3, [r3, #4]
 8021638:	091b      	lsrs	r3, r3, #4
 802163a:	f003 0201 	and.w	r2, r3, #1
 802163e:	69fb      	ldr	r3, [r7, #28]
 8021640:	fa02 f303 	lsl.w	r3, r2, r3
 8021644:	69ba      	ldr	r2, [r7, #24]
 8021646:	4313      	orrs	r3, r2
 8021648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	69ba      	ldr	r2, [r7, #24]
 802164e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8021650:	683b      	ldr	r3, [r7, #0]
 8021652:	685b      	ldr	r3, [r3, #4]
 8021654:	f003 0303 	and.w	r3, r3, #3
 8021658:	2b03      	cmp	r3, #3
 802165a:	d017      	beq.n	802168c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	68db      	ldr	r3, [r3, #12]
 8021660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8021662:	69fb      	ldr	r3, [r7, #28]
 8021664:	005b      	lsls	r3, r3, #1
 8021666:	2203      	movs	r2, #3
 8021668:	fa02 f303 	lsl.w	r3, r2, r3
 802166c:	43db      	mvns	r3, r3
 802166e:	69ba      	ldr	r2, [r7, #24]
 8021670:	4013      	ands	r3, r2
 8021672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021674:	683b      	ldr	r3, [r7, #0]
 8021676:	689a      	ldr	r2, [r3, #8]
 8021678:	69fb      	ldr	r3, [r7, #28]
 802167a:	005b      	lsls	r3, r3, #1
 802167c:	fa02 f303 	lsl.w	r3, r2, r3
 8021680:	69ba      	ldr	r2, [r7, #24]
 8021682:	4313      	orrs	r3, r2
 8021684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	69ba      	ldr	r2, [r7, #24]
 802168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802168c:	683b      	ldr	r3, [r7, #0]
 802168e:	685b      	ldr	r3, [r3, #4]
 8021690:	f003 0303 	and.w	r3, r3, #3
 8021694:	2b02      	cmp	r3, #2
 8021696:	d123      	bne.n	80216e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021698:	69fb      	ldr	r3, [r7, #28]
 802169a:	08da      	lsrs	r2, r3, #3
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	3208      	adds	r2, #8
 80216a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80216a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80216a6:	69fb      	ldr	r3, [r7, #28]
 80216a8:	f003 0307 	and.w	r3, r3, #7
 80216ac:	009b      	lsls	r3, r3, #2
 80216ae:	220f      	movs	r2, #15
 80216b0:	fa02 f303 	lsl.w	r3, r2, r3
 80216b4:	43db      	mvns	r3, r3
 80216b6:	69ba      	ldr	r2, [r7, #24]
 80216b8:	4013      	ands	r3, r2
 80216ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80216bc:	683b      	ldr	r3, [r7, #0]
 80216be:	691a      	ldr	r2, [r3, #16]
 80216c0:	69fb      	ldr	r3, [r7, #28]
 80216c2:	f003 0307 	and.w	r3, r3, #7
 80216c6:	009b      	lsls	r3, r3, #2
 80216c8:	fa02 f303 	lsl.w	r3, r2, r3
 80216cc:	69ba      	ldr	r2, [r7, #24]
 80216ce:	4313      	orrs	r3, r2
 80216d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80216d2:	69fb      	ldr	r3, [r7, #28]
 80216d4:	08da      	lsrs	r2, r3, #3
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	3208      	adds	r2, #8
 80216da:	69b9      	ldr	r1, [r7, #24]
 80216dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80216e6:	69fb      	ldr	r3, [r7, #28]
 80216e8:	005b      	lsls	r3, r3, #1
 80216ea:	2203      	movs	r2, #3
 80216ec:	fa02 f303 	lsl.w	r3, r2, r3
 80216f0:	43db      	mvns	r3, r3
 80216f2:	69ba      	ldr	r2, [r7, #24]
 80216f4:	4013      	ands	r3, r2
 80216f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	685b      	ldr	r3, [r3, #4]
 80216fc:	f003 0203 	and.w	r2, r3, #3
 8021700:	69fb      	ldr	r3, [r7, #28]
 8021702:	005b      	lsls	r3, r3, #1
 8021704:	fa02 f303 	lsl.w	r3, r2, r3
 8021708:	69ba      	ldr	r2, [r7, #24]
 802170a:	4313      	orrs	r3, r2
 802170c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	69ba      	ldr	r2, [r7, #24]
 8021712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8021714:	683b      	ldr	r3, [r7, #0]
 8021716:	685b      	ldr	r3, [r3, #4]
 8021718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802171c:	2b00      	cmp	r3, #0
 802171e:	f000 80b4 	beq.w	802188a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021722:	2300      	movs	r3, #0
 8021724:	60fb      	str	r3, [r7, #12]
 8021726:	4b60      	ldr	r3, [pc, #384]	; (80218a8 <HAL_GPIO_Init+0x30c>)
 8021728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802172a:	4a5f      	ldr	r2, [pc, #380]	; (80218a8 <HAL_GPIO_Init+0x30c>)
 802172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021730:	6453      	str	r3, [r2, #68]	; 0x44
 8021732:	4b5d      	ldr	r3, [pc, #372]	; (80218a8 <HAL_GPIO_Init+0x30c>)
 8021734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802173a:	60fb      	str	r3, [r7, #12]
 802173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802173e:	4a5b      	ldr	r2, [pc, #364]	; (80218ac <HAL_GPIO_Init+0x310>)
 8021740:	69fb      	ldr	r3, [r7, #28]
 8021742:	089b      	lsrs	r3, r3, #2
 8021744:	3302      	adds	r3, #2
 8021746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802174c:	69fb      	ldr	r3, [r7, #28]
 802174e:	f003 0303 	and.w	r3, r3, #3
 8021752:	009b      	lsls	r3, r3, #2
 8021754:	220f      	movs	r2, #15
 8021756:	fa02 f303 	lsl.w	r3, r2, r3
 802175a:	43db      	mvns	r3, r3
 802175c:	69ba      	ldr	r2, [r7, #24]
 802175e:	4013      	ands	r3, r2
 8021760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	4a52      	ldr	r2, [pc, #328]	; (80218b0 <HAL_GPIO_Init+0x314>)
 8021766:	4293      	cmp	r3, r2
 8021768:	d02b      	beq.n	80217c2 <HAL_GPIO_Init+0x226>
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	4a51      	ldr	r2, [pc, #324]	; (80218b4 <HAL_GPIO_Init+0x318>)
 802176e:	4293      	cmp	r3, r2
 8021770:	d025      	beq.n	80217be <HAL_GPIO_Init+0x222>
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	4a50      	ldr	r2, [pc, #320]	; (80218b8 <HAL_GPIO_Init+0x31c>)
 8021776:	4293      	cmp	r3, r2
 8021778:	d01f      	beq.n	80217ba <HAL_GPIO_Init+0x21e>
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	4a4f      	ldr	r2, [pc, #316]	; (80218bc <HAL_GPIO_Init+0x320>)
 802177e:	4293      	cmp	r3, r2
 8021780:	d019      	beq.n	80217b6 <HAL_GPIO_Init+0x21a>
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	4a4e      	ldr	r2, [pc, #312]	; (80218c0 <HAL_GPIO_Init+0x324>)
 8021786:	4293      	cmp	r3, r2
 8021788:	d013      	beq.n	80217b2 <HAL_GPIO_Init+0x216>
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	4a4d      	ldr	r2, [pc, #308]	; (80218c4 <HAL_GPIO_Init+0x328>)
 802178e:	4293      	cmp	r3, r2
 8021790:	d00d      	beq.n	80217ae <HAL_GPIO_Init+0x212>
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	4a4c      	ldr	r2, [pc, #304]	; (80218c8 <HAL_GPIO_Init+0x32c>)
 8021796:	4293      	cmp	r3, r2
 8021798:	d007      	beq.n	80217aa <HAL_GPIO_Init+0x20e>
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	4a4b      	ldr	r2, [pc, #300]	; (80218cc <HAL_GPIO_Init+0x330>)
 802179e:	4293      	cmp	r3, r2
 80217a0:	d101      	bne.n	80217a6 <HAL_GPIO_Init+0x20a>
 80217a2:	2307      	movs	r3, #7
 80217a4:	e00e      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217a6:	2308      	movs	r3, #8
 80217a8:	e00c      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217aa:	2306      	movs	r3, #6
 80217ac:	e00a      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217ae:	2305      	movs	r3, #5
 80217b0:	e008      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217b2:	2304      	movs	r3, #4
 80217b4:	e006      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217b6:	2303      	movs	r3, #3
 80217b8:	e004      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217ba:	2302      	movs	r3, #2
 80217bc:	e002      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217be:	2301      	movs	r3, #1
 80217c0:	e000      	b.n	80217c4 <HAL_GPIO_Init+0x228>
 80217c2:	2300      	movs	r3, #0
 80217c4:	69fa      	ldr	r2, [r7, #28]
 80217c6:	f002 0203 	and.w	r2, r2, #3
 80217ca:	0092      	lsls	r2, r2, #2
 80217cc:	4093      	lsls	r3, r2
 80217ce:	69ba      	ldr	r2, [r7, #24]
 80217d0:	4313      	orrs	r3, r2
 80217d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80217d4:	4935      	ldr	r1, [pc, #212]	; (80218ac <HAL_GPIO_Init+0x310>)
 80217d6:	69fb      	ldr	r3, [r7, #28]
 80217d8:	089b      	lsrs	r3, r3, #2
 80217da:	3302      	adds	r3, #2
 80217dc:	69ba      	ldr	r2, [r7, #24]
 80217de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80217e2:	4b3b      	ldr	r3, [pc, #236]	; (80218d0 <HAL_GPIO_Init+0x334>)
 80217e4:	689b      	ldr	r3, [r3, #8]
 80217e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80217e8:	693b      	ldr	r3, [r7, #16]
 80217ea:	43db      	mvns	r3, r3
 80217ec:	69ba      	ldr	r2, [r7, #24]
 80217ee:	4013      	ands	r3, r2
 80217f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	685b      	ldr	r3, [r3, #4]
 80217f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d003      	beq.n	8021806 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80217fe:	69ba      	ldr	r2, [r7, #24]
 8021800:	693b      	ldr	r3, [r7, #16]
 8021802:	4313      	orrs	r3, r2
 8021804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8021806:	4a32      	ldr	r2, [pc, #200]	; (80218d0 <HAL_GPIO_Init+0x334>)
 8021808:	69bb      	ldr	r3, [r7, #24]
 802180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802180c:	4b30      	ldr	r3, [pc, #192]	; (80218d0 <HAL_GPIO_Init+0x334>)
 802180e:	68db      	ldr	r3, [r3, #12]
 8021810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021812:	693b      	ldr	r3, [r7, #16]
 8021814:	43db      	mvns	r3, r3
 8021816:	69ba      	ldr	r2, [r7, #24]
 8021818:	4013      	ands	r3, r2
 802181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802181c:	683b      	ldr	r3, [r7, #0]
 802181e:	685b      	ldr	r3, [r3, #4]
 8021820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021824:	2b00      	cmp	r3, #0
 8021826:	d003      	beq.n	8021830 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8021828:	69ba      	ldr	r2, [r7, #24]
 802182a:	693b      	ldr	r3, [r7, #16]
 802182c:	4313      	orrs	r3, r2
 802182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8021830:	4a27      	ldr	r2, [pc, #156]	; (80218d0 <HAL_GPIO_Init+0x334>)
 8021832:	69bb      	ldr	r3, [r7, #24]
 8021834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8021836:	4b26      	ldr	r3, [pc, #152]	; (80218d0 <HAL_GPIO_Init+0x334>)
 8021838:	685b      	ldr	r3, [r3, #4]
 802183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802183c:	693b      	ldr	r3, [r7, #16]
 802183e:	43db      	mvns	r3, r3
 8021840:	69ba      	ldr	r2, [r7, #24]
 8021842:	4013      	ands	r3, r2
 8021844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8021846:	683b      	ldr	r3, [r7, #0]
 8021848:	685b      	ldr	r3, [r3, #4]
 802184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802184e:	2b00      	cmp	r3, #0
 8021850:	d003      	beq.n	802185a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8021852:	69ba      	ldr	r2, [r7, #24]
 8021854:	693b      	ldr	r3, [r7, #16]
 8021856:	4313      	orrs	r3, r2
 8021858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802185a:	4a1d      	ldr	r2, [pc, #116]	; (80218d0 <HAL_GPIO_Init+0x334>)
 802185c:	69bb      	ldr	r3, [r7, #24]
 802185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021860:	4b1b      	ldr	r3, [pc, #108]	; (80218d0 <HAL_GPIO_Init+0x334>)
 8021862:	681b      	ldr	r3, [r3, #0]
 8021864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021866:	693b      	ldr	r3, [r7, #16]
 8021868:	43db      	mvns	r3, r3
 802186a:	69ba      	ldr	r2, [r7, #24]
 802186c:	4013      	ands	r3, r2
 802186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8021870:	683b      	ldr	r3, [r7, #0]
 8021872:	685b      	ldr	r3, [r3, #4]
 8021874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021878:	2b00      	cmp	r3, #0
 802187a:	d003      	beq.n	8021884 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802187c:	69ba      	ldr	r2, [r7, #24]
 802187e:	693b      	ldr	r3, [r7, #16]
 8021880:	4313      	orrs	r3, r2
 8021882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8021884:	4a12      	ldr	r2, [pc, #72]	; (80218d0 <HAL_GPIO_Init+0x334>)
 8021886:	69bb      	ldr	r3, [r7, #24]
 8021888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802188a:	69fb      	ldr	r3, [r7, #28]
 802188c:	3301      	adds	r3, #1
 802188e:	61fb      	str	r3, [r7, #28]
 8021890:	69fb      	ldr	r3, [r7, #28]
 8021892:	2b0f      	cmp	r3, #15
 8021894:	f67f ae90 	bls.w	80215b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8021898:	bf00      	nop
 802189a:	bf00      	nop
 802189c:	3724      	adds	r7, #36	; 0x24
 802189e:	46bd      	mov	sp, r7
 80218a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218a4:	4770      	bx	lr
 80218a6:	bf00      	nop
 80218a8:	40023800 	.word	0x40023800
 80218ac:	40013800 	.word	0x40013800
 80218b0:	40020000 	.word	0x40020000
 80218b4:	40020400 	.word	0x40020400
 80218b8:	40020800 	.word	0x40020800
 80218bc:	40020c00 	.word	0x40020c00
 80218c0:	40021000 	.word	0x40021000
 80218c4:	40021400 	.word	0x40021400
 80218c8:	40021800 	.word	0x40021800
 80218cc:	40021c00 	.word	0x40021c00
 80218d0:	40013c00 	.word	0x40013c00

080218d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80218d4:	b480      	push	{r7}
 80218d6:	b083      	sub	sp, #12
 80218d8:	af00      	add	r7, sp, #0
 80218da:	6078      	str	r0, [r7, #4]
 80218dc:	460b      	mov	r3, r1
 80218de:	807b      	strh	r3, [r7, #2]
 80218e0:	4613      	mov	r3, r2
 80218e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80218e4:	787b      	ldrb	r3, [r7, #1]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d003      	beq.n	80218f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80218ea:	887a      	ldrh	r2, [r7, #2]
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80218f0:	e003      	b.n	80218fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80218f2:	887b      	ldrh	r3, [r7, #2]
 80218f4:	041a      	lsls	r2, r3, #16
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	619a      	str	r2, [r3, #24]
}
 80218fa:	bf00      	nop
 80218fc:	370c      	adds	r7, #12
 80218fe:	46bd      	mov	sp, r7
 8021900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021904:	4770      	bx	lr

08021906 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8021906:	b480      	push	{r7}
 8021908:	b085      	sub	sp, #20
 802190a:	af00      	add	r7, sp, #0
 802190c:	6078      	str	r0, [r7, #4]
 802190e:	460b      	mov	r3, r1
 8021910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	695b      	ldr	r3, [r3, #20]
 8021916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8021918:	887a      	ldrh	r2, [r7, #2]
 802191a:	68fb      	ldr	r3, [r7, #12]
 802191c:	4013      	ands	r3, r2
 802191e:	041a      	lsls	r2, r3, #16
 8021920:	68fb      	ldr	r3, [r7, #12]
 8021922:	43d9      	mvns	r1, r3
 8021924:	887b      	ldrh	r3, [r7, #2]
 8021926:	400b      	ands	r3, r1
 8021928:	431a      	orrs	r2, r3
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	619a      	str	r2, [r3, #24]
}
 802192e:	bf00      	nop
 8021930:	3714      	adds	r7, #20
 8021932:	46bd      	mov	sp, r7
 8021934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021938:	4770      	bx	lr
	...

0802193c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802193c:	b580      	push	{r7, lr}
 802193e:	b086      	sub	sp, #24
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	2b00      	cmp	r3, #0
 8021948:	d101      	bne.n	802194e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802194a:	2301      	movs	r3, #1
 802194c:	e267      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	681b      	ldr	r3, [r3, #0]
 8021952:	f003 0301 	and.w	r3, r3, #1
 8021956:	2b00      	cmp	r3, #0
 8021958:	d075      	beq.n	8021a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802195a:	4b88      	ldr	r3, [pc, #544]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 802195c:	689b      	ldr	r3, [r3, #8]
 802195e:	f003 030c 	and.w	r3, r3, #12
 8021962:	2b04      	cmp	r3, #4
 8021964:	d00c      	beq.n	8021980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021966:	4b85      	ldr	r3, [pc, #532]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021968:	689b      	ldr	r3, [r3, #8]
 802196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802196e:	2b08      	cmp	r3, #8
 8021970:	d112      	bne.n	8021998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021972:	4b82      	ldr	r3, [pc, #520]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021974:	685b      	ldr	r3, [r3, #4]
 8021976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802197a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802197e:	d10b      	bne.n	8021998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021980:	4b7e      	ldr	r3, [pc, #504]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021982:	681b      	ldr	r3, [r3, #0]
 8021984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021988:	2b00      	cmp	r3, #0
 802198a:	d05b      	beq.n	8021a44 <HAL_RCC_OscConfig+0x108>
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	685b      	ldr	r3, [r3, #4]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d157      	bne.n	8021a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8021994:	2301      	movs	r3, #1
 8021996:	e242      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	685b      	ldr	r3, [r3, #4]
 802199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219a0:	d106      	bne.n	80219b0 <HAL_RCC_OscConfig+0x74>
 80219a2:	4b76      	ldr	r3, [pc, #472]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	4a75      	ldr	r2, [pc, #468]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80219ac:	6013      	str	r3, [r2, #0]
 80219ae:	e01d      	b.n	80219ec <HAL_RCC_OscConfig+0xb0>
 80219b0:	687b      	ldr	r3, [r7, #4]
 80219b2:	685b      	ldr	r3, [r3, #4]
 80219b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80219b8:	d10c      	bne.n	80219d4 <HAL_RCC_OscConfig+0x98>
 80219ba:	4b70      	ldr	r3, [pc, #448]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	4a6f      	ldr	r2, [pc, #444]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80219c4:	6013      	str	r3, [r2, #0]
 80219c6:	4b6d      	ldr	r3, [pc, #436]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219c8:	681b      	ldr	r3, [r3, #0]
 80219ca:	4a6c      	ldr	r2, [pc, #432]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80219d0:	6013      	str	r3, [r2, #0]
 80219d2:	e00b      	b.n	80219ec <HAL_RCC_OscConfig+0xb0>
 80219d4:	4b69      	ldr	r3, [pc, #420]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	4a68      	ldr	r2, [pc, #416]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80219de:	6013      	str	r3, [r2, #0]
 80219e0:	4b66      	ldr	r3, [pc, #408]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	4a65      	ldr	r2, [pc, #404]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 80219e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80219ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	685b      	ldr	r3, [r3, #4]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d013      	beq.n	8021a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80219f4:	f7ff f91a 	bl	8020c2c <HAL_GetTick>
 80219f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80219fa:	e008      	b.n	8021a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80219fc:	f7ff f916 	bl	8020c2c <HAL_GetTick>
 8021a00:	4602      	mov	r2, r0
 8021a02:	693b      	ldr	r3, [r7, #16]
 8021a04:	1ad3      	subs	r3, r2, r3
 8021a06:	2b64      	cmp	r3, #100	; 0x64
 8021a08:	d901      	bls.n	8021a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8021a0a:	2303      	movs	r3, #3
 8021a0c:	e207      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021a0e:	4b5b      	ldr	r3, [pc, #364]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d0f0      	beq.n	80219fc <HAL_RCC_OscConfig+0xc0>
 8021a1a:	e014      	b.n	8021a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021a1c:	f7ff f906 	bl	8020c2c <HAL_GetTick>
 8021a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021a22:	e008      	b.n	8021a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021a24:	f7ff f902 	bl	8020c2c <HAL_GetTick>
 8021a28:	4602      	mov	r2, r0
 8021a2a:	693b      	ldr	r3, [r7, #16]
 8021a2c:	1ad3      	subs	r3, r2, r3
 8021a2e:	2b64      	cmp	r3, #100	; 0x64
 8021a30:	d901      	bls.n	8021a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8021a32:	2303      	movs	r3, #3
 8021a34:	e1f3      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021a36:	4b51      	ldr	r3, [pc, #324]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d1f0      	bne.n	8021a24 <HAL_RCC_OscConfig+0xe8>
 8021a42:	e000      	b.n	8021a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	f003 0302 	and.w	r3, r3, #2
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d063      	beq.n	8021b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021a52:	4b4a      	ldr	r3, [pc, #296]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a54:	689b      	ldr	r3, [r3, #8]
 8021a56:	f003 030c 	and.w	r3, r3, #12
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d00b      	beq.n	8021a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021a5e:	4b47      	ldr	r3, [pc, #284]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a60:	689b      	ldr	r3, [r3, #8]
 8021a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021a66:	2b08      	cmp	r3, #8
 8021a68:	d11c      	bne.n	8021aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021a6a:	4b44      	ldr	r3, [pc, #272]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a6c:	685b      	ldr	r3, [r3, #4]
 8021a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d116      	bne.n	8021aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021a76:	4b41      	ldr	r3, [pc, #260]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a78:	681b      	ldr	r3, [r3, #0]
 8021a7a:	f003 0302 	and.w	r3, r3, #2
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d005      	beq.n	8021a8e <HAL_RCC_OscConfig+0x152>
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	68db      	ldr	r3, [r3, #12]
 8021a86:	2b01      	cmp	r3, #1
 8021a88:	d001      	beq.n	8021a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8021a8a:	2301      	movs	r3, #1
 8021a8c:	e1c7      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021a8e:	4b3b      	ldr	r3, [pc, #236]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021a96:	687b      	ldr	r3, [r7, #4]
 8021a98:	691b      	ldr	r3, [r3, #16]
 8021a9a:	00db      	lsls	r3, r3, #3
 8021a9c:	4937      	ldr	r1, [pc, #220]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021a9e:	4313      	orrs	r3, r2
 8021aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021aa2:	e03a      	b.n	8021b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	68db      	ldr	r3, [r3, #12]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d020      	beq.n	8021aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021aac:	4b34      	ldr	r3, [pc, #208]	; (8021b80 <HAL_RCC_OscConfig+0x244>)
 8021aae:	2201      	movs	r2, #1
 8021ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ab2:	f7ff f8bb 	bl	8020c2c <HAL_GetTick>
 8021ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021ab8:	e008      	b.n	8021acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021aba:	f7ff f8b7 	bl	8020c2c <HAL_GetTick>
 8021abe:	4602      	mov	r2, r0
 8021ac0:	693b      	ldr	r3, [r7, #16]
 8021ac2:	1ad3      	subs	r3, r2, r3
 8021ac4:	2b02      	cmp	r3, #2
 8021ac6:	d901      	bls.n	8021acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8021ac8:	2303      	movs	r3, #3
 8021aca:	e1a8      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021acc:	4b2b      	ldr	r3, [pc, #172]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	f003 0302 	and.w	r3, r3, #2
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d0f0      	beq.n	8021aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021ad8:	4b28      	ldr	r3, [pc, #160]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	691b      	ldr	r3, [r3, #16]
 8021ae4:	00db      	lsls	r3, r3, #3
 8021ae6:	4925      	ldr	r1, [pc, #148]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021ae8:	4313      	orrs	r3, r2
 8021aea:	600b      	str	r3, [r1, #0]
 8021aec:	e015      	b.n	8021b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021aee:	4b24      	ldr	r3, [pc, #144]	; (8021b80 <HAL_RCC_OscConfig+0x244>)
 8021af0:	2200      	movs	r2, #0
 8021af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021af4:	f7ff f89a 	bl	8020c2c <HAL_GetTick>
 8021af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021afa:	e008      	b.n	8021b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021afc:	f7ff f896 	bl	8020c2c <HAL_GetTick>
 8021b00:	4602      	mov	r2, r0
 8021b02:	693b      	ldr	r3, [r7, #16]
 8021b04:	1ad3      	subs	r3, r2, r3
 8021b06:	2b02      	cmp	r3, #2
 8021b08:	d901      	bls.n	8021b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8021b0a:	2303      	movs	r3, #3
 8021b0c:	e187      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021b0e:	4b1b      	ldr	r3, [pc, #108]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	f003 0302 	and.w	r3, r3, #2
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d1f0      	bne.n	8021afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	681b      	ldr	r3, [r3, #0]
 8021b1e:	f003 0308 	and.w	r3, r3, #8
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d036      	beq.n	8021b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	695b      	ldr	r3, [r3, #20]
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	d016      	beq.n	8021b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021b2e:	4b15      	ldr	r3, [pc, #84]	; (8021b84 <HAL_RCC_OscConfig+0x248>)
 8021b30:	2201      	movs	r2, #1
 8021b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021b34:	f7ff f87a 	bl	8020c2c <HAL_GetTick>
 8021b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021b3a:	e008      	b.n	8021b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021b3c:	f7ff f876 	bl	8020c2c <HAL_GetTick>
 8021b40:	4602      	mov	r2, r0
 8021b42:	693b      	ldr	r3, [r7, #16]
 8021b44:	1ad3      	subs	r3, r2, r3
 8021b46:	2b02      	cmp	r3, #2
 8021b48:	d901      	bls.n	8021b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8021b4a:	2303      	movs	r3, #3
 8021b4c:	e167      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021b4e:	4b0b      	ldr	r3, [pc, #44]	; (8021b7c <HAL_RCC_OscConfig+0x240>)
 8021b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021b52:	f003 0302 	and.w	r3, r3, #2
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d0f0      	beq.n	8021b3c <HAL_RCC_OscConfig+0x200>
 8021b5a:	e01b      	b.n	8021b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021b5c:	4b09      	ldr	r3, [pc, #36]	; (8021b84 <HAL_RCC_OscConfig+0x248>)
 8021b5e:	2200      	movs	r2, #0
 8021b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021b62:	f7ff f863 	bl	8020c2c <HAL_GetTick>
 8021b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021b68:	e00e      	b.n	8021b88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021b6a:	f7ff f85f 	bl	8020c2c <HAL_GetTick>
 8021b6e:	4602      	mov	r2, r0
 8021b70:	693b      	ldr	r3, [r7, #16]
 8021b72:	1ad3      	subs	r3, r2, r3
 8021b74:	2b02      	cmp	r3, #2
 8021b76:	d907      	bls.n	8021b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021b78:	2303      	movs	r3, #3
 8021b7a:	e150      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
 8021b7c:	40023800 	.word	0x40023800
 8021b80:	42470000 	.word	0x42470000
 8021b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021b88:	4b88      	ldr	r3, [pc, #544]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021b8c:	f003 0302 	and.w	r3, r3, #2
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d1ea      	bne.n	8021b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	f003 0304 	and.w	r3, r3, #4
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	f000 8097 	beq.w	8021cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021ba6:	4b81      	ldr	r3, [pc, #516]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d10f      	bne.n	8021bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	60bb      	str	r3, [r7, #8]
 8021bb6:	4b7d      	ldr	r3, [pc, #500]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bba:	4a7c      	ldr	r2, [pc, #496]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8021bc2:	4b7a      	ldr	r3, [pc, #488]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021bca:	60bb      	str	r3, [r7, #8]
 8021bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021bce:	2301      	movs	r3, #1
 8021bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021bd2:	4b77      	ldr	r3, [pc, #476]	; (8021db0 <HAL_RCC_OscConfig+0x474>)
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d118      	bne.n	8021c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021bde:	4b74      	ldr	r3, [pc, #464]	; (8021db0 <HAL_RCC_OscConfig+0x474>)
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	4a73      	ldr	r2, [pc, #460]	; (8021db0 <HAL_RCC_OscConfig+0x474>)
 8021be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021bea:	f7ff f81f 	bl	8020c2c <HAL_GetTick>
 8021bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021bf0:	e008      	b.n	8021c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021bf2:	f7ff f81b 	bl	8020c2c <HAL_GetTick>
 8021bf6:	4602      	mov	r2, r0
 8021bf8:	693b      	ldr	r3, [r7, #16]
 8021bfa:	1ad3      	subs	r3, r2, r3
 8021bfc:	2b02      	cmp	r3, #2
 8021bfe:	d901      	bls.n	8021c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8021c00:	2303      	movs	r3, #3
 8021c02:	e10c      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021c04:	4b6a      	ldr	r3, [pc, #424]	; (8021db0 <HAL_RCC_OscConfig+0x474>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021c0c:	2b00      	cmp	r3, #0
 8021c0e:	d0f0      	beq.n	8021bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	689b      	ldr	r3, [r3, #8]
 8021c14:	2b01      	cmp	r3, #1
 8021c16:	d106      	bne.n	8021c26 <HAL_RCC_OscConfig+0x2ea>
 8021c18:	4b64      	ldr	r3, [pc, #400]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c1c:	4a63      	ldr	r2, [pc, #396]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c1e:	f043 0301 	orr.w	r3, r3, #1
 8021c22:	6713      	str	r3, [r2, #112]	; 0x70
 8021c24:	e01c      	b.n	8021c60 <HAL_RCC_OscConfig+0x324>
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	689b      	ldr	r3, [r3, #8]
 8021c2a:	2b05      	cmp	r3, #5
 8021c2c:	d10c      	bne.n	8021c48 <HAL_RCC_OscConfig+0x30c>
 8021c2e:	4b5f      	ldr	r3, [pc, #380]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c32:	4a5e      	ldr	r2, [pc, #376]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c34:	f043 0304 	orr.w	r3, r3, #4
 8021c38:	6713      	str	r3, [r2, #112]	; 0x70
 8021c3a:	4b5c      	ldr	r3, [pc, #368]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c3e:	4a5b      	ldr	r2, [pc, #364]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c40:	f043 0301 	orr.w	r3, r3, #1
 8021c44:	6713      	str	r3, [r2, #112]	; 0x70
 8021c46:	e00b      	b.n	8021c60 <HAL_RCC_OscConfig+0x324>
 8021c48:	4b58      	ldr	r3, [pc, #352]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c4c:	4a57      	ldr	r2, [pc, #348]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c4e:	f023 0301 	bic.w	r3, r3, #1
 8021c52:	6713      	str	r3, [r2, #112]	; 0x70
 8021c54:	4b55      	ldr	r3, [pc, #340]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c58:	4a54      	ldr	r2, [pc, #336]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c5a:	f023 0304 	bic.w	r3, r3, #4
 8021c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	689b      	ldr	r3, [r3, #8]
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	d015      	beq.n	8021c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021c68:	f7fe ffe0 	bl	8020c2c <HAL_GetTick>
 8021c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021c6e:	e00a      	b.n	8021c86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021c70:	f7fe ffdc 	bl	8020c2c <HAL_GetTick>
 8021c74:	4602      	mov	r2, r0
 8021c76:	693b      	ldr	r3, [r7, #16]
 8021c78:	1ad3      	subs	r3, r2, r3
 8021c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021c7e:	4293      	cmp	r3, r2
 8021c80:	d901      	bls.n	8021c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8021c82:	2303      	movs	r3, #3
 8021c84:	e0cb      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021c86:	4b49      	ldr	r3, [pc, #292]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c8a:	f003 0302 	and.w	r3, r3, #2
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d0ee      	beq.n	8021c70 <HAL_RCC_OscConfig+0x334>
 8021c92:	e014      	b.n	8021cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021c94:	f7fe ffca 	bl	8020c2c <HAL_GetTick>
 8021c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021c9a:	e00a      	b.n	8021cb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021c9c:	f7fe ffc6 	bl	8020c2c <HAL_GetTick>
 8021ca0:	4602      	mov	r2, r0
 8021ca2:	693b      	ldr	r3, [r7, #16]
 8021ca4:	1ad3      	subs	r3, r2, r3
 8021ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8021caa:	4293      	cmp	r3, r2
 8021cac:	d901      	bls.n	8021cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8021cae:	2303      	movs	r3, #3
 8021cb0:	e0b5      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021cb2:	4b3e      	ldr	r3, [pc, #248]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021cb6:	f003 0302 	and.w	r3, r3, #2
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d1ee      	bne.n	8021c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021cbe:	7dfb      	ldrb	r3, [r7, #23]
 8021cc0:	2b01      	cmp	r3, #1
 8021cc2:	d105      	bne.n	8021cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021cc4:	4b39      	ldr	r3, [pc, #228]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cc8:	4a38      	ldr	r2, [pc, #224]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021cd0:	687b      	ldr	r3, [r7, #4]
 8021cd2:	699b      	ldr	r3, [r3, #24]
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	f000 80a1 	beq.w	8021e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021cda:	4b34      	ldr	r3, [pc, #208]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021cdc:	689b      	ldr	r3, [r3, #8]
 8021cde:	f003 030c 	and.w	r3, r3, #12
 8021ce2:	2b08      	cmp	r3, #8
 8021ce4:	d05c      	beq.n	8021da0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	699b      	ldr	r3, [r3, #24]
 8021cea:	2b02      	cmp	r3, #2
 8021cec:	d141      	bne.n	8021d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021cee:	4b31      	ldr	r3, [pc, #196]	; (8021db4 <HAL_RCC_OscConfig+0x478>)
 8021cf0:	2200      	movs	r2, #0
 8021cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021cf4:	f7fe ff9a 	bl	8020c2c <HAL_GetTick>
 8021cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021cfa:	e008      	b.n	8021d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021cfc:	f7fe ff96 	bl	8020c2c <HAL_GetTick>
 8021d00:	4602      	mov	r2, r0
 8021d02:	693b      	ldr	r3, [r7, #16]
 8021d04:	1ad3      	subs	r3, r2, r3
 8021d06:	2b02      	cmp	r3, #2
 8021d08:	d901      	bls.n	8021d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8021d0a:	2303      	movs	r3, #3
 8021d0c:	e087      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021d0e:	4b27      	ldr	r3, [pc, #156]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d1f0      	bne.n	8021cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	69da      	ldr	r2, [r3, #28]
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	6a1b      	ldr	r3, [r3, #32]
 8021d22:	431a      	orrs	r2, r3
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d28:	019b      	lsls	r3, r3, #6
 8021d2a:	431a      	orrs	r2, r3
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d30:	085b      	lsrs	r3, r3, #1
 8021d32:	3b01      	subs	r3, #1
 8021d34:	041b      	lsls	r3, r3, #16
 8021d36:	431a      	orrs	r2, r3
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d3c:	061b      	lsls	r3, r3, #24
 8021d3e:	491b      	ldr	r1, [pc, #108]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021d40:	4313      	orrs	r3, r2
 8021d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021d44:	4b1b      	ldr	r3, [pc, #108]	; (8021db4 <HAL_RCC_OscConfig+0x478>)
 8021d46:	2201      	movs	r2, #1
 8021d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021d4a:	f7fe ff6f 	bl	8020c2c <HAL_GetTick>
 8021d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021d50:	e008      	b.n	8021d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021d52:	f7fe ff6b 	bl	8020c2c <HAL_GetTick>
 8021d56:	4602      	mov	r2, r0
 8021d58:	693b      	ldr	r3, [r7, #16]
 8021d5a:	1ad3      	subs	r3, r2, r3
 8021d5c:	2b02      	cmp	r3, #2
 8021d5e:	d901      	bls.n	8021d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8021d60:	2303      	movs	r3, #3
 8021d62:	e05c      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021d64:	4b11      	ldr	r3, [pc, #68]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d0f0      	beq.n	8021d52 <HAL_RCC_OscConfig+0x416>
 8021d70:	e054      	b.n	8021e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021d72:	4b10      	ldr	r3, [pc, #64]	; (8021db4 <HAL_RCC_OscConfig+0x478>)
 8021d74:	2200      	movs	r2, #0
 8021d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021d78:	f7fe ff58 	bl	8020c2c <HAL_GetTick>
 8021d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021d7e:	e008      	b.n	8021d92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021d80:	f7fe ff54 	bl	8020c2c <HAL_GetTick>
 8021d84:	4602      	mov	r2, r0
 8021d86:	693b      	ldr	r3, [r7, #16]
 8021d88:	1ad3      	subs	r3, r2, r3
 8021d8a:	2b02      	cmp	r3, #2
 8021d8c:	d901      	bls.n	8021d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8021d8e:	2303      	movs	r3, #3
 8021d90:	e045      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021d92:	4b06      	ldr	r3, [pc, #24]	; (8021dac <HAL_RCC_OscConfig+0x470>)
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d1f0      	bne.n	8021d80 <HAL_RCC_OscConfig+0x444>
 8021d9e:	e03d      	b.n	8021e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021da0:	687b      	ldr	r3, [r7, #4]
 8021da2:	699b      	ldr	r3, [r3, #24]
 8021da4:	2b01      	cmp	r3, #1
 8021da6:	d107      	bne.n	8021db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8021da8:	2301      	movs	r3, #1
 8021daa:	e038      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
 8021dac:	40023800 	.word	0x40023800
 8021db0:	40007000 	.word	0x40007000
 8021db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021db8:	4b1b      	ldr	r3, [pc, #108]	; (8021e28 <HAL_RCC_OscConfig+0x4ec>)
 8021dba:	685b      	ldr	r3, [r3, #4]
 8021dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	699b      	ldr	r3, [r3, #24]
 8021dc2:	2b01      	cmp	r3, #1
 8021dc4:	d028      	beq.n	8021e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021dd0:	429a      	cmp	r2, r3
 8021dd2:	d121      	bne.n	8021e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021dd4:	68fb      	ldr	r3, [r7, #12]
 8021dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021dda:	687b      	ldr	r3, [r7, #4]
 8021ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021dde:	429a      	cmp	r2, r3
 8021de0:	d11a      	bne.n	8021e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021de2:	68fa      	ldr	r2, [r7, #12]
 8021de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8021de8:	4013      	ands	r3, r2
 8021dea:	687a      	ldr	r2, [r7, #4]
 8021dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8021dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021df0:	4293      	cmp	r3, r2
 8021df2:	d111      	bne.n	8021e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021df4:	68fb      	ldr	r3, [r7, #12]
 8021df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021dfe:	085b      	lsrs	r3, r3, #1
 8021e00:	3b01      	subs	r3, #1
 8021e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021e04:	429a      	cmp	r2, r3
 8021e06:	d107      	bne.n	8021e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021e14:	429a      	cmp	r2, r3
 8021e16:	d001      	beq.n	8021e1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8021e18:	2301      	movs	r3, #1
 8021e1a:	e000      	b.n	8021e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8021e1c:	2300      	movs	r3, #0
}
 8021e1e:	4618      	mov	r0, r3
 8021e20:	3718      	adds	r7, #24
 8021e22:	46bd      	mov	sp, r7
 8021e24:	bd80      	pop	{r7, pc}
 8021e26:	bf00      	nop
 8021e28:	40023800 	.word	0x40023800

08021e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021e2c:	b580      	push	{r7, lr}
 8021e2e:	b084      	sub	sp, #16
 8021e30:	af00      	add	r7, sp, #0
 8021e32:	6078      	str	r0, [r7, #4]
 8021e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8021e36:	687b      	ldr	r3, [r7, #4]
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d101      	bne.n	8021e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8021e3c:	2301      	movs	r3, #1
 8021e3e:	e0cc      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021e40:	4b68      	ldr	r3, [pc, #416]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	f003 0307 	and.w	r3, r3, #7
 8021e48:	683a      	ldr	r2, [r7, #0]
 8021e4a:	429a      	cmp	r2, r3
 8021e4c:	d90c      	bls.n	8021e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021e4e:	4b65      	ldr	r3, [pc, #404]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021e50:	683a      	ldr	r2, [r7, #0]
 8021e52:	b2d2      	uxtb	r2, r2
 8021e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021e56:	4b63      	ldr	r3, [pc, #396]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	f003 0307 	and.w	r3, r3, #7
 8021e5e:	683a      	ldr	r2, [r7, #0]
 8021e60:	429a      	cmp	r2, r3
 8021e62:	d001      	beq.n	8021e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8021e64:	2301      	movs	r3, #1
 8021e66:	e0b8      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	f003 0302 	and.w	r3, r3, #2
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d020      	beq.n	8021eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	681b      	ldr	r3, [r3, #0]
 8021e78:	f003 0304 	and.w	r3, r3, #4
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d005      	beq.n	8021e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021e80:	4b59      	ldr	r3, [pc, #356]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021e82:	689b      	ldr	r3, [r3, #8]
 8021e84:	4a58      	ldr	r2, [pc, #352]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8021e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	f003 0308 	and.w	r3, r3, #8
 8021e94:	2b00      	cmp	r3, #0
 8021e96:	d005      	beq.n	8021ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021e98:	4b53      	ldr	r3, [pc, #332]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021e9a:	689b      	ldr	r3, [r3, #8]
 8021e9c:	4a52      	ldr	r2, [pc, #328]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8021ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021ea4:	4b50      	ldr	r3, [pc, #320]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021ea6:	689b      	ldr	r3, [r3, #8]
 8021ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	689b      	ldr	r3, [r3, #8]
 8021eb0:	494d      	ldr	r1, [pc, #308]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021eb2:	4313      	orrs	r3, r2
 8021eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	f003 0301 	and.w	r3, r3, #1
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d044      	beq.n	8021f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	685b      	ldr	r3, [r3, #4]
 8021ec6:	2b01      	cmp	r3, #1
 8021ec8:	d107      	bne.n	8021eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021eca:	4b47      	ldr	r3, [pc, #284]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d119      	bne.n	8021f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021ed6:	2301      	movs	r3, #1
 8021ed8:	e07f      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	685b      	ldr	r3, [r3, #4]
 8021ede:	2b02      	cmp	r3, #2
 8021ee0:	d003      	beq.n	8021eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021ee6:	2b03      	cmp	r3, #3
 8021ee8:	d107      	bne.n	8021efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021eea:	4b3f      	ldr	r3, [pc, #252]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d109      	bne.n	8021f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021ef6:	2301      	movs	r3, #1
 8021ef8:	e06f      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021efa:	4b3b      	ldr	r3, [pc, #236]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	f003 0302 	and.w	r3, r3, #2
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d101      	bne.n	8021f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021f06:	2301      	movs	r3, #1
 8021f08:	e067      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8021f0a:	4b37      	ldr	r3, [pc, #220]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021f0c:	689b      	ldr	r3, [r3, #8]
 8021f0e:	f023 0203 	bic.w	r2, r3, #3
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	685b      	ldr	r3, [r3, #4]
 8021f16:	4934      	ldr	r1, [pc, #208]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021f18:	4313      	orrs	r3, r2
 8021f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8021f1c:	f7fe fe86 	bl	8020c2c <HAL_GetTick>
 8021f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021f22:	e00a      	b.n	8021f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021f24:	f7fe fe82 	bl	8020c2c <HAL_GetTick>
 8021f28:	4602      	mov	r2, r0
 8021f2a:	68fb      	ldr	r3, [r7, #12]
 8021f2c:	1ad3      	subs	r3, r2, r3
 8021f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8021f32:	4293      	cmp	r3, r2
 8021f34:	d901      	bls.n	8021f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8021f36:	2303      	movs	r3, #3
 8021f38:	e04f      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021f3a:	4b2b      	ldr	r3, [pc, #172]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021f3c:	689b      	ldr	r3, [r3, #8]
 8021f3e:	f003 020c 	and.w	r2, r3, #12
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	685b      	ldr	r3, [r3, #4]
 8021f46:	009b      	lsls	r3, r3, #2
 8021f48:	429a      	cmp	r2, r3
 8021f4a:	d1eb      	bne.n	8021f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021f4c:	4b25      	ldr	r3, [pc, #148]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021f4e:	681b      	ldr	r3, [r3, #0]
 8021f50:	f003 0307 	and.w	r3, r3, #7
 8021f54:	683a      	ldr	r2, [r7, #0]
 8021f56:	429a      	cmp	r2, r3
 8021f58:	d20c      	bcs.n	8021f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021f5a:	4b22      	ldr	r3, [pc, #136]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021f5c:	683a      	ldr	r2, [r7, #0]
 8021f5e:	b2d2      	uxtb	r2, r2
 8021f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021f62:	4b20      	ldr	r3, [pc, #128]	; (8021fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8021f64:	681b      	ldr	r3, [r3, #0]
 8021f66:	f003 0307 	and.w	r3, r3, #7
 8021f6a:	683a      	ldr	r2, [r7, #0]
 8021f6c:	429a      	cmp	r2, r3
 8021f6e:	d001      	beq.n	8021f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021f70:	2301      	movs	r3, #1
 8021f72:	e032      	b.n	8021fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	f003 0304 	and.w	r3, r3, #4
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d008      	beq.n	8021f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021f80:	4b19      	ldr	r3, [pc, #100]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021f82:	689b      	ldr	r3, [r3, #8]
 8021f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	68db      	ldr	r3, [r3, #12]
 8021f8c:	4916      	ldr	r1, [pc, #88]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021f8e:	4313      	orrs	r3, r2
 8021f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	f003 0308 	and.w	r3, r3, #8
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d009      	beq.n	8021fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021f9e:	4b12      	ldr	r3, [pc, #72]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021fa0:	689b      	ldr	r3, [r3, #8]
 8021fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	691b      	ldr	r3, [r3, #16]
 8021faa:	00db      	lsls	r3, r3, #3
 8021fac:	490e      	ldr	r1, [pc, #56]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021fae:	4313      	orrs	r3, r2
 8021fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8021fb2:	f000 f821 	bl	8021ff8 <HAL_RCC_GetSysClockFreq>
 8021fb6:	4602      	mov	r2, r0
 8021fb8:	4b0b      	ldr	r3, [pc, #44]	; (8021fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8021fba:	689b      	ldr	r3, [r3, #8]
 8021fbc:	091b      	lsrs	r3, r3, #4
 8021fbe:	f003 030f 	and.w	r3, r3, #15
 8021fc2:	490a      	ldr	r1, [pc, #40]	; (8021fec <HAL_RCC_ClockConfig+0x1c0>)
 8021fc4:	5ccb      	ldrb	r3, [r1, r3]
 8021fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8021fca:	4a09      	ldr	r2, [pc, #36]	; (8021ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8021fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8021fce:	4b09      	ldr	r3, [pc, #36]	; (8021ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	4618      	mov	r0, r3
 8021fd4:	f7fe fde6 	bl	8020ba4 <HAL_InitTick>

  return HAL_OK;
 8021fd8:	2300      	movs	r3, #0
}
 8021fda:	4618      	mov	r0, r3
 8021fdc:	3710      	adds	r7, #16
 8021fde:	46bd      	mov	sp, r7
 8021fe0:	bd80      	pop	{r7, pc}
 8021fe2:	bf00      	nop
 8021fe4:	40023c00 	.word	0x40023c00
 8021fe8:	40023800 	.word	0x40023800
 8021fec:	08023158 	.word	0x08023158
 8021ff0:	20000000 	.word	0x20000000
 8021ff4:	20000004 	.word	0x20000004

08021ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021ffc:	b090      	sub	sp, #64	; 0x40
 8021ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8022000:	2300      	movs	r3, #0
 8022002:	637b      	str	r3, [r7, #52]	; 0x34
 8022004:	2300      	movs	r3, #0
 8022006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022008:	2300      	movs	r3, #0
 802200a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802200c:	2300      	movs	r3, #0
 802200e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022010:	4b59      	ldr	r3, [pc, #356]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 8022012:	689b      	ldr	r3, [r3, #8]
 8022014:	f003 030c 	and.w	r3, r3, #12
 8022018:	2b08      	cmp	r3, #8
 802201a:	d00d      	beq.n	8022038 <HAL_RCC_GetSysClockFreq+0x40>
 802201c:	2b08      	cmp	r3, #8
 802201e:	f200 80a1 	bhi.w	8022164 <HAL_RCC_GetSysClockFreq+0x16c>
 8022022:	2b00      	cmp	r3, #0
 8022024:	d002      	beq.n	802202c <HAL_RCC_GetSysClockFreq+0x34>
 8022026:	2b04      	cmp	r3, #4
 8022028:	d003      	beq.n	8022032 <HAL_RCC_GetSysClockFreq+0x3a>
 802202a:	e09b      	b.n	8022164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802202c:	4b53      	ldr	r3, [pc, #332]	; (802217c <HAL_RCC_GetSysClockFreq+0x184>)
 802202e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8022030:	e09b      	b.n	802216a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8022032:	4b53      	ldr	r3, [pc, #332]	; (8022180 <HAL_RCC_GetSysClockFreq+0x188>)
 8022034:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022036:	e098      	b.n	802216a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022038:	4b4f      	ldr	r3, [pc, #316]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 802203a:	685b      	ldr	r3, [r3, #4]
 802203c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022040:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8022042:	4b4d      	ldr	r3, [pc, #308]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 8022044:	685b      	ldr	r3, [r3, #4]
 8022046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802204a:	2b00      	cmp	r3, #0
 802204c:	d028      	beq.n	80220a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802204e:	4b4a      	ldr	r3, [pc, #296]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 8022050:	685b      	ldr	r3, [r3, #4]
 8022052:	099b      	lsrs	r3, r3, #6
 8022054:	2200      	movs	r2, #0
 8022056:	623b      	str	r3, [r7, #32]
 8022058:	627a      	str	r2, [r7, #36]	; 0x24
 802205a:	6a3b      	ldr	r3, [r7, #32]
 802205c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8022060:	2100      	movs	r1, #0
 8022062:	4b47      	ldr	r3, [pc, #284]	; (8022180 <HAL_RCC_GetSysClockFreq+0x188>)
 8022064:	fb03 f201 	mul.w	r2, r3, r1
 8022068:	2300      	movs	r3, #0
 802206a:	fb00 f303 	mul.w	r3, r0, r3
 802206e:	4413      	add	r3, r2
 8022070:	4a43      	ldr	r2, [pc, #268]	; (8022180 <HAL_RCC_GetSysClockFreq+0x188>)
 8022072:	fba0 1202 	umull	r1, r2, r0, r2
 8022076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022078:	460a      	mov	r2, r1
 802207a:	62ba      	str	r2, [r7, #40]	; 0x28
 802207c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802207e:	4413      	add	r3, r2
 8022080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022084:	2200      	movs	r2, #0
 8022086:	61bb      	str	r3, [r7, #24]
 8022088:	61fa      	str	r2, [r7, #28]
 802208a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802208e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8022092:	f7fe f8a3 	bl	80201dc <__aeabi_uldivmod>
 8022096:	4602      	mov	r2, r0
 8022098:	460b      	mov	r3, r1
 802209a:	4613      	mov	r3, r2
 802209c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802209e:	e053      	b.n	8022148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80220a0:	4b35      	ldr	r3, [pc, #212]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 80220a2:	685b      	ldr	r3, [r3, #4]
 80220a4:	099b      	lsrs	r3, r3, #6
 80220a6:	2200      	movs	r2, #0
 80220a8:	613b      	str	r3, [r7, #16]
 80220aa:	617a      	str	r2, [r7, #20]
 80220ac:	693b      	ldr	r3, [r7, #16]
 80220ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80220b2:	f04f 0b00 	mov.w	fp, #0
 80220b6:	4652      	mov	r2, sl
 80220b8:	465b      	mov	r3, fp
 80220ba:	f04f 0000 	mov.w	r0, #0
 80220be:	f04f 0100 	mov.w	r1, #0
 80220c2:	0159      	lsls	r1, r3, #5
 80220c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80220c8:	0150      	lsls	r0, r2, #5
 80220ca:	4602      	mov	r2, r0
 80220cc:	460b      	mov	r3, r1
 80220ce:	ebb2 080a 	subs.w	r8, r2, sl
 80220d2:	eb63 090b 	sbc.w	r9, r3, fp
 80220d6:	f04f 0200 	mov.w	r2, #0
 80220da:	f04f 0300 	mov.w	r3, #0
 80220de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80220e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80220e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80220ea:	ebb2 0408 	subs.w	r4, r2, r8
 80220ee:	eb63 0509 	sbc.w	r5, r3, r9
 80220f2:	f04f 0200 	mov.w	r2, #0
 80220f6:	f04f 0300 	mov.w	r3, #0
 80220fa:	00eb      	lsls	r3, r5, #3
 80220fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022100:	00e2      	lsls	r2, r4, #3
 8022102:	4614      	mov	r4, r2
 8022104:	461d      	mov	r5, r3
 8022106:	eb14 030a 	adds.w	r3, r4, sl
 802210a:	603b      	str	r3, [r7, #0]
 802210c:	eb45 030b 	adc.w	r3, r5, fp
 8022110:	607b      	str	r3, [r7, #4]
 8022112:	f04f 0200 	mov.w	r2, #0
 8022116:	f04f 0300 	mov.w	r3, #0
 802211a:	e9d7 4500 	ldrd	r4, r5, [r7]
 802211e:	4629      	mov	r1, r5
 8022120:	028b      	lsls	r3, r1, #10
 8022122:	4621      	mov	r1, r4
 8022124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8022128:	4621      	mov	r1, r4
 802212a:	028a      	lsls	r2, r1, #10
 802212c:	4610      	mov	r0, r2
 802212e:	4619      	mov	r1, r3
 8022130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022132:	2200      	movs	r2, #0
 8022134:	60bb      	str	r3, [r7, #8]
 8022136:	60fa      	str	r2, [r7, #12]
 8022138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802213c:	f7fe f84e 	bl	80201dc <__aeabi_uldivmod>
 8022140:	4602      	mov	r2, r0
 8022142:	460b      	mov	r3, r1
 8022144:	4613      	mov	r3, r2
 8022146:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8022148:	4b0b      	ldr	r3, [pc, #44]	; (8022178 <HAL_RCC_GetSysClockFreq+0x180>)
 802214a:	685b      	ldr	r3, [r3, #4]
 802214c:	0c1b      	lsrs	r3, r3, #16
 802214e:	f003 0303 	and.w	r3, r3, #3
 8022152:	3301      	adds	r3, #1
 8022154:	005b      	lsls	r3, r3, #1
 8022156:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8022158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8022160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022162:	e002      	b.n	802216a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022164:	4b05      	ldr	r3, [pc, #20]	; (802217c <HAL_RCC_GetSysClockFreq+0x184>)
 8022166:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8022168:	bf00      	nop
    }
  }
  return sysclockfreq;
 802216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802216c:	4618      	mov	r0, r3
 802216e:	3740      	adds	r7, #64	; 0x40
 8022170:	46bd      	mov	sp, r7
 8022172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022176:	bf00      	nop
 8022178:	40023800 	.word	0x40023800
 802217c:	00f42400 	.word	0x00f42400
 8022180:	017d7840 	.word	0x017d7840

08022184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022184:	b480      	push	{r7}
 8022186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022188:	4b03      	ldr	r3, [pc, #12]	; (8022198 <HAL_RCC_GetHCLKFreq+0x14>)
 802218a:	681b      	ldr	r3, [r3, #0]
}
 802218c:	4618      	mov	r0, r3
 802218e:	46bd      	mov	sp, r7
 8022190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022194:	4770      	bx	lr
 8022196:	bf00      	nop
 8022198:	20000000 	.word	0x20000000

0802219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802219c:	b580      	push	{r7, lr}
 802219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80221a0:	f7ff fff0 	bl	8022184 <HAL_RCC_GetHCLKFreq>
 80221a4:	4602      	mov	r2, r0
 80221a6:	4b05      	ldr	r3, [pc, #20]	; (80221bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80221a8:	689b      	ldr	r3, [r3, #8]
 80221aa:	0a9b      	lsrs	r3, r3, #10
 80221ac:	f003 0307 	and.w	r3, r3, #7
 80221b0:	4903      	ldr	r1, [pc, #12]	; (80221c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80221b2:	5ccb      	ldrb	r3, [r1, r3]
 80221b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80221b8:	4618      	mov	r0, r3
 80221ba:	bd80      	pop	{r7, pc}
 80221bc:	40023800 	.word	0x40023800
 80221c0:	08023168 	.word	0x08023168

080221c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80221c4:	b580      	push	{r7, lr}
 80221c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80221c8:	f7ff ffdc 	bl	8022184 <HAL_RCC_GetHCLKFreq>
 80221cc:	4602      	mov	r2, r0
 80221ce:	4b05      	ldr	r3, [pc, #20]	; (80221e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80221d0:	689b      	ldr	r3, [r3, #8]
 80221d2:	0b5b      	lsrs	r3, r3, #13
 80221d4:	f003 0307 	and.w	r3, r3, #7
 80221d8:	4903      	ldr	r1, [pc, #12]	; (80221e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80221da:	5ccb      	ldrb	r3, [r1, r3]
 80221dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80221e0:	4618      	mov	r0, r3
 80221e2:	bd80      	pop	{r7, pc}
 80221e4:	40023800 	.word	0x40023800
 80221e8:	08023168 	.word	0x08023168

080221ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b082      	sub	sp, #8
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d101      	bne.n	80221fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80221fa:	2301      	movs	r3, #1
 80221fc:	e03f      	b.n	802227e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022204:	b2db      	uxtb	r3, r3
 8022206:	2b00      	cmp	r3, #0
 8022208:	d106      	bne.n	8022218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	2200      	movs	r2, #0
 802220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022212:	6878      	ldr	r0, [r7, #4]
 8022214:	f7fe fbe0 	bl	80209d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	2224      	movs	r2, #36	; 0x24
 802221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022220:	687b      	ldr	r3, [r7, #4]
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	68da      	ldr	r2, [r3, #12]
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	681b      	ldr	r3, [r3, #0]
 802222a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802222e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022230:	6878      	ldr	r0, [r7, #4]
 8022232:	f000 fcdf 	bl	8022bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022236:	687b      	ldr	r3, [r7, #4]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	691a      	ldr	r2, [r3, #16]
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	695a      	ldr	r2, [r3, #20]
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	68da      	ldr	r2, [r3, #12]
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	2200      	movs	r2, #0
 802226a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	2220      	movs	r2, #32
 8022270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	2220      	movs	r2, #32
 8022278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802227c:	2300      	movs	r3, #0
}
 802227e:	4618      	mov	r0, r3
 8022280:	3708      	adds	r7, #8
 8022282:	46bd      	mov	sp, r7
 8022284:	bd80      	pop	{r7, pc}

08022286 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022286:	b580      	push	{r7, lr}
 8022288:	b084      	sub	sp, #16
 802228a:	af00      	add	r7, sp, #0
 802228c:	60f8      	str	r0, [r7, #12]
 802228e:	60b9      	str	r1, [r7, #8]
 8022290:	4613      	mov	r3, r2
 8022292:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022294:	68fb      	ldr	r3, [r7, #12]
 8022296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802229a:	b2db      	uxtb	r3, r3
 802229c:	2b20      	cmp	r3, #32
 802229e:	d11d      	bne.n	80222dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80222a0:	68bb      	ldr	r3, [r7, #8]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d002      	beq.n	80222ac <HAL_UART_Receive_IT+0x26>
 80222a6:	88fb      	ldrh	r3, [r7, #6]
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d101      	bne.n	80222b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80222ac:	2301      	movs	r3, #1
 80222ae:	e016      	b.n	80222de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80222b0:	68fb      	ldr	r3, [r7, #12]
 80222b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80222b6:	2b01      	cmp	r3, #1
 80222b8:	d101      	bne.n	80222be <HAL_UART_Receive_IT+0x38>
 80222ba:	2302      	movs	r3, #2
 80222bc:	e00f      	b.n	80222de <HAL_UART_Receive_IT+0x58>
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	2201      	movs	r2, #1
 80222c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	2200      	movs	r2, #0
 80222ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80222cc:	88fb      	ldrh	r3, [r7, #6]
 80222ce:	461a      	mov	r2, r3
 80222d0:	68b9      	ldr	r1, [r7, #8]
 80222d2:	68f8      	ldr	r0, [r7, #12]
 80222d4:	f000 fab6 	bl	8022844 <UART_Start_Receive_IT>
 80222d8:	4603      	mov	r3, r0
 80222da:	e000      	b.n	80222de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80222dc:	2302      	movs	r3, #2
  }
}
 80222de:	4618      	mov	r0, r3
 80222e0:	3710      	adds	r7, #16
 80222e2:	46bd      	mov	sp, r7
 80222e4:	bd80      	pop	{r7, pc}
	...

080222e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80222e8:	b580      	push	{r7, lr}
 80222ea:	b0ba      	sub	sp, #232	; 0xe8
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	681b      	ldr	r3, [r3, #0]
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80222fa:	687b      	ldr	r3, [r7, #4]
 80222fc:	681b      	ldr	r3, [r3, #0]
 80222fe:	68db      	ldr	r3, [r3, #12]
 8022300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	695b      	ldr	r3, [r3, #20]
 802230a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802230e:	2300      	movs	r3, #0
 8022310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8022314:	2300      	movs	r3, #0
 8022316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802231e:	f003 030f 	and.w	r3, r3, #15
 8022322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8022326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802232a:	2b00      	cmp	r3, #0
 802232c:	d10f      	bne.n	802234e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802232e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022332:	f003 0320 	and.w	r3, r3, #32
 8022336:	2b00      	cmp	r3, #0
 8022338:	d009      	beq.n	802234e <HAL_UART_IRQHandler+0x66>
 802233a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802233e:	f003 0320 	and.w	r3, r3, #32
 8022342:	2b00      	cmp	r3, #0
 8022344:	d003      	beq.n	802234e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8022346:	6878      	ldr	r0, [r7, #4]
 8022348:	f000 fb99 	bl	8022a7e <UART_Receive_IT>
      return;
 802234c:	e256      	b.n	80227fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802234e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8022352:	2b00      	cmp	r3, #0
 8022354:	f000 80de 	beq.w	8022514 <HAL_UART_IRQHandler+0x22c>
 8022358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802235c:	f003 0301 	and.w	r3, r3, #1
 8022360:	2b00      	cmp	r3, #0
 8022362:	d106      	bne.n	8022372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8022364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022368:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802236c:	2b00      	cmp	r3, #0
 802236e:	f000 80d1 	beq.w	8022514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022376:	f003 0301 	and.w	r3, r3, #1
 802237a:	2b00      	cmp	r3, #0
 802237c:	d00b      	beq.n	8022396 <HAL_UART_IRQHandler+0xae>
 802237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022386:	2b00      	cmp	r3, #0
 8022388:	d005      	beq.n	8022396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802238e:	f043 0201 	orr.w	r2, r3, #1
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8022396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802239a:	f003 0304 	and.w	r3, r3, #4
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d00b      	beq.n	80223ba <HAL_UART_IRQHandler+0xd2>
 80223a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80223a6:	f003 0301 	and.w	r3, r3, #1
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d005      	beq.n	80223ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223b2:	f043 0202 	orr.w	r2, r3, #2
 80223b6:	687b      	ldr	r3, [r7, #4]
 80223b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80223ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80223be:	f003 0302 	and.w	r3, r3, #2
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d00b      	beq.n	80223de <HAL_UART_IRQHandler+0xf6>
 80223c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80223ca:	f003 0301 	and.w	r3, r3, #1
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d005      	beq.n	80223de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223d6:	f043 0204 	orr.w	r2, r3, #4
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80223de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80223e2:	f003 0308 	and.w	r3, r3, #8
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d011      	beq.n	802240e <HAL_UART_IRQHandler+0x126>
 80223ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80223ee:	f003 0320 	and.w	r3, r3, #32
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	d105      	bne.n	8022402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80223f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80223fa:	f003 0301 	and.w	r3, r3, #1
 80223fe:	2b00      	cmp	r3, #0
 8022400:	d005      	beq.n	802240e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022406:	f043 0208 	orr.w	r2, r3, #8
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022412:	2b00      	cmp	r3, #0
 8022414:	f000 81ed 	beq.w	80227f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802241c:	f003 0320 	and.w	r3, r3, #32
 8022420:	2b00      	cmp	r3, #0
 8022422:	d008      	beq.n	8022436 <HAL_UART_IRQHandler+0x14e>
 8022424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022428:	f003 0320 	and.w	r3, r3, #32
 802242c:	2b00      	cmp	r3, #0
 802242e:	d002      	beq.n	8022436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8022430:	6878      	ldr	r0, [r7, #4]
 8022432:	f000 fb24 	bl	8022a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	695b      	ldr	r3, [r3, #20]
 802243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022440:	2b40      	cmp	r3, #64	; 0x40
 8022442:	bf0c      	ite	eq
 8022444:	2301      	moveq	r3, #1
 8022446:	2300      	movne	r3, #0
 8022448:	b2db      	uxtb	r3, r3
 802244a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022452:	f003 0308 	and.w	r3, r3, #8
 8022456:	2b00      	cmp	r3, #0
 8022458:	d103      	bne.n	8022462 <HAL_UART_IRQHandler+0x17a>
 802245a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802245e:	2b00      	cmp	r3, #0
 8022460:	d04f      	beq.n	8022502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8022462:	6878      	ldr	r0, [r7, #4]
 8022464:	f000 fa2c 	bl	80228c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	695b      	ldr	r3, [r3, #20]
 802246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022472:	2b40      	cmp	r3, #64	; 0x40
 8022474:	d141      	bne.n	80224fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	3314      	adds	r3, #20
 802247c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8022484:	e853 3f00 	ldrex	r3, [r3]
 8022488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	681b      	ldr	r3, [r3, #0]
 802249c:	3314      	adds	r3, #20
 802249e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80224a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80224a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80224aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80224ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80224b2:	e841 2300 	strex	r3, r2, [r1]
 80224b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80224ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d1d9      	bne.n	8022476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	d013      	beq.n	80224f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224ce:	4a7d      	ldr	r2, [pc, #500]	; (80226c4 <HAL_UART_IRQHandler+0x3dc>)
 80224d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80224d2:	687b      	ldr	r3, [r7, #4]
 80224d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7fe fd59 	bl	8020f8e <HAL_DMA_Abort_IT>
 80224dc:	4603      	mov	r3, r0
 80224de:	2b00      	cmp	r3, #0
 80224e0:	d016      	beq.n	8022510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80224e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80224e8:	687a      	ldr	r2, [r7, #4]
 80224ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80224ec:	4610      	mov	r0, r2
 80224ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224f0:	e00e      	b.n	8022510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80224f2:	6878      	ldr	r0, [r7, #4]
 80224f4:	f000 f990 	bl	8022818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224f8:	e00a      	b.n	8022510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80224fa:	6878      	ldr	r0, [r7, #4]
 80224fc:	f000 f98c 	bl	8022818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022500:	e006      	b.n	8022510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8022502:	6878      	ldr	r0, [r7, #4]
 8022504:	f000 f988 	bl	8022818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	2200      	movs	r2, #0
 802250c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802250e:	e170      	b.n	80227f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022510:	bf00      	nop
    return;
 8022512:	e16e      	b.n	80227f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022518:	2b01      	cmp	r3, #1
 802251a:	f040 814a 	bne.w	80227b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022522:	f003 0310 	and.w	r3, r3, #16
 8022526:	2b00      	cmp	r3, #0
 8022528:	f000 8143 	beq.w	80227b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802252c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022530:	f003 0310 	and.w	r3, r3, #16
 8022534:	2b00      	cmp	r3, #0
 8022536:	f000 813c 	beq.w	80227b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802253a:	2300      	movs	r3, #0
 802253c:	60bb      	str	r3, [r7, #8]
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	681b      	ldr	r3, [r3, #0]
 8022544:	60bb      	str	r3, [r7, #8]
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	685b      	ldr	r3, [r3, #4]
 802254c:	60bb      	str	r3, [r7, #8]
 802254e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	695b      	ldr	r3, [r3, #20]
 8022556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802255a:	2b40      	cmp	r3, #64	; 0x40
 802255c:	f040 80b4 	bne.w	80226c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	685b      	ldr	r3, [r3, #4]
 8022568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802256c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8022570:	2b00      	cmp	r3, #0
 8022572:	f000 8140 	beq.w	80227f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802257a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802257e:	429a      	cmp	r2, r3
 8022580:	f080 8139 	bcs.w	80227f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802258a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022590:	69db      	ldr	r3, [r3, #28]
 8022592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022596:	f000 8088 	beq.w	80226aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	330c      	adds	r3, #12
 80225a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80225a8:	e853 3f00 	ldrex	r3, [r3]
 80225ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80225b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80225b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80225b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	681b      	ldr	r3, [r3, #0]
 80225c0:	330c      	adds	r3, #12
 80225c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80225c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80225ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80225ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80225d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80225d6:	e841 2300 	strex	r3, r2, [r1]
 80225da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80225de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d1d9      	bne.n	802259a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	3314      	adds	r3, #20
 80225ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80225f0:	e853 3f00 	ldrex	r3, [r3]
 80225f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80225f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80225f8:	f023 0301 	bic.w	r3, r3, #1
 80225fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	3314      	adds	r3, #20
 8022606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802260a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802260e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8022612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022616:	e841 2300 	strex	r3, r2, [r1]
 802261a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802261c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802261e:	2b00      	cmp	r3, #0
 8022620:	d1e1      	bne.n	80225e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	3314      	adds	r3, #20
 8022628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802262c:	e853 3f00 	ldrex	r3, [r3]
 8022630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	3314      	adds	r3, #20
 8022642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8022646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802264a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802264c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802264e:	e841 2300 	strex	r3, r2, [r1]
 8022652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8022654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022656:	2b00      	cmp	r3, #0
 8022658:	d1e3      	bne.n	8022622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	2220      	movs	r2, #32
 802265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	2200      	movs	r2, #0
 8022666:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	330c      	adds	r3, #12
 802266e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022672:	e853 3f00 	ldrex	r3, [r3]
 8022676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8022678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802267a:	f023 0310 	bic.w	r3, r3, #16
 802267e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	330c      	adds	r3, #12
 8022688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802268c:	65ba      	str	r2, [r7, #88]	; 0x58
 802268e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022694:	e841 2300 	strex	r3, r2, [r1]
 8022698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802269c:	2b00      	cmp	r3, #0
 802269e:	d1e3      	bne.n	8022668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226a4:	4618      	mov	r0, r3
 80226a6:	f7fe fc02 	bl	8020eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80226ae:	687b      	ldr	r3, [r7, #4]
 80226b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80226b2:	b29b      	uxth	r3, r3
 80226b4:	1ad3      	subs	r3, r2, r3
 80226b6:	b29b      	uxth	r3, r3
 80226b8:	4619      	mov	r1, r3
 80226ba:	6878      	ldr	r0, [r7, #4]
 80226bc:	f000 f8b6 	bl	802282c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80226c0:	e099      	b.n	80227f6 <HAL_UART_IRQHandler+0x50e>
 80226c2:	bf00      	nop
 80226c4:	08022987 	.word	0x08022987
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80226d0:	b29b      	uxth	r3, r3
 80226d2:	1ad3      	subs	r3, r2, r3
 80226d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80226dc:	b29b      	uxth	r3, r3
 80226de:	2b00      	cmp	r3, #0
 80226e0:	f000 808b 	beq.w	80227fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80226e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	f000 8086 	beq.w	80227fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80226ee:	687b      	ldr	r3, [r7, #4]
 80226f0:	681b      	ldr	r3, [r3, #0]
 80226f2:	330c      	adds	r3, #12
 80226f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226f8:	e853 3f00 	ldrex	r3, [r3]
 80226fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80226fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	681b      	ldr	r3, [r3, #0]
 802270c:	330c      	adds	r3, #12
 802270e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8022712:	647a      	str	r2, [r7, #68]	; 0x44
 8022714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802271a:	e841 2300 	strex	r3, r2, [r1]
 802271e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022722:	2b00      	cmp	r3, #0
 8022724:	d1e3      	bne.n	80226ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	3314      	adds	r3, #20
 802272c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022730:	e853 3f00 	ldrex	r3, [r3]
 8022734:	623b      	str	r3, [r7, #32]
   return(result);
 8022736:	6a3b      	ldr	r3, [r7, #32]
 8022738:	f023 0301 	bic.w	r3, r3, #1
 802273c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	3314      	adds	r3, #20
 8022746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802274a:	633a      	str	r2, [r7, #48]	; 0x30
 802274c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802274e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022752:	e841 2300 	strex	r3, r2, [r1]
 8022756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8022758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802275a:	2b00      	cmp	r3, #0
 802275c:	d1e3      	bne.n	8022726 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	2220      	movs	r2, #32
 8022762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	2200      	movs	r2, #0
 802276a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	681b      	ldr	r3, [r3, #0]
 8022770:	330c      	adds	r3, #12
 8022772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022774:	693b      	ldr	r3, [r7, #16]
 8022776:	e853 3f00 	ldrex	r3, [r3]
 802277a:	60fb      	str	r3, [r7, #12]
   return(result);
 802277c:	68fb      	ldr	r3, [r7, #12]
 802277e:	f023 0310 	bic.w	r3, r3, #16
 8022782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	330c      	adds	r3, #12
 802278c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8022790:	61fa      	str	r2, [r7, #28]
 8022792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022794:	69b9      	ldr	r1, [r7, #24]
 8022796:	69fa      	ldr	r2, [r7, #28]
 8022798:	e841 2300 	strex	r3, r2, [r1]
 802279c:	617b      	str	r3, [r7, #20]
   return(result);
 802279e:	697b      	ldr	r3, [r7, #20]
 80227a0:	2b00      	cmp	r3, #0
 80227a2:	d1e3      	bne.n	802276c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80227a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80227a8:	4619      	mov	r1, r3
 80227aa:	6878      	ldr	r0, [r7, #4]
 80227ac:	f000 f83e 	bl	802282c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80227b0:	e023      	b.n	80227fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80227b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80227b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d009      	beq.n	80227d2 <HAL_UART_IRQHandler+0x4ea>
 80227be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80227c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227c6:	2b00      	cmp	r3, #0
 80227c8:	d003      	beq.n	80227d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80227ca:	6878      	ldr	r0, [r7, #4]
 80227cc:	f000 f8ef 	bl	80229ae <UART_Transmit_IT>
    return;
 80227d0:	e014      	b.n	80227fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80227d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80227d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d00e      	beq.n	80227fc <HAL_UART_IRQHandler+0x514>
 80227de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80227e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80227e6:	2b00      	cmp	r3, #0
 80227e8:	d008      	beq.n	80227fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80227ea:	6878      	ldr	r0, [r7, #4]
 80227ec:	f000 f92f 	bl	8022a4e <UART_EndTransmit_IT>
    return;
 80227f0:	e004      	b.n	80227fc <HAL_UART_IRQHandler+0x514>
    return;
 80227f2:	bf00      	nop
 80227f4:	e002      	b.n	80227fc <HAL_UART_IRQHandler+0x514>
      return;
 80227f6:	bf00      	nop
 80227f8:	e000      	b.n	80227fc <HAL_UART_IRQHandler+0x514>
      return;
 80227fa:	bf00      	nop
  }
}
 80227fc:	37e8      	adds	r7, #232	; 0xe8
 80227fe:	46bd      	mov	sp, r7
 8022800:	bd80      	pop	{r7, pc}
 8022802:	bf00      	nop

08022804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8022804:	b480      	push	{r7}
 8022806:	b083      	sub	sp, #12
 8022808:	af00      	add	r7, sp, #0
 802280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802280c:	bf00      	nop
 802280e:	370c      	adds	r7, #12
 8022810:	46bd      	mov	sp, r7
 8022812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022816:	4770      	bx	lr

08022818 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8022818:	b480      	push	{r7}
 802281a:	b083      	sub	sp, #12
 802281c:	af00      	add	r7, sp, #0
 802281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022820:	bf00      	nop
 8022822:	370c      	adds	r7, #12
 8022824:	46bd      	mov	sp, r7
 8022826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802282a:	4770      	bx	lr

0802282c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802282c:	b480      	push	{r7}
 802282e:	b083      	sub	sp, #12
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
 8022834:	460b      	mov	r3, r1
 8022836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022838:	bf00      	nop
 802283a:	370c      	adds	r7, #12
 802283c:	46bd      	mov	sp, r7
 802283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022842:	4770      	bx	lr

08022844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022844:	b480      	push	{r7}
 8022846:	b085      	sub	sp, #20
 8022848:	af00      	add	r7, sp, #0
 802284a:	60f8      	str	r0, [r7, #12]
 802284c:	60b9      	str	r1, [r7, #8]
 802284e:	4613      	mov	r3, r2
 8022850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8022852:	68fb      	ldr	r3, [r7, #12]
 8022854:	68ba      	ldr	r2, [r7, #8]
 8022856:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	88fa      	ldrh	r2, [r7, #6]
 802285c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 802285e:	68fb      	ldr	r3, [r7, #12]
 8022860:	88fa      	ldrh	r2, [r7, #6]
 8022862:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022864:	68fb      	ldr	r3, [r7, #12]
 8022866:	2200      	movs	r2, #0
 8022868:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802286a:	68fb      	ldr	r3, [r7, #12]
 802286c:	2222      	movs	r2, #34	; 0x22
 802286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	2200      	movs	r2, #0
 8022876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802287a:	68fb      	ldr	r3, [r7, #12]
 802287c:	691b      	ldr	r3, [r3, #16]
 802287e:	2b00      	cmp	r3, #0
 8022880:	d007      	beq.n	8022892 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	681b      	ldr	r3, [r3, #0]
 8022886:	68da      	ldr	r2, [r3, #12]
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	681b      	ldr	r3, [r3, #0]
 802288c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022890:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	695a      	ldr	r2, [r3, #20]
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	f042 0201 	orr.w	r2, r2, #1
 80228a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	68da      	ldr	r2, [r3, #12]
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	f042 0220 	orr.w	r2, r2, #32
 80228b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80228b2:	2300      	movs	r3, #0
}
 80228b4:	4618      	mov	r0, r3
 80228b6:	3714      	adds	r7, #20
 80228b8:	46bd      	mov	sp, r7
 80228ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228be:	4770      	bx	lr

080228c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80228c0:	b480      	push	{r7}
 80228c2:	b095      	sub	sp, #84	; 0x54
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	681b      	ldr	r3, [r3, #0]
 80228cc:	330c      	adds	r3, #12
 80228ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80228d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80228d2:	e853 3f00 	ldrex	r3, [r3]
 80228d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80228d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80228da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80228de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	681b      	ldr	r3, [r3, #0]
 80228e4:	330c      	adds	r3, #12
 80228e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80228e8:	643a      	str	r2, [r7, #64]	; 0x40
 80228ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80228ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80228ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80228f0:	e841 2300 	strex	r3, r2, [r1]
 80228f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80228f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d1e5      	bne.n	80228c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	681b      	ldr	r3, [r3, #0]
 8022900:	3314      	adds	r3, #20
 8022902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022904:	6a3b      	ldr	r3, [r7, #32]
 8022906:	e853 3f00 	ldrex	r3, [r3]
 802290a:	61fb      	str	r3, [r7, #28]
   return(result);
 802290c:	69fb      	ldr	r3, [r7, #28]
 802290e:	f023 0301 	bic.w	r3, r3, #1
 8022912:	64bb      	str	r3, [r7, #72]	; 0x48
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	681b      	ldr	r3, [r3, #0]
 8022918:	3314      	adds	r3, #20
 802291a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802291c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802291e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022924:	e841 2300 	strex	r3, r2, [r1]
 8022928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802292c:	2b00      	cmp	r3, #0
 802292e:	d1e5      	bne.n	80228fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022934:	2b01      	cmp	r3, #1
 8022936:	d119      	bne.n	802296c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	330c      	adds	r3, #12
 802293e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	e853 3f00 	ldrex	r3, [r3]
 8022946:	60bb      	str	r3, [r7, #8]
   return(result);
 8022948:	68bb      	ldr	r3, [r7, #8]
 802294a:	f023 0310 	bic.w	r3, r3, #16
 802294e:	647b      	str	r3, [r7, #68]	; 0x44
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	681b      	ldr	r3, [r3, #0]
 8022954:	330c      	adds	r3, #12
 8022956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022958:	61ba      	str	r2, [r7, #24]
 802295a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802295c:	6979      	ldr	r1, [r7, #20]
 802295e:	69ba      	ldr	r2, [r7, #24]
 8022960:	e841 2300 	strex	r3, r2, [r1]
 8022964:	613b      	str	r3, [r7, #16]
   return(result);
 8022966:	693b      	ldr	r3, [r7, #16]
 8022968:	2b00      	cmp	r3, #0
 802296a:	d1e5      	bne.n	8022938 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	2220      	movs	r2, #32
 8022970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2200      	movs	r2, #0
 8022978:	631a      	str	r2, [r3, #48]	; 0x30
}
 802297a:	bf00      	nop
 802297c:	3754      	adds	r7, #84	; 0x54
 802297e:	46bd      	mov	sp, r7
 8022980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022984:	4770      	bx	lr

08022986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022986:	b580      	push	{r7, lr}
 8022988:	b084      	sub	sp, #16
 802298a:	af00      	add	r7, sp, #0
 802298c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8022994:	68fb      	ldr	r3, [r7, #12]
 8022996:	2200      	movs	r2, #0
 8022998:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802299a:	68fb      	ldr	r3, [r7, #12]
 802299c:	2200      	movs	r2, #0
 802299e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80229a0:	68f8      	ldr	r0, [r7, #12]
 80229a2:	f7ff ff39 	bl	8022818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80229a6:	bf00      	nop
 80229a8:	3710      	adds	r7, #16
 80229aa:	46bd      	mov	sp, r7
 80229ac:	bd80      	pop	{r7, pc}

080229ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80229ae:	b480      	push	{r7}
 80229b0:	b085      	sub	sp, #20
 80229b2:	af00      	add	r7, sp, #0
 80229b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80229bc:	b2db      	uxtb	r3, r3
 80229be:	2b21      	cmp	r3, #33	; 0x21
 80229c0:	d13e      	bne.n	8022a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	689b      	ldr	r3, [r3, #8]
 80229c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80229ca:	d114      	bne.n	80229f6 <UART_Transmit_IT+0x48>
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	691b      	ldr	r3, [r3, #16]
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d110      	bne.n	80229f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	6a1b      	ldr	r3, [r3, #32]
 80229d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	881b      	ldrh	r3, [r3, #0]
 80229de:	461a      	mov	r2, r3
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80229e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	6a1b      	ldr	r3, [r3, #32]
 80229ee:	1c9a      	adds	r2, r3, #2
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	621a      	str	r2, [r3, #32]
 80229f4:	e008      	b.n	8022a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	6a1b      	ldr	r3, [r3, #32]
 80229fa:	1c59      	adds	r1, r3, #1
 80229fc:	687a      	ldr	r2, [r7, #4]
 80229fe:	6211      	str	r1, [r2, #32]
 8022a00:	781a      	ldrb	r2, [r3, #0]
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022a0c:	b29b      	uxth	r3, r3
 8022a0e:	3b01      	subs	r3, #1
 8022a10:	b29b      	uxth	r3, r3
 8022a12:	687a      	ldr	r2, [r7, #4]
 8022a14:	4619      	mov	r1, r3
 8022a16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	d10f      	bne.n	8022a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	68da      	ldr	r2, [r3, #12]
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	68da      	ldr	r2, [r3, #12]
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	681b      	ldr	r3, [r3, #0]
 8022a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	e000      	b.n	8022a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022a40:	2302      	movs	r3, #2
  }
}
 8022a42:	4618      	mov	r0, r3
 8022a44:	3714      	adds	r7, #20
 8022a46:	46bd      	mov	sp, r7
 8022a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a4c:	4770      	bx	lr

08022a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022a4e:	b580      	push	{r7, lr}
 8022a50:	b082      	sub	sp, #8
 8022a52:	af00      	add	r7, sp, #0
 8022a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	68da      	ldr	r2, [r3, #12]
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	2220      	movs	r2, #32
 8022a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022a6e:	6878      	ldr	r0, [r7, #4]
 8022a70:	f7ff fec8 	bl	8022804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022a74:	2300      	movs	r3, #0
}
 8022a76:	4618      	mov	r0, r3
 8022a78:	3708      	adds	r7, #8
 8022a7a:	46bd      	mov	sp, r7
 8022a7c:	bd80      	pop	{r7, pc}

08022a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022a7e:	b580      	push	{r7, lr}
 8022a80:	b08c      	sub	sp, #48	; 0x30
 8022a82:	af00      	add	r7, sp, #0
 8022a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022a8c:	b2db      	uxtb	r3, r3
 8022a8e:	2b22      	cmp	r3, #34	; 0x22
 8022a90:	f040 80ab 	bne.w	8022bea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	689b      	ldr	r3, [r3, #8]
 8022a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022a9c:	d117      	bne.n	8022ace <UART_Receive_IT+0x50>
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	691b      	ldr	r3, [r3, #16]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d113      	bne.n	8022ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022aa6:	2300      	movs	r3, #0
 8022aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022aae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	685b      	ldr	r3, [r3, #4]
 8022ab6:	b29b      	uxth	r3, r3
 8022ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022abc:	b29a      	uxth	r2, r3
 8022abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ac6:	1c9a      	adds	r2, r3, #2
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	629a      	str	r2, [r3, #40]	; 0x28
 8022acc:	e026      	b.n	8022b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	689b      	ldr	r3, [r3, #8]
 8022adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022ae0:	d007      	beq.n	8022af2 <UART_Receive_IT+0x74>
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	689b      	ldr	r3, [r3, #8]
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	d10a      	bne.n	8022b00 <UART_Receive_IT+0x82>
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	691b      	ldr	r3, [r3, #16]
 8022aee:	2b00      	cmp	r3, #0
 8022af0:	d106      	bne.n	8022b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	685b      	ldr	r3, [r3, #4]
 8022af8:	b2da      	uxtb	r2, r3
 8022afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022afc:	701a      	strb	r2, [r3, #0]
 8022afe:	e008      	b.n	8022b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	681b      	ldr	r3, [r3, #0]
 8022b04:	685b      	ldr	r3, [r3, #4]
 8022b06:	b2db      	uxtb	r3, r3
 8022b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022b0c:	b2da      	uxtb	r2, r3
 8022b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b16:	1c5a      	adds	r2, r3, #1
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022b20:	b29b      	uxth	r3, r3
 8022b22:	3b01      	subs	r3, #1
 8022b24:	b29b      	uxth	r3, r3
 8022b26:	687a      	ldr	r2, [r7, #4]
 8022b28:	4619      	mov	r1, r3
 8022b2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d15a      	bne.n	8022be6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022b30:	687b      	ldr	r3, [r7, #4]
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	68da      	ldr	r2, [r3, #12]
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	f022 0220 	bic.w	r2, r2, #32
 8022b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	68da      	ldr	r2, [r3, #12]
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	681b      	ldr	r3, [r3, #0]
 8022b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	695a      	ldr	r2, [r3, #20]
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	f022 0201 	bic.w	r2, r2, #1
 8022b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022b60:	687b      	ldr	r3, [r7, #4]
 8022b62:	2220      	movs	r2, #32
 8022b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b6c:	2b01      	cmp	r3, #1
 8022b6e:	d135      	bne.n	8022bdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2200      	movs	r2, #0
 8022b74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	330c      	adds	r3, #12
 8022b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022b7e:	697b      	ldr	r3, [r7, #20]
 8022b80:	e853 3f00 	ldrex	r3, [r3]
 8022b84:	613b      	str	r3, [r7, #16]
   return(result);
 8022b86:	693b      	ldr	r3, [r7, #16]
 8022b88:	f023 0310 	bic.w	r3, r3, #16
 8022b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	330c      	adds	r3, #12
 8022b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022b96:	623a      	str	r2, [r7, #32]
 8022b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022b9a:	69f9      	ldr	r1, [r7, #28]
 8022b9c:	6a3a      	ldr	r2, [r7, #32]
 8022b9e:	e841 2300 	strex	r3, r2, [r1]
 8022ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8022ba4:	69bb      	ldr	r3, [r7, #24]
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	d1e5      	bne.n	8022b76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	f003 0310 	and.w	r3, r3, #16
 8022bb4:	2b10      	cmp	r3, #16
 8022bb6:	d10a      	bne.n	8022bce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022bb8:	2300      	movs	r3, #0
 8022bba:	60fb      	str	r3, [r7, #12]
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	60fb      	str	r3, [r7, #12]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	685b      	ldr	r3, [r3, #4]
 8022bca:	60fb      	str	r3, [r7, #12]
 8022bcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022bd2:	4619      	mov	r1, r3
 8022bd4:	6878      	ldr	r0, [r7, #4]
 8022bd6:	f7ff fe29 	bl	802282c <HAL_UARTEx_RxEventCallback>
 8022bda:	e002      	b.n	8022be2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8022bdc:	6878      	ldr	r0, [r7, #4]
 8022bde:	f7fd fda9 	bl	8020734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022be2:	2300      	movs	r3, #0
 8022be4:	e002      	b.n	8022bec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022be6:	2300      	movs	r3, #0
 8022be8:	e000      	b.n	8022bec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8022bea:	2302      	movs	r3, #2
  }
}
 8022bec:	4618      	mov	r0, r3
 8022bee:	3730      	adds	r7, #48	; 0x30
 8022bf0:	46bd      	mov	sp, r7
 8022bf2:	bd80      	pop	{r7, pc}

08022bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022bf8:	b0c0      	sub	sp, #256	; 0x100
 8022bfa:	af00      	add	r7, sp, #0
 8022bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	691b      	ldr	r3, [r3, #16]
 8022c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c10:	68d9      	ldr	r1, [r3, #12]
 8022c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c16:	681a      	ldr	r2, [r3, #0]
 8022c18:	ea40 0301 	orr.w	r3, r0, r1
 8022c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c22:	689a      	ldr	r2, [r3, #8]
 8022c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c28:	691b      	ldr	r3, [r3, #16]
 8022c2a:	431a      	orrs	r2, r3
 8022c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c30:	695b      	ldr	r3, [r3, #20]
 8022c32:	431a      	orrs	r2, r3
 8022c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c38:	69db      	ldr	r3, [r3, #28]
 8022c3a:	4313      	orrs	r3, r2
 8022c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c44:	681b      	ldr	r3, [r3, #0]
 8022c46:	68db      	ldr	r3, [r3, #12]
 8022c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022c4c:	f021 010c 	bic.w	r1, r1, #12
 8022c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c54:	681a      	ldr	r2, [r3, #0]
 8022c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8022c5a:	430b      	orrs	r3, r1
 8022c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	695b      	ldr	r3, [r3, #20]
 8022c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c6e:	6999      	ldr	r1, [r3, #24]
 8022c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c74:	681a      	ldr	r2, [r3, #0]
 8022c76:	ea40 0301 	orr.w	r3, r0, r1
 8022c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c80:	681a      	ldr	r2, [r3, #0]
 8022c82:	4b8f      	ldr	r3, [pc, #572]	; (8022ec0 <UART_SetConfig+0x2cc>)
 8022c84:	429a      	cmp	r2, r3
 8022c86:	d005      	beq.n	8022c94 <UART_SetConfig+0xa0>
 8022c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c8c:	681a      	ldr	r2, [r3, #0]
 8022c8e:	4b8d      	ldr	r3, [pc, #564]	; (8022ec4 <UART_SetConfig+0x2d0>)
 8022c90:	429a      	cmp	r2, r3
 8022c92:	d104      	bne.n	8022c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022c94:	f7ff fa96 	bl	80221c4 <HAL_RCC_GetPCLK2Freq>
 8022c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8022c9c:	e003      	b.n	8022ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022c9e:	f7ff fa7d 	bl	802219c <HAL_RCC_GetPCLK1Freq>
 8022ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022caa:	69db      	ldr	r3, [r3, #28]
 8022cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022cb0:	f040 810c 	bne.w	8022ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022cb8:	2200      	movs	r2, #0
 8022cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8022cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022cc6:	4622      	mov	r2, r4
 8022cc8:	462b      	mov	r3, r5
 8022cca:	1891      	adds	r1, r2, r2
 8022ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8022cce:	415b      	adcs	r3, r3
 8022cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022cd6:	4621      	mov	r1, r4
 8022cd8:	eb12 0801 	adds.w	r8, r2, r1
 8022cdc:	4629      	mov	r1, r5
 8022cde:	eb43 0901 	adc.w	r9, r3, r1
 8022ce2:	f04f 0200 	mov.w	r2, #0
 8022ce6:	f04f 0300 	mov.w	r3, #0
 8022cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022cf6:	4690      	mov	r8, r2
 8022cf8:	4699      	mov	r9, r3
 8022cfa:	4623      	mov	r3, r4
 8022cfc:	eb18 0303 	adds.w	r3, r8, r3
 8022d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022d04:	462b      	mov	r3, r5
 8022d06:	eb49 0303 	adc.w	r3, r9, r3
 8022d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d12:	685b      	ldr	r3, [r3, #4]
 8022d14:	2200      	movs	r2, #0
 8022d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8022d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022d22:	460b      	mov	r3, r1
 8022d24:	18db      	adds	r3, r3, r3
 8022d26:	653b      	str	r3, [r7, #80]	; 0x50
 8022d28:	4613      	mov	r3, r2
 8022d2a:	eb42 0303 	adc.w	r3, r2, r3
 8022d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8022d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022d38:	f7fd fa50 	bl	80201dc <__aeabi_uldivmod>
 8022d3c:	4602      	mov	r2, r0
 8022d3e:	460b      	mov	r3, r1
 8022d40:	4b61      	ldr	r3, [pc, #388]	; (8022ec8 <UART_SetConfig+0x2d4>)
 8022d42:	fba3 2302 	umull	r2, r3, r3, r2
 8022d46:	095b      	lsrs	r3, r3, #5
 8022d48:	011c      	lsls	r4, r3, #4
 8022d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022d4e:	2200      	movs	r2, #0
 8022d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022d54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8022d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022d5c:	4642      	mov	r2, r8
 8022d5e:	464b      	mov	r3, r9
 8022d60:	1891      	adds	r1, r2, r2
 8022d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8022d64:	415b      	adcs	r3, r3
 8022d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022d6c:	4641      	mov	r1, r8
 8022d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8022d72:	4649      	mov	r1, r9
 8022d74:	eb43 0b01 	adc.w	fp, r3, r1
 8022d78:	f04f 0200 	mov.w	r2, #0
 8022d7c:	f04f 0300 	mov.w	r3, #0
 8022d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022d8c:	4692      	mov	sl, r2
 8022d8e:	469b      	mov	fp, r3
 8022d90:	4643      	mov	r3, r8
 8022d92:	eb1a 0303 	adds.w	r3, sl, r3
 8022d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022d9a:	464b      	mov	r3, r9
 8022d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8022da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022da8:	685b      	ldr	r3, [r3, #4]
 8022daa:	2200      	movs	r2, #0
 8022dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022db0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022db8:	460b      	mov	r3, r1
 8022dba:	18db      	adds	r3, r3, r3
 8022dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8022dbe:	4613      	mov	r3, r2
 8022dc0:	eb42 0303 	adc.w	r3, r2, r3
 8022dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8022dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8022dce:	f7fd fa05 	bl	80201dc <__aeabi_uldivmod>
 8022dd2:	4602      	mov	r2, r0
 8022dd4:	460b      	mov	r3, r1
 8022dd6:	4611      	mov	r1, r2
 8022dd8:	4b3b      	ldr	r3, [pc, #236]	; (8022ec8 <UART_SetConfig+0x2d4>)
 8022dda:	fba3 2301 	umull	r2, r3, r3, r1
 8022dde:	095b      	lsrs	r3, r3, #5
 8022de0:	2264      	movs	r2, #100	; 0x64
 8022de2:	fb02 f303 	mul.w	r3, r2, r3
 8022de6:	1acb      	subs	r3, r1, r3
 8022de8:	00db      	lsls	r3, r3, #3
 8022dea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8022dee:	4b36      	ldr	r3, [pc, #216]	; (8022ec8 <UART_SetConfig+0x2d4>)
 8022df0:	fba3 2302 	umull	r2, r3, r3, r2
 8022df4:	095b      	lsrs	r3, r3, #5
 8022df6:	005b      	lsls	r3, r3, #1
 8022df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022dfc:	441c      	add	r4, r3
 8022dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022e02:	2200      	movs	r2, #0
 8022e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8022e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022e10:	4642      	mov	r2, r8
 8022e12:	464b      	mov	r3, r9
 8022e14:	1891      	adds	r1, r2, r2
 8022e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8022e18:	415b      	adcs	r3, r3
 8022e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022e20:	4641      	mov	r1, r8
 8022e22:	1851      	adds	r1, r2, r1
 8022e24:	6339      	str	r1, [r7, #48]	; 0x30
 8022e26:	4649      	mov	r1, r9
 8022e28:	414b      	adcs	r3, r1
 8022e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8022e2c:	f04f 0200 	mov.w	r2, #0
 8022e30:	f04f 0300 	mov.w	r3, #0
 8022e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8022e38:	4659      	mov	r1, fp
 8022e3a:	00cb      	lsls	r3, r1, #3
 8022e3c:	4651      	mov	r1, sl
 8022e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022e42:	4651      	mov	r1, sl
 8022e44:	00ca      	lsls	r2, r1, #3
 8022e46:	4610      	mov	r0, r2
 8022e48:	4619      	mov	r1, r3
 8022e4a:	4603      	mov	r3, r0
 8022e4c:	4642      	mov	r2, r8
 8022e4e:	189b      	adds	r3, r3, r2
 8022e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022e54:	464b      	mov	r3, r9
 8022e56:	460a      	mov	r2, r1
 8022e58:	eb42 0303 	adc.w	r3, r2, r3
 8022e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e64:	685b      	ldr	r3, [r3, #4]
 8022e66:	2200      	movs	r2, #0
 8022e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8022e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022e74:	460b      	mov	r3, r1
 8022e76:	18db      	adds	r3, r3, r3
 8022e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8022e7a:	4613      	mov	r3, r2
 8022e7c:	eb42 0303 	adc.w	r3, r2, r3
 8022e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8022e8a:	f7fd f9a7 	bl	80201dc <__aeabi_uldivmod>
 8022e8e:	4602      	mov	r2, r0
 8022e90:	460b      	mov	r3, r1
 8022e92:	4b0d      	ldr	r3, [pc, #52]	; (8022ec8 <UART_SetConfig+0x2d4>)
 8022e94:	fba3 1302 	umull	r1, r3, r3, r2
 8022e98:	095b      	lsrs	r3, r3, #5
 8022e9a:	2164      	movs	r1, #100	; 0x64
 8022e9c:	fb01 f303 	mul.w	r3, r1, r3
 8022ea0:	1ad3      	subs	r3, r2, r3
 8022ea2:	00db      	lsls	r3, r3, #3
 8022ea4:	3332      	adds	r3, #50	; 0x32
 8022ea6:	4a08      	ldr	r2, [pc, #32]	; (8022ec8 <UART_SetConfig+0x2d4>)
 8022ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8022eac:	095b      	lsrs	r3, r3, #5
 8022eae:	f003 0207 	and.w	r2, r3, #7
 8022eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022eb6:	681b      	ldr	r3, [r3, #0]
 8022eb8:	4422      	add	r2, r4
 8022eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8022ebc:	e105      	b.n	80230ca <UART_SetConfig+0x4d6>
 8022ebe:	bf00      	nop
 8022ec0:	40011000 	.word	0x40011000
 8022ec4:	40011400 	.word	0x40011400
 8022ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022ed0:	2200      	movs	r2, #0
 8022ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8022eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8022ede:	4642      	mov	r2, r8
 8022ee0:	464b      	mov	r3, r9
 8022ee2:	1891      	adds	r1, r2, r2
 8022ee4:	6239      	str	r1, [r7, #32]
 8022ee6:	415b      	adcs	r3, r3
 8022ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8022eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022eee:	4641      	mov	r1, r8
 8022ef0:	1854      	adds	r4, r2, r1
 8022ef2:	4649      	mov	r1, r9
 8022ef4:	eb43 0501 	adc.w	r5, r3, r1
 8022ef8:	f04f 0200 	mov.w	r2, #0
 8022efc:	f04f 0300 	mov.w	r3, #0
 8022f00:	00eb      	lsls	r3, r5, #3
 8022f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022f06:	00e2      	lsls	r2, r4, #3
 8022f08:	4614      	mov	r4, r2
 8022f0a:	461d      	mov	r5, r3
 8022f0c:	4643      	mov	r3, r8
 8022f0e:	18e3      	adds	r3, r4, r3
 8022f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022f14:	464b      	mov	r3, r9
 8022f16:	eb45 0303 	adc.w	r3, r5, r3
 8022f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f22:	685b      	ldr	r3, [r3, #4]
 8022f24:	2200      	movs	r2, #0
 8022f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8022f2e:	f04f 0200 	mov.w	r2, #0
 8022f32:	f04f 0300 	mov.w	r3, #0
 8022f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8022f3a:	4629      	mov	r1, r5
 8022f3c:	008b      	lsls	r3, r1, #2
 8022f3e:	4621      	mov	r1, r4
 8022f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022f44:	4621      	mov	r1, r4
 8022f46:	008a      	lsls	r2, r1, #2
 8022f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8022f4c:	f7fd f946 	bl	80201dc <__aeabi_uldivmod>
 8022f50:	4602      	mov	r2, r0
 8022f52:	460b      	mov	r3, r1
 8022f54:	4b60      	ldr	r3, [pc, #384]	; (80230d8 <UART_SetConfig+0x4e4>)
 8022f56:	fba3 2302 	umull	r2, r3, r3, r2
 8022f5a:	095b      	lsrs	r3, r3, #5
 8022f5c:	011c      	lsls	r4, r3, #4
 8022f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022f62:	2200      	movs	r2, #0
 8022f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8022f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8022f70:	4642      	mov	r2, r8
 8022f72:	464b      	mov	r3, r9
 8022f74:	1891      	adds	r1, r2, r2
 8022f76:	61b9      	str	r1, [r7, #24]
 8022f78:	415b      	adcs	r3, r3
 8022f7a:	61fb      	str	r3, [r7, #28]
 8022f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022f80:	4641      	mov	r1, r8
 8022f82:	1851      	adds	r1, r2, r1
 8022f84:	6139      	str	r1, [r7, #16]
 8022f86:	4649      	mov	r1, r9
 8022f88:	414b      	adcs	r3, r1
 8022f8a:	617b      	str	r3, [r7, #20]
 8022f8c:	f04f 0200 	mov.w	r2, #0
 8022f90:	f04f 0300 	mov.w	r3, #0
 8022f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022f98:	4659      	mov	r1, fp
 8022f9a:	00cb      	lsls	r3, r1, #3
 8022f9c:	4651      	mov	r1, sl
 8022f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022fa2:	4651      	mov	r1, sl
 8022fa4:	00ca      	lsls	r2, r1, #3
 8022fa6:	4610      	mov	r0, r2
 8022fa8:	4619      	mov	r1, r3
 8022faa:	4603      	mov	r3, r0
 8022fac:	4642      	mov	r2, r8
 8022fae:	189b      	adds	r3, r3, r2
 8022fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022fb4:	464b      	mov	r3, r9
 8022fb6:	460a      	mov	r2, r1
 8022fb8:	eb42 0303 	adc.w	r3, r2, r3
 8022fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022fc4:	685b      	ldr	r3, [r3, #4]
 8022fc6:	2200      	movs	r2, #0
 8022fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8022fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8022fcc:	f04f 0200 	mov.w	r2, #0
 8022fd0:	f04f 0300 	mov.w	r3, #0
 8022fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8022fd8:	4649      	mov	r1, r9
 8022fda:	008b      	lsls	r3, r1, #2
 8022fdc:	4641      	mov	r1, r8
 8022fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022fe2:	4641      	mov	r1, r8
 8022fe4:	008a      	lsls	r2, r1, #2
 8022fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8022fea:	f7fd f8f7 	bl	80201dc <__aeabi_uldivmod>
 8022fee:	4602      	mov	r2, r0
 8022ff0:	460b      	mov	r3, r1
 8022ff2:	4b39      	ldr	r3, [pc, #228]	; (80230d8 <UART_SetConfig+0x4e4>)
 8022ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8022ff8:	095b      	lsrs	r3, r3, #5
 8022ffa:	2164      	movs	r1, #100	; 0x64
 8022ffc:	fb01 f303 	mul.w	r3, r1, r3
 8023000:	1ad3      	subs	r3, r2, r3
 8023002:	011b      	lsls	r3, r3, #4
 8023004:	3332      	adds	r3, #50	; 0x32
 8023006:	4a34      	ldr	r2, [pc, #208]	; (80230d8 <UART_SetConfig+0x4e4>)
 8023008:	fba2 2303 	umull	r2, r3, r2, r3
 802300c:	095b      	lsrs	r3, r3, #5
 802300e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023012:	441c      	add	r4, r3
 8023014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8023018:	2200      	movs	r2, #0
 802301a:	673b      	str	r3, [r7, #112]	; 0x70
 802301c:	677a      	str	r2, [r7, #116]	; 0x74
 802301e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8023022:	4642      	mov	r2, r8
 8023024:	464b      	mov	r3, r9
 8023026:	1891      	adds	r1, r2, r2
 8023028:	60b9      	str	r1, [r7, #8]
 802302a:	415b      	adcs	r3, r3
 802302c:	60fb      	str	r3, [r7, #12]
 802302e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023032:	4641      	mov	r1, r8
 8023034:	1851      	adds	r1, r2, r1
 8023036:	6039      	str	r1, [r7, #0]
 8023038:	4649      	mov	r1, r9
 802303a:	414b      	adcs	r3, r1
 802303c:	607b      	str	r3, [r7, #4]
 802303e:	f04f 0200 	mov.w	r2, #0
 8023042:	f04f 0300 	mov.w	r3, #0
 8023046:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802304a:	4659      	mov	r1, fp
 802304c:	00cb      	lsls	r3, r1, #3
 802304e:	4651      	mov	r1, sl
 8023050:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023054:	4651      	mov	r1, sl
 8023056:	00ca      	lsls	r2, r1, #3
 8023058:	4610      	mov	r0, r2
 802305a:	4619      	mov	r1, r3
 802305c:	4603      	mov	r3, r0
 802305e:	4642      	mov	r2, r8
 8023060:	189b      	adds	r3, r3, r2
 8023062:	66bb      	str	r3, [r7, #104]	; 0x68
 8023064:	464b      	mov	r3, r9
 8023066:	460a      	mov	r2, r1
 8023068:	eb42 0303 	adc.w	r3, r2, r3
 802306c:	66fb      	str	r3, [r7, #108]	; 0x6c
 802306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023072:	685b      	ldr	r3, [r3, #4]
 8023074:	2200      	movs	r2, #0
 8023076:	663b      	str	r3, [r7, #96]	; 0x60
 8023078:	667a      	str	r2, [r7, #100]	; 0x64
 802307a:	f04f 0200 	mov.w	r2, #0
 802307e:	f04f 0300 	mov.w	r3, #0
 8023082:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8023086:	4649      	mov	r1, r9
 8023088:	008b      	lsls	r3, r1, #2
 802308a:	4641      	mov	r1, r8
 802308c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023090:	4641      	mov	r1, r8
 8023092:	008a      	lsls	r2, r1, #2
 8023094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8023098:	f7fd f8a0 	bl	80201dc <__aeabi_uldivmod>
 802309c:	4602      	mov	r2, r0
 802309e:	460b      	mov	r3, r1
 80230a0:	4b0d      	ldr	r3, [pc, #52]	; (80230d8 <UART_SetConfig+0x4e4>)
 80230a2:	fba3 1302 	umull	r1, r3, r3, r2
 80230a6:	095b      	lsrs	r3, r3, #5
 80230a8:	2164      	movs	r1, #100	; 0x64
 80230aa:	fb01 f303 	mul.w	r3, r1, r3
 80230ae:	1ad3      	subs	r3, r2, r3
 80230b0:	011b      	lsls	r3, r3, #4
 80230b2:	3332      	adds	r3, #50	; 0x32
 80230b4:	4a08      	ldr	r2, [pc, #32]	; (80230d8 <UART_SetConfig+0x4e4>)
 80230b6:	fba2 2303 	umull	r2, r3, r2, r3
 80230ba:	095b      	lsrs	r3, r3, #5
 80230bc:	f003 020f 	and.w	r2, r3, #15
 80230c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	4422      	add	r2, r4
 80230c8:	609a      	str	r2, [r3, #8]
}
 80230ca:	bf00      	nop
 80230cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80230d0:	46bd      	mov	sp, r7
 80230d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80230d6:	bf00      	nop
 80230d8:	51eb851f 	.word	0x51eb851f

080230dc <__libc_init_array>:
 80230dc:	b570      	push	{r4, r5, r6, lr}
 80230de:	4d0d      	ldr	r5, [pc, #52]	; (8023114 <__libc_init_array+0x38>)
 80230e0:	4c0d      	ldr	r4, [pc, #52]	; (8023118 <__libc_init_array+0x3c>)
 80230e2:	1b64      	subs	r4, r4, r5
 80230e4:	10a4      	asrs	r4, r4, #2
 80230e6:	2600      	movs	r6, #0
 80230e8:	42a6      	cmp	r6, r4
 80230ea:	d109      	bne.n	8023100 <__libc_init_array+0x24>
 80230ec:	4d0b      	ldr	r5, [pc, #44]	; (802311c <__libc_init_array+0x40>)
 80230ee:	4c0c      	ldr	r4, [pc, #48]	; (8023120 <__libc_init_array+0x44>)
 80230f0:	f000 f820 	bl	8023134 <_init>
 80230f4:	1b64      	subs	r4, r4, r5
 80230f6:	10a4      	asrs	r4, r4, #2
 80230f8:	2600      	movs	r6, #0
 80230fa:	42a6      	cmp	r6, r4
 80230fc:	d105      	bne.n	802310a <__libc_init_array+0x2e>
 80230fe:	bd70      	pop	{r4, r5, r6, pc}
 8023100:	f855 3b04 	ldr.w	r3, [r5], #4
 8023104:	4798      	blx	r3
 8023106:	3601      	adds	r6, #1
 8023108:	e7ee      	b.n	80230e8 <__libc_init_array+0xc>
 802310a:	f855 3b04 	ldr.w	r3, [r5], #4
 802310e:	4798      	blx	r3
 8023110:	3601      	adds	r6, #1
 8023112:	e7f2      	b.n	80230fa <__libc_init_array+0x1e>
 8023114:	08023178 	.word	0x08023178
 8023118:	08023178 	.word	0x08023178
 802311c:	08023178 	.word	0x08023178
 8023120:	0802317c 	.word	0x0802317c

08023124 <memset>:
 8023124:	4402      	add	r2, r0
 8023126:	4603      	mov	r3, r0
 8023128:	4293      	cmp	r3, r2
 802312a:	d100      	bne.n	802312e <memset+0xa>
 802312c:	4770      	bx	lr
 802312e:	f803 1b01 	strb.w	r1, [r3], #1
 8023132:	e7f9      	b.n	8023128 <memset+0x4>

08023134 <_init>:
 8023134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023136:	bf00      	nop
 8023138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802313a:	bc08      	pop	{r3}
 802313c:	469e      	mov	lr, r3
 802313e:	4770      	bx	lr

08023140 <_fini>:
 8023140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023142:	bf00      	nop
 8023144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023146:	bc08      	pop	{r3}
 8023148:	469e      	mov	lr, r3
 802314a:	4770      	bx	lr
