
FOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003708  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038dc  080038dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e4  080038e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00005be8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005bf4  20005bf4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a866  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200f  00000000  00000000  0002a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d0  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021023  00000000  00000000  0002d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8b0  00000000  00000000  0004e943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2f49  00000000  00000000  0005a1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d13c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002140  00000000  00000000  0011d18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003878 	.word	0x08003878

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003878 	.word	0x08003878

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <GetSector>:
 * @brief  Retrieves the sector number for a given address(F407).
 * @param  Address: Flash memory address for which the sector is needed.
 * @retval uint32_t: Sector number corresponding to the given address.
 */
uint32_t GetSector(uint32_t Address)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a44      	ldr	r2, [pc, #272]	; (8000610 <GetSector+0x120>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d806      	bhi.n	8000512 <GetSector+0x22>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800050a:	d302      	bcc.n	8000512 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e077      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <GetSector+0x124>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d806      	bhi.n	8000528 <GetSector+0x38>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a3e      	ldr	r2, [pc, #248]	; (8000618 <GetSector+0x128>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d302      	bcc.n	8000528 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000522:	2301      	movs	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e06c      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a3c      	ldr	r2, [pc, #240]	; (800061c <GetSector+0x12c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d806      	bhi.n	800053e <GetSector+0x4e>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a3b      	ldr	r2, [pc, #236]	; (8000620 <GetSector+0x130>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d302      	bcc.n	800053e <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000538:	2302      	movs	r3, #2
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e061      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a38      	ldr	r2, [pc, #224]	; (8000624 <GetSector+0x134>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d206      	bcs.n	8000554 <GetSector+0x64>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a37      	ldr	r2, [pc, #220]	; (8000628 <GetSector+0x138>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d302      	bcc.n	8000554 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800054e:	2303      	movs	r3, #3
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e056      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a35      	ldr	r2, [pc, #212]	; (800062c <GetSector+0x13c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d206      	bcs.n	800056a <GetSector+0x7a>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a31      	ldr	r2, [pc, #196]	; (8000624 <GetSector+0x134>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d902      	bls.n	800056a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000564:	2304      	movs	r3, #4
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e04b      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a30      	ldr	r2, [pc, #192]	; (8000630 <GetSector+0x140>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d206      	bcs.n	8000580 <GetSector+0x90>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <GetSector+0x13c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d902      	bls.n	8000580 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800057a:	2305      	movs	r3, #5
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e040      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <GetSector+0x144>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d206      	bcs.n	8000596 <GetSector+0xa6>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a29      	ldr	r2, [pc, #164]	; (8000630 <GetSector+0x140>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d902      	bls.n	8000596 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000590:	2306      	movs	r3, #6
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	e035      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <GetSector+0x148>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d206      	bcs.n	80005ac <GetSector+0xbc>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a24      	ldr	r2, [pc, #144]	; (8000634 <GetSector+0x144>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d902      	bls.n	80005ac <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e02a      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a23      	ldr	r2, [pc, #140]	; (800063c <GetSector+0x14c>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d206      	bcs.n	80005c2 <GetSector+0xd2>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a20      	ldr	r2, [pc, #128]	; (8000638 <GetSector+0x148>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d902      	bls.n	80005c2 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80005bc:	2308      	movs	r3, #8
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e01f      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <GetSector+0x150>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d206      	bcs.n	80005d8 <GetSector+0xe8>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <GetSector+0x14c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d902      	bls.n	80005d8 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80005d2:	2309      	movs	r3, #9
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e014      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <GetSector+0x154>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d806      	bhi.n	80005ee <GetSector+0xfe>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <GetSector+0x150>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d902      	bls.n	80005ee <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80005e8:	230a      	movs	r3, #10
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e009      	b.n	8000602 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <GetSector+0x158>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d805      	bhi.n	8000602 <GetSector+0x112>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <GetSector+0x15c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d901      	bls.n	8000602 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80005fe:	230b      	movs	r3, #11
 8000600:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	08003ffe 	.word	0x08003ffe
 8000614:	08007ffe 	.word	0x08007ffe
 8000618:	08004000 	.word	0x08004000
 800061c:	0800bffe 	.word	0x0800bffe
 8000620:	08008000 	.word	0x08008000
 8000624:	0800ffff 	.word	0x0800ffff
 8000628:	0800c000 	.word	0x0800c000
 800062c:	0801ffff 	.word	0x0801ffff
 8000630:	0803ffff 	.word	0x0803ffff
 8000634:	0805ffff 	.word	0x0805ffff
 8000638:	0807ffff 	.word	0x0807ffff
 800063c:	0809ffff 	.word	0x0809ffff
 8000640:	080bffff 	.word	0x080bffff
 8000644:	080dfffe 	.word	0x080dfffe
 8000648:	080ffffe 	.word	0x080ffffe
 800064c:	080dffff 	.word	0x080dffff

08000650 <Flash_Write_Data>:
//	     to protect the FLASH memory against possible unwanted operation) *********/
//	  HAL_FLASH_Lock();
//	  return 0;
//}

uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords) {
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	4613      	mov	r3, r2
 800065c:	80fb      	strh	r3, [r7, #6]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SECTORError;
    int sofar = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unlock the Flash to enable the flash control register access */
    HAL_FLASH_Unlock();
 8000662:	f000 ffc7 	bl	80015f4 <HAL_FLASH_Unlock>

    /* Get the sector of the starting address */
    uint32_t StartSector = GetSector(StartSectorAddress);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff ff42 	bl	80004f0 <GetSector>
 800066c:	6238      	str	r0, [r7, #32]

    /* Check if the sector has been erased or if data can be written */
    if (*(uint32_t *)StartSectorAddress != 0xFFFFFFFF) {
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000676:	d041      	beq.n	80006fc <Flash_Write_Data+0xac>
        /* If the start address is not erased (0xFFFFFFFF is the erased state),
           then we need to erase the sector before writing */

        uint32_t EndSectorAddress = StartSectorAddress + numberofwords * 4;
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	61fb      	str	r3, [r7, #28]
        uint32_t EndSector = GetSector(EndSectorAddress);
 8000684:	69f8      	ldr	r0, [r7, #28]
 8000686:	f7ff ff33 	bl	80004f0 <GetSector>
 800068a:	61b8      	str	r0, [r7, #24]

        /* Fill EraseInit structure for the sector we want to erase */
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <Flash_Write_Data+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <Flash_Write_Data+0xc4>)
 8000694:	2202      	movs	r2, #2
 8000696:	611a      	str	r2, [r3, #16]
        EraseInitStruct.Sector = StartSector;
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <Flash_Write_Data+0xc4>)
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	6093      	str	r3, [r2, #8]
        EraseInitStruct.NbSectors = (EndSector - StartSector) + 1;
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <Flash_Write_Data+0xc4>)
 80006a8:	60d3      	str	r3, [r2, #12]

        /* Erase the required sector */
        if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4818      	ldr	r0, [pc, #96]	; (8000714 <Flash_Write_Data+0xc4>)
 80006b2:	f001 f90d 	bl	80018d0 <HAL_FLASHEx_Erase>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d01f      	beq.n	80006fc <Flash_Write_Data+0xac>
            return HAL_FLASH_GetError(); // Error during erase
 80006bc:	f000 ffcc 	bl	8001658 <HAL_FLASH_GetError>
 80006c0:	4603      	mov	r3, r0
 80006c2:	e022      	b.n	800070a <Flash_Write_Data+0xba>
        }
    }

    /* Program the user Flash area word by word */
    while (sofar < numberofwords) {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK) {
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	4413      	add	r3, r2
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	461c      	mov	r4, r3
 80006d2:	4615      	mov	r5, r2
 80006d4:	4622      	mov	r2, r4
 80006d6:	462b      	mov	r3, r5
 80006d8:	68f9      	ldr	r1, [r7, #12]
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 ff36 	bl	800154c <HAL_FLASH_Program>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d106      	bne.n	80006f4 <Flash_Write_Data+0xa4>
            StartSectorAddress += 4; // Move to the next word address
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3304      	adds	r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
            sofar++;
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	3301      	adds	r3, #1
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
 80006f2:	e003      	b.n	80006fc <Flash_Write_Data+0xac>
        } else {
            /* Error occurred while writing data in Flash memory */
            return HAL_FLASH_GetError();
 80006f4:	f000 ffb0 	bl	8001658 <HAL_FLASH_GetError>
 80006f8:	4603      	mov	r3, r0
 80006fa:	e006      	b.n	800070a <Flash_Write_Data+0xba>
    while (sofar < numberofwords) {
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000700:	429a      	cmp	r2, r3
 8000702:	dbdf      	blt.n	80006c4 <Flash_Write_Data+0x74>
        }
    }

    /* Lock the Flash to disable the flash control register access */
    HAL_FLASH_Lock();
 8000704:	f000 ff98 	bl	8001638 <HAL_FLASH_Lock>
    return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bdb0      	pop	{r4, r5, r7, pc}
 8000712:	bf00      	nop
 8000714:	20000028 	.word	0x20000028

08000718 <Flash_Read_Data>:
 *                The buffer must have enough space to store `numberofwords` 32-bit values.
 * @param  numberofwords: Number of 32-bit words to read from flash memory.
 * @retval None
 */
void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4613      	mov	r3, r2
 8000724:	80fb      	strh	r3, [r7, #6]
    while (numberofwords--)
 8000726:	e009      	b.n	800073c <Flash_Read_Data+0x24>
    {
        *RxBuf = *(__IO uint32_t *)StartSectorAddress; // Read 32-bit word from flash
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	601a      	str	r2, [r3, #0]
        StartSectorAddress += 4;                      // Move to the next 32-bit word address
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3304      	adds	r3, #4
 8000734:	60fb      	str	r3, [r7, #12]
        RxBuf++;                                      // Move buffer pointer to the next word
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3304      	adds	r3, #4
 800073a:	60bb      	str	r3, [r7, #8]
    while (numberofwords--)
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	80fa      	strh	r2, [r7, #6]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f0      	bne.n	8000728 <Flash_Read_Data+0x10>
    }
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <__NVIC_SystemReset+0x24>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000766:	4904      	ldr	r1, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x24>)
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_SystemReset+0x28>)
 800076a:	4313      	orrs	r3, r2
 800076c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076e:	f3bf 8f4f 	dsb	sy
}
 8000772:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <__NVIC_SystemReset+0x20>
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	05fa0004 	.word	0x05fa0004

08000780 <Process_Bin_File>:
#include "OTA.h"

uint32_t word_to_write = 0;
uint32_t number_word = 0;

void Process_Bin_File() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
	number_word = cur_line-1;
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <Process_Bin_File+0xa4>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	461a      	mov	r2, r3
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <Process_Bin_File+0xa8>)
 8000790:	601a      	str	r2, [r3, #0]
	Flash_Write_Data(RX_WORD, &number_word, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	4924      	ldr	r1, [pc, #144]	; (8000828 <Process_Bin_File+0xa8>)
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <Process_Bin_File+0xac>)
 8000798:	f7ff ff5a 	bl	8000650 <Flash_Write_Data>

	uint32_t status = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	Flash_Read_Data(FLAG_ADDRESS,&status, 1);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4821      	ldr	r0, [pc, #132]	; (8000830 <Process_Bin_File+0xb0>)
 80007aa:	f7ff ffb5 	bl	8000718 <Flash_Read_Data>

    uint32_t write_address = SLOT1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <Process_Bin_File+0xb4>)
 80007b0:	617b      	str	r3, [r7, #20]

    for (int i= 0; i < SIZE; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e025      	b.n	8000804 <Process_Bin_File+0x84>
        uint32_t word_to_write =
            (Firmware_rx[i][3] << 24) |
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <Process_Bin_File+0xb8>)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	78db      	ldrb	r3, [r3, #3]
 80007c2:	061a      	lsls	r2, r3, #24
            (Firmware_rx[i][2] << 16) |
 80007c4:	491c      	ldr	r1, [pc, #112]	; (8000838 <Process_Bin_File+0xb8>)
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	041b      	lsls	r3, r3, #16
            (Firmware_rx[i][3] << 24) |
 80007d0:	431a      	orrs	r2, r3
            (Firmware_rx[i][1] << 8)  |
 80007d2:	4919      	ldr	r1, [pc, #100]	; (8000838 <Process_Bin_File+0xb8>)
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	021b      	lsls	r3, r3, #8
            (Firmware_rx[i][2] << 16) |
 80007de:	4313      	orrs	r3, r2
             Firmware_rx[i][0];
 80007e0:	4915      	ldr	r1, [pc, #84]	; (8000838 <Process_Bin_File+0xb8>)
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
            (Firmware_rx[i][1] << 8)  |
 80007e8:	4313      	orrs	r3, r2
        uint32_t word_to_write =
 80007ea:	607b      	str	r3, [r7, #4]

        Flash_Write_Data(write_address, &word_to_write, 1);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f7ff ff2c 	bl	8000650 <Flash_Write_Data>
        write_address += 4;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3304      	adds	r3, #4
 80007fc:	617b      	str	r3, [r7, #20]
    for (int i= 0; i < SIZE; i++) {
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	3301      	adds	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	f241 62c5 	movw	r2, #5829	; 0x16c5
 800080a:	4293      	cmp	r3, r2
 800080c:	ddd4      	ble.n	80007b8 <Process_Bin_File+0x38>
    }

    // update Flag for bootloader
    uint32_t flag = 0x00000001;
 800080e:	2301      	movs	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
    Flash_Write_Data(FLAG_ADDRESS, &flag, 1);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <Process_Bin_File+0xb0>)
 800081c:	f7ff ff18 	bl	8000650 <Flash_Write_Data>

    // reset system
    NVIC_SystemReset();
 8000820:	f7ff ff98 	bl	8000754 <__NVIC_SystemReset>
 8000824:	20005b62 	.word	0x20005b62
 8000828:	2000003c 	.word	0x2000003c
 800082c:	0800c000 	.word	0x0800c000
 8000830:	08008000 	.word	0x08008000
 8000834:	08040000 	.word	0x08040000
 8000838:	20000044 	.word	0x20000044

0800083c <Copy_To_Application>:
//	}
//
//    uint32_t flag = 0x00000000;
//    Flash_Write_Data(FLAG_ADDRESS, &flag, 1);
//}
void Copy_To_Application(uint32_t Address) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    uint32_t target_Address = Address;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	61fb      	str	r3, [r7, #28]
    uint32_t application_Address = ADDRESS;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <Copy_To_Application+0x98>)
 800084a:	61bb      	str	r3, [r7, #24]
    uint32_t copy_Buffer = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]

    uint32_t word = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
    Flash_Read_Data(RX_WORD, &word, 1);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	481e      	ldr	r0, [pc, #120]	; (80008d8 <Copy_To_Application+0x9c>)
 800085e:	f7ff ff5b 	bl	8000718 <Flash_Read_Data>


    // Copy only the number of received words
    Flash_Read_Data(target_Address, &copy_Buffer, 1);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	2201      	movs	r2, #1
 8000868:	4619      	mov	r1, r3
 800086a:	69f8      	ldr	r0, [r7, #28]
 800086c:	f7ff ff54 	bl	8000718 <Flash_Read_Data>
    for (uint32_t i = 0; i < word; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e016      	b.n	80008a4 <Copy_To_Application+0x68>

//        if (copy_Buffer == 0xFFFFFFFF) {
//            break; // Stop copying if invalid data is encountered
//        }

        Flash_Write_Data(application_Address, &copy_Buffer, 1);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	69b8      	ldr	r0, [r7, #24]
 8000880:	f7ff fee6 	bl	8000650 <Flash_Write_Data>
        target_Address += 4;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	3304      	adds	r3, #4
 8000888:	61fb      	str	r3, [r7, #28]
        application_Address += 4;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3304      	adds	r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
        Flash_Read_Data(target_Address, &copy_Buffer, 1);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f7ff ff3d 	bl	8000718 <Flash_Read_Data>
    for (uint32_t i = 0; i < word; i++) {
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3e4      	bcc.n	8000876 <Copy_To_Application+0x3a>
    }

    // Clear the flag to indicate bootloader is done
    uint32_t flag = 0x00000000;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
    Flash_Write_Data(FLAG_ADDRESS, &flag, 1);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <Copy_To_Application+0xa0>)
 80008ba:	f7ff fec9 	bl	8000650 <Flash_Write_Data>
    Flash_Write_Data(RX_WORD, &flag, 1);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <Copy_To_Application+0x9c>)
 80008c8:	f7ff fec2 	bl	8000650 <Flash_Write_Data>
}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08020000 	.word	0x08020000
 80008d8:	0800c000 	.word	0x0800c000
 80008dc:	08008000 	.word	0x08008000

080008e0 <Jump_To_Application>:


// Jump to Application
void Jump_To_Application(uint32_t appAddress)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    // set main stack pointer and update vector table
    __set_MSP(*(__IO uint32_t*)appAddress);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	f383 8808 	msr	MSP, r3
}
 80008f4:	bf00      	nop
    SCB->VTOR = appAddress;
 80008f6:	4a06      	ldr	r2, [pc, #24]	; (8000910 <Jump_To_Application+0x30>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6093      	str	r3, [r2, #8]

    // Jump to application
    typedef void (*pFunction)(void);
    pFunction JumpToApp = (pFunction)(*(__IO uint32_t*)(appAddress + 4));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3304      	adds	r3, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	60fb      	str	r3, [r7, #12]

    JumpToApp();
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4798      	blx	r3
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <crc16_ccitt>:

// CRC
uint16_t crc16_ccitt(uint8_t *data, uint16_t length) {
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000924:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	81bb      	strh	r3, [r7, #12]
 800092a:	e027      	b.n	800097c <crc16_ccitt+0x68>
        crc ^= (uint16_t)data[i] << 8;
 800092c:	89bb      	ldrh	r3, [r7, #12]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800093c:	4053      	eors	r3, r2
 800093e:	b21b      	sxth	r3, r3
 8000940:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000942:	2300      	movs	r3, #0
 8000944:	72fb      	strb	r3, [r7, #11]
 8000946:	e013      	b.n	8000970 <crc16_ccitt+0x5c>
            if (crc & 0x8000) {
 8000948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800094c:	2b00      	cmp	r3, #0
 800094e:	da09      	bge.n	8000964 <crc16_ccitt+0x50>
                crc = (crc << 1) ^ 0x1021;
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	b21b      	sxth	r3, r3
 8000956:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b21b      	sxth	r3, r3
 8000960:	81fb      	strh	r3, [r7, #14]
 8000962:	e002      	b.n	800096a <crc16_ccitt+0x56>
            } else {
                crc <<= 1;
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	3301      	adds	r3, #1
 800096e:	72fb      	strb	r3, [r7, #11]
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	2b07      	cmp	r3, #7
 8000974:	d9e8      	bls.n	8000948 <crc16_ccitt+0x34>
    for (uint16_t i = 0; i < length; i++) {
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	81bb      	strh	r3, [r7, #12]
 800097c:	89ba      	ldrh	r2, [r7, #12]
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3d3      	bcc.n	800092c <crc16_ccitt+0x18>
            }
        }
    }
    return crc;
 8000984:	89fb      	ldrh	r3, [r7, #14]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <__NVIC_SystemReset>:
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000998:	f3bf 8f4f 	dsb	sy
}
 800099c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <__NVIC_SystemReset+0x24>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009a6:	4904      	ldr	r1, [pc, #16]	; (80009b8 <__NVIC_SystemReset+0x24>)
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_SystemReset+0x28>)
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ae:	f3bf 8f4f 	dsb	sy
}
 80009b2:	bf00      	nop
    __NOP();
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <__NVIC_SystemReset+0x20>
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	05fa0004 	.word	0x05fa0004

080009c0 <HAL_UART_RxCpltCallback>:
uint8_t crc_index = 0;

bool CRC_success = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a8d      	ldr	r2, [pc, #564]	; (8000c04 <HAL_UART_RxCpltCallback+0x244>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 8114 	bne.w	8000bfc <HAL_UART_RxCpltCallback+0x23c>
    	if(OTA_mode == OTA_INIT){
 80009d4:	4b8c      	ldr	r3, [pc, #560]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d134      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0x86>
    		if(rx_data == '\r' || rx_data == '\n'){
 80009dc:	4b8b      	ldr	r3, [pc, #556]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b0d      	cmp	r3, #13
 80009e2:	d003      	beq.n	80009ec <HAL_UART_RxCpltCallback+0x2c>
 80009e4:	4b89      	ldr	r3, [pc, #548]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d11e      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x6a>
    			uart_rx[uart_count] = '\0';
 80009ec:	4b88      	ldr	r3, [pc, #544]	; (8000c10 <HAL_UART_RxCpltCallback+0x250>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b88      	ldr	r3, [pc, #544]	; (8000c14 <HAL_UART_RxCpltCallback+0x254>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	5499      	strb	r1, [r3, r2]
    			if(strcmp((char* )uart_rx, "OTA_START") == 0){
 80009f8:	4987      	ldr	r1, [pc, #540]	; (8000c18 <HAL_UART_RxCpltCallback+0x258>)
 80009fa:	4886      	ldr	r0, [pc, #536]	; (8000c14 <HAL_UART_RxCpltCallback+0x254>)
 80009fc:	f7ff fbe4 	bl	80001c8 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d105      	bne.n	8000a12 <HAL_UART_RxCpltCallback+0x52>
    				OTA_Start();
 8000a06:	f000 f919 	bl	8000c3c <OTA_Start>
    				OTA_mode = OTA_START;
 8000a0a:	4b7f      	ldr	r3, [pc, #508]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e002      	b.n	8000a18 <HAL_UART_RxCpltCallback+0x58>
    			}
    			else{
    				OTA_mode = OTA_INIT;
 8000a12:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
    			}
				uart_count = 0;
 8000a18:	4b7d      	ldr	r3, [pc, #500]	; (8000c10 <HAL_UART_RxCpltCallback+0x250>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	801a      	strh	r2, [r3, #0]
				memset(uart_rx, 0 ,sizeof(uart_rx));
 8000a1e:	221e      	movs	r2, #30
 8000a20:	2100      	movs	r1, #0
 8000a22:	487c      	ldr	r0, [pc, #496]	; (8000c14 <HAL_UART_RxCpltCallback+0x254>)
 8000a24:	f002 ff20 	bl	8003868 <memset>
 8000a28:	e0e3      	b.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    		}else{
        		uart_rx[uart_count]= rx_data;
 8000a2a:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <HAL_UART_RxCpltCallback+0x250>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b76      	ldr	r3, [pc, #472]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 8000a32:	7819      	ldrb	r1, [r3, #0]
 8000a34:	4b77      	ldr	r3, [pc, #476]	; (8000c14 <HAL_UART_RxCpltCallback+0x254>)
 8000a36:	5499      	strb	r1, [r3, r2]
        		uart_count++;
 8000a38:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <HAL_UART_RxCpltCallback+0x250>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b73      	ldr	r3, [pc, #460]	; (8000c10 <HAL_UART_RxCpltCallback+0x250>)
 8000a42:	801a      	strh	r2, [r3, #0]
 8000a44:	e0d5      	b.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    		}
    	}
    	else if (OTA_mode == OTA_START) {
 8000a46:	4b70      	ldr	r3, [pc, #448]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d15a      	bne.n	8000b04 <HAL_UART_RxCpltCallback+0x144>
    		Firmware_rx[cur_line][cur_index++] = rx_data;
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461c      	mov	r4, r3
 8000a54:	4b72      	ldr	r3, [pc, #456]	; (8000c20 <HAL_UART_RxCpltCallback+0x260>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	b291      	uxth	r1, r2
 8000a5c:	4a70      	ldr	r2, [pc, #448]	; (8000c20 <HAL_UART_RxCpltCallback+0x260>)
 8000a5e:	8011      	strh	r1, [r2, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	4b6a      	ldr	r3, [pc, #424]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 8000a64:	7819      	ldrb	r1, [r3, #0]
 8000a66:	4a6f      	ldr	r2, [pc, #444]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000a68:	00a3      	lsls	r3, r4, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4403      	add	r3, r0
 8000a6e:	460a      	mov	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
    	    if (cur_index == 4 &&
 8000a72:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <HAL_UART_RxCpltCallback+0x260>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d125      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x106>
    	        Firmware_rx[cur_line][0] == '#' &&
 8000a7a:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b68      	ldr	r3, [pc, #416]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000a82:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    	    if (cur_index == 4 &&
 8000a86:	2b23      	cmp	r3, #35	; 0x23
 8000a88:	d11d      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x106>
    	        Firmware_rx[cur_line][1] == '#' &&
 8000a8a:	4b64      	ldr	r3, [pc, #400]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4a65      	ldr	r2, [pc, #404]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	785b      	ldrb	r3, [r3, #1]
    	        Firmware_rx[cur_line][0] == '#' &&
 8000a96:	2b23      	cmp	r3, #35	; 0x23
 8000a98:	d115      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x106>
    	        Firmware_rx[cur_line][2] == '#' &&
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	789b      	ldrb	r3, [r3, #2]
    	        Firmware_rx[cur_line][1] == '#' &&
 8000aa6:	2b23      	cmp	r3, #35	; 0x23
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x106>
    	        Firmware_rx[cur_line][3] == '#') {
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	78db      	ldrb	r3, [r3, #3]
    	        Firmware_rx[cur_line][2] == '#' &&
 8000ab6:	2b23      	cmp	r3, #35	; 0x23
 8000ab8:	d105      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x106>

    	    	CRC_success = 1;
 8000aba:	4b5b      	ldr	r3, [pc, #364]	; (8000c28 <HAL_UART_RxCpltCallback+0x268>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
    	    	OTA_mode = OTA_CRC;
 8000ac0:	4b51      	ldr	r3, [pc, #324]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	701a      	strb	r2, [r3, #0]
    	    }
    		if (cur_index >= 4) {
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <HAL_UART_RxCpltCallback+0x260>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	f240 8091 	bls.w	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    			cur_index = 0;
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <HAL_UART_RxCpltCallback+0x260>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
    			cur_line++;
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000ae0:	801a      	strh	r2, [r3, #0]
    			if(cur_line % 100 == 0){
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4a51      	ldr	r2, [pc, #324]	; (8000c2c <HAL_UART_RxCpltCallback+0x26c>)
 8000ae8:	fba2 1203 	umull	r1, r2, r2, r3
 8000aec:	0952      	lsrs	r2, r2, #5
 8000aee:	2164      	movs	r1, #100	; 0x64
 8000af0:	fb01 f202 	mul.w	r2, r1, r2
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d17a      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    				OTA_mode = OTA_CRC;
 8000afc:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000afe:	2205      	movs	r2, #5
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e076      	b.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    			}
    		}
    	}
    	else if (OTA_mode == OTA_CRC) {
 8000b04:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d172      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    	    crc_buffer[crc_index++] = rx_data;
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <HAL_UART_RxCpltCallback+0x270>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	b2d1      	uxtb	r1, r2
 8000b14:	4a46      	ldr	r2, [pc, #280]	; (8000c30 <HAL_UART_RxCpltCallback+0x270>)
 8000b16:	7011      	strb	r1, [r2, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 8000b1c:	7819      	ldrb	r1, [r3, #0]
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <HAL_UART_RxCpltCallback+0x274>)
 8000b20:	5499      	strb	r1, [r3, r2]

    	    if (crc_index == 2) {
 8000b22:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <HAL_UART_RxCpltCallback+0x270>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d163      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x232>
    	        uint16_t received_crc = (crc_buffer[0] << 8) | crc_buffer[1];
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <HAL_UART_RxCpltCallback+0x274>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <HAL_UART_RxCpltCallback+0x274>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	81bb      	strh	r3, [r7, #12]
    	        uint16_t crc;

    	        if (CRC_success == 0) {
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <HAL_UART_RxCpltCallback+0x268>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00d      	beq.n	8000b68 <HAL_UART_RxCpltCallback+0x1a8>
    	            // Calculate CRC for the current firmware part
    	            crc = crc16_ccitt((uint8_t*)Firmware_rx[cur_line - (CRC_PART_SIZE / 4)], CRC_PART_SIZE);
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	3b64      	subs	r3, #100	; 0x64
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000b56:	4413      	add	r3, r2
 8000b58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fed9 	bl	8000914 <crc16_ccitt>
 8000b62:	4603      	mov	r3, r0
 8000b64:	81fb      	strh	r3, [r7, #14]
 8000b66:	e01f      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x1e8>
    	        } else {
    	            // Calculate CRC for the remaining lines
    	            uint16_t remaining_lines = (cur_line - 1) % 100;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <HAL_UART_RxCpltCallback+0x26c>)
 8000b70:	fb82 1203 	smull	r1, r2, r2, r3
 8000b74:	1151      	asrs	r1, r2, #5
 8000b76:	17da      	asrs	r2, r3, #31
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	2164      	movs	r1, #100	; 0x64
 8000b7c:	fb01 f202 	mul.w	r2, r1, r2
 8000b80:	1a9a      	subs	r2, r3, r2
 8000b82:	4613      	mov	r3, r2
 8000b84:	817b      	strh	r3, [r7, #10]
    	            crc = crc16_ccitt((uint8_t*)Firmware_rx[cur_line - 1 - remaining_lines], remaining_lines * 4);
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_UART_RxCpltCallback+0x25c>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <HAL_UART_RxCpltCallback+0x264>)
 8000b94:	441a      	add	r2, r3
 8000b96:	897b      	ldrh	r3, [r7, #10]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	f7ff feb8 	bl	8000914 <crc16_ccitt>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	81fb      	strh	r3, [r7, #14]
    	        }

    	        // Compare received CRC with calculated CRC
    	        if (received_crc == crc) {
 8000ba8:	89ba      	ldrh	r2, [r7, #12]
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d114      	bne.n	8000bda <HAL_UART_RxCpltCallback+0x21a>
    	            CRC_True();
 8000bb0:	f000 f87c 	bl	8000cac <CRC_True>
    	            if (CRC_success == 0) {
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_UART_RxCpltCallback+0x268>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	f083 0301 	eor.w	r3, r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_UART_RxCpltCallback+0x20a>
    	                OTA_mode = OTA_START; // Move to the next OTA mode
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e00b      	b.n	8000be2 <HAL_UART_RxCpltCallback+0x222>
    	            } else {
    	                OTA_End();
 8000bca:	f000 f853 	bl	8000c74 <OTA_End>
    	                OTA_mode = OTA_END; // End OTA process
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_UART_RxCpltCallback+0x248>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	701a      	strb	r2, [r3, #0]
    	                Process_Bin_File(); // Process the binary file
 8000bd4:	f7ff fdd4 	bl	8000780 <Process_Bin_File>
 8000bd8:	e003      	b.n	8000be2 <HAL_UART_RxCpltCallback+0x222>
    	            }
    	        } else {
    	            CRC_Fail();
 8000bda:	f000 f887 	bl	8000cec <CRC_Fail>
    	            NVIC_SystemReset(); // Reset the system on CRC failure
 8000bde:	f7ff fed9 	bl	8000994 <__NVIC_SystemReset>
    	        }

    	        // Reset CRC buffer and index
    	        crc_index = 0;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_UART_RxCpltCallback+0x270>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
    	        memset(crc_buffer, 0, sizeof(crc_buffer));
 8000be8:	2202      	movs	r2, #2
 8000bea:	2100      	movs	r1, #0
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <HAL_UART_RxCpltCallback+0x274>)
 8000bee:	f002 fe3b 	bl	8003868 <memset>
    	    }
    	}
	    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4905      	ldr	r1, [pc, #20]	; (8000c0c <HAL_UART_RxCpltCallback+0x24c>)
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <HAL_UART_RxCpltCallback+0x278>)
 8000bf8:	f001 fe79 	bl	80028ee <HAL_UART_Receive_IT>
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40004400 	.word	0x40004400
 8000c08:	20005b86 	.word	0x20005b86
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	20005b64 	.word	0x20005b64
 8000c14:	20005b68 	.word	0x20005b68
 8000c18:	08003890 	.word	0x08003890
 8000c1c:	20005b62 	.word	0x20005b62
 8000c20:	20005b60 	.word	0x20005b60
 8000c24:	20000044 	.word	0x20000044
 8000c28:	20005b8b 	.word	0x20005b8b
 8000c2c:	51eb851f 	.word	0x51eb851f
 8000c30:	20005b8a 	.word	0x20005b8a
 8000c34:	20005b88 	.word	0x20005b88
 8000c38:	20005b8c 	.word	0x20005b8c

08000c3c <OTA_Start>:

void OTA_Start(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	uint8_t data[] = "OTA_START"; // Null-terminated string
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <OTA_Start+0x30>)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c48:	c303      	stmia	r3!, {r0, r1}
 8000c4a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, data, strlen((char *)data),100);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fac4 	bl	80001dc <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	1d39      	adds	r1, r7, #4
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <OTA_Start+0x34>)
 8000c5e:	f001 fdb4 	bl	80027ca <HAL_UART_Transmit>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	08003890 	.word	0x08003890
 8000c70:	20005b8c 	.word	0x20005b8c

08000c74 <OTA_End>:

void OTA_End(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	uint8_t data[] = "OTA_END"; // Null-terminated string
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <OTA_End+0x30>)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c82:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, data, strlen((char *)data),100);
 8000c86:	463b      	mov	r3, r7
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff faa7 	bl	80001dc <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4639      	mov	r1, r7
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <OTA_End+0x34>)
 8000c98:	f001 fd97 	bl	80027ca <HAL_UART_Transmit>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	0800389c 	.word	0x0800389c
 8000ca8:	20005b8c 	.word	0x20005b8c

08000cac <CRC_True>:

void CRC_True(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint8_t data[] = "CRC_OK"; // Null-terminated string
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <CRC_True+0x38>)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	0c0a      	lsrs	r2, r1, #16
 8000cc4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, data, strlen((char *)data),100);
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fa87 	bl	80001dc <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <CRC_True+0x3c>)
 8000cd8:	f001 fd77 	bl	80027ca <HAL_UART_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	080038a4 	.word	0x080038a4
 8000ce8:	20005b8c 	.word	0x20005b8c

08000cec <CRC_Fail>:

void CRC_Fail(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
	uint8_t data[] = "CRC_ERROR"; // Null-terminated string
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <CRC_Fail+0x30>)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	c303      	stmia	r3!, {r0, r1}
 8000cfa:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, data, strlen((char *)data),100);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fa6c 	bl	80001dc <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	1d39      	adds	r1, r7, #4
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <CRC_Fail+0x34>)
 8000d0e:	f001 fd5c 	bl	80027ca <HAL_UART_Transmit>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	080038ac 	.word	0x080038ac
 8000d20:	20005b8c 	.word	0x20005b8c

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 f9f9 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f84d 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 f8d3 	bl	8000edc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 f8a7 	bl	8000e88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  Flash_Read_Data(0x08042FA4, &test, 1);

  uint32_t rx= 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  Flash_Read_Data(FLAG_ADDRESS,&rx, 1);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2201      	movs	r2, #1
 8000d44:	4619      	mov	r1, r3
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <main+0x8c>)
 8000d48:	f7ff fce6 	bl	8000718 <Flash_Read_Data>
  if(rx == 1){
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d106      	bne.n	8000d60 <main+0x3c>
	  Copy_To_Application(SLOT1);
 8000d52:	4818      	ldr	r0, [pc, #96]	; (8000db4 <main+0x90>)
 8000d54:	f7ff fd72 	bl	800083c <Copy_To_Application>
	  Jump_To_Application(ADDRESS);
 8000d58:	4817      	ldr	r0, [pc, #92]	; (8000db8 <main+0x94>)
 8000d5a:	f7ff fdc1 	bl	80008e0 <Jump_To_Application>
 8000d5e:	e020      	b.n	8000da2 <main+0x7e>
  }
  else if(rx == 2){
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d106      	bne.n	8000d74 <main+0x50>
	  Copy_To_Application(SLOT2);
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <main+0x98>)
 8000d68:	f7ff fd68 	bl	800083c <Copy_To_Application>
	  Jump_To_Application(ADDRESS);
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <main+0x94>)
 8000d6e:	f7ff fdb7 	bl	80008e0 <Jump_To_Application>
 8000d72:	e016      	b.n	8000da2 <main+0x7e>
  }
  else if(rx == 10){
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d110      	bne.n	8000d9c <main+0x78>
	  uint8_t data[] = "OTA ENTER";
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <main+0x9c>)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d80:	c303      	stmia	r3!, {r0, r1}
 8000d82:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, data, strlen((char *)data),100);
 8000d84:	463b      	mov	r3, r7
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa28 	bl	80001dc <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4639      	mov	r1, r7
 8000d92:	2364      	movs	r3, #100	; 0x64
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <main+0xa0>)
 8000d96:	f001 fd18 	bl	80027ca <HAL_UART_Transmit>
 8000d9a:	e002      	b.n	8000da2 <main+0x7e>
  }
  else{
	  Jump_To_Application(ADDRESS);
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <main+0x94>)
 8000d9e:	f7ff fd9f 	bl	80008e0 <Jump_To_Application>
  }
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <main+0xa4>)
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <main+0xa0>)
 8000da8:	f001 fda1 	bl	80028ee <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <main+0x88>
 8000dae:	bf00      	nop
 8000db0:	08008000 	.word	0x08008000
 8000db4:	08040000 	.word	0x08040000
 8000db8:	08020000 	.word	0x08020000
 8000dbc:	08060000 	.word	0x08060000
 8000dc0:	080038b8 	.word	0x080038b8
 8000dc4:	20005b8c 	.word	0x20005b8c
 8000dc8:	20000040 	.word	0x20000040

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	; 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2230      	movs	r2, #48	; 0x30
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fd44 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemClock_Config+0xb4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <SystemClock_Config+0xb4>)
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemClock_Config+0xb4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <SystemClock_Config+0xb8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2310      	movs	r3, #16
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f81f 	bl	8001e80 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e48:	f000 f87c 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fa82 	bl	8002370 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e72:	f000 f867 	bl	8000f44 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	; 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f001 fc36 	bl	8002730 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f83b 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20005b8c 	.word	0x20005b8c
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|BLUE_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_GPIO_Init+0x64>)
 8000f14:	f000 ff9a 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BLUE_Pin;
 8000f18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0x64>)
 8000f30:	f000 fdf0 	bl	8001b14 <HAL_GPIO_Init>

}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_UART_MspInit+0x94>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d133      	bne.n	800102a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x98>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100a:	2307      	movs	r3, #7
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_UART_MspInit+0x9c>)
 8001016:	f000 fd7d 	bl	8001b14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2026      	movs	r0, #38	; 0x26
 8001020:	f000 f9cb 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001024:	2026      	movs	r0, #38	; 0x26
 8001026:	f000 f9e4 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004400 	.word	0x40004400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020c00 	.word	0x40020c00

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f89a 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f001 fc59 	bl	8002950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20005b8c 	.word	0x20005b8c

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 fb91 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fe11 	bl	8000d24 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001110:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 8001114:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001118:	20005bf4 	.word	0x20005bf4

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f92b 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fefc 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f943 	bl	800140e <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f90b 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20005bd0 	.word	0x20005bd0

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20005bd0 	.word	0x20005bd0

08001204 <__NVIC_SetPriorityGrouping>:
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff3e 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff8e 	bl	80012f8 <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff31 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff feda 	bl	80011ec <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d008      	beq.n	8001458 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e052      	b.n	80014fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0216 	bic.w	r2, r2, #22
 8001466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001476:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <HAL_DMA_Abort+0x62>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0208 	bic.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a8:	e013      	b.n	80014d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014aa:	f7ff fe9f 	bl	80011ec <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d90c      	bls.n	80014d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e015      	b.n	80014fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e4      	bne.n	80014aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	223f      	movs	r2, #63	; 0x3f
 80014e6:	409a      	lsls	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d004      	beq.n	8001524 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e00c      	b.n	800153e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2205      	movs	r2, #5
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_FLASH_Program+0xa0>)
 8001560:	7e1b      	ldrb	r3, [r3, #24]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_FLASH_Program+0x1e>
 8001566:	2302      	movs	r3, #2
 8001568:	e03b      	b.n	80015e2 <HAL_FLASH_Program+0x96>
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_FLASH_Program+0xa0>)
 800156c:	2201      	movs	r2, #1
 800156e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001570:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001574:	f000 f87c 	bl	8001670 <FLASH_WaitForLastOperation>
 8001578:	4603      	mov	r3, r0
 800157a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d12b      	bne.n	80015da <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001588:	783b      	ldrb	r3, [r7, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	68b8      	ldr	r0, [r7, #8]
 800158e:	f000 f927 	bl	80017e0 <FLASH_Program_Byte>
 8001592:	e016      	b.n	80015c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d105      	bne.n	80015a6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f000 f8fa 	bl	8001798 <FLASH_Program_HalfWord>
 80015a4:	e00d      	b.n	80015c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d105      	bne.n	80015b8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f000 f8cf 	bl	8001754 <FLASH_Program_Word>
 80015b6:	e004      	b.n	80015c2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80015b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015bc:	68b8      	ldr	r0, [r7, #8]
 80015be:	f000 f897 	bl	80016f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015c6:	f000 f853 	bl	8001670 <FLASH_WaitForLastOperation>
 80015ca:	4603      	mov	r3, r0
 80015cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_FLASH_Program+0xa4>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_FLASH_Program+0xa4>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_FLASH_Program+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	761a      	strb	r2, [r3, #24]
  
  return status;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20005bd4 	.word	0x20005bd4
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_FLASH_Unlock+0x38>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da0b      	bge.n	800161e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_FLASH_Unlock+0x38>)
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_FLASH_Unlock+0x3c>)
 800160a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_FLASH_Unlock+0x38>)
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_FLASH_Unlock+0x40>)
 8001610:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_FLASH_Unlock+0x38>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da01      	bge.n	800161e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800161e:	79fb      	ldrb	r3, [r7, #7]
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023c00 	.word	0x40023c00
 8001630:	45670123 	.word	0x45670123
 8001634:	cdef89ab 	.word	0xcdef89ab

08001638 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_FLASH_Lock+0x1c>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_FLASH_Lock+0x1c>)
 8001642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001646:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_FLASH_GetError+0x14>)
 800165e:	69db      	ldr	r3, [r3, #28]
}  
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20005bd4 	.word	0x20005bd4

08001670 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <FLASH_WaitForLastOperation+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001682:	f7ff fdb3 	bl	80011ec <HAL_GetTick>
 8001686:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001688:	e010      	b.n	80016ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d00c      	beq.n	80016ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <FLASH_WaitForLastOperation+0x38>
 8001698:	f7ff fda8 	bl	80011ec <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d201      	bcs.n	80016ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e019      	b.n	80016e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <FLASH_WaitForLastOperation+0x7c>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e8      	bne.n	800168a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <FLASH_WaitForLastOperation+0x7c>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <FLASH_WaitForLastOperation+0x7c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <FLASH_WaitForLastOperation+0x7c>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80016d6:	f000 f8a5 	bl	8001824 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
  
}  
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20005bd4 	.word	0x20005bd4
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 8001702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a10      	ldr	r2, [pc, #64]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 800170e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001712:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <FLASH_Program_DoubleWord+0x60>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001726:	f3bf 8f6f 	isb	sy
}
 800172a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800172c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	000a      	movs	r2, r1
 800173a:	2300      	movs	r3, #0
 800173c:	68f9      	ldr	r1, [r7, #12]
 800173e:	3104      	adds	r1, #4
 8001740:	4613      	mov	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40023c00 	.word	0x40023c00

08001754 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <FLASH_Program_Word+0x40>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <FLASH_Program_Word+0x40>)
 8001764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001768:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <FLASH_Program_Word+0x40>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <FLASH_Program_Word+0x40>)
 8001770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <FLASH_Program_Word+0x40>)
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <FLASH_Program_Word+0x40>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40023c00 	.word	0x40023c00

08001798 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <FLASH_Program_HalfWord+0x44>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	801a      	strh	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <FLASH_Program_Byte+0x40>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <FLASH_Program_Byte+0x40>)
 80017f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <FLASH_Program_Byte+0x40>)
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <FLASH_Program_Byte+0x40>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <FLASH_Program_Byte+0x40>)
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <FLASH_Program_Byte+0x40>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 800183e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 8001842:	2210      	movs	r2, #16
 8001844:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 800185c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 8001860:	2220      	movs	r2, #32
 8001862:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 800187a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 8001898:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <FLASH_SetErrorCode+0xa8>)
 80018b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <FLASH_SetErrorCode+0xa4>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	60da      	str	r2, [r3, #12]
  }
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	20005bd4 	.word	0x20005bd4

080018d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_FLASHEx_Erase+0xd8>)
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_FLASHEx_Erase+0x1e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e058      	b.n	80019a0 <HAL_FLASHEx_Erase+0xd0>
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_FLASHEx_Erase+0xd8>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f8:	f7ff feba 	bl	8001670 <FLASH_WaitForLastOperation>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d148      	bne.n	8001998 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d115      	bne.n	8001942 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f844 	bl	80019b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001928:	f24c 3050 	movw	r0, #50000	; 0xc350
 800192c:	f7ff fea0 	bl	8001670 <FLASH_WaitForLastOperation>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_FLASHEx_Erase+0xdc>)
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_FLASHEx_Erase+0xdc>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	6113      	str	r3, [r2, #16]
 8001940:	e028      	b.n	8001994 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	e01c      	b.n	8001984 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4619      	mov	r1, r3
 8001952:	68b8      	ldr	r0, [r7, #8]
 8001954:	f000 f850 	bl	80019f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001958:	f24c 3050 	movw	r0, #50000	; 0xc350
 800195c:	f7ff fe88 	bl	8001670 <FLASH_WaitForLastOperation>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_FLASHEx_Erase+0xdc>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_FLASHEx_Erase+0xdc>)
 800196a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800196e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	601a      	str	r2, [r3, #0]
          break;
 800197c:	e00a      	b.n	8001994 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4413      	add	r3, r2
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	429a      	cmp	r2, r3
 8001992:	d3da      	bcc.n	800194a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001994:	f000 f878 	bl	8001a88 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_FLASHEx_Erase+0xd8>)
 800199a:	2200      	movs	r2, #0
 800199c:	761a      	strb	r2, [r3, #24]

  return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20005bd4 	.word	0x20005bd4
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <FLASH_MassErase+0x44>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <FLASH_MassErase+0x44>)
 80019c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <FLASH_MassErase+0x44>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <FLASH_MassErase+0x44>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <FLASH_MassErase+0x44>)
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	4313      	orrs	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <FLASH_MassErase+0x44>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6113      	str	r3, [r2, #16]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e010      	b.n	8001a36 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d103      	bne.n	8001a22 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e009      	b.n	8001a36 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d103      	bne.n	8001a30 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e002      	b.n	8001a36 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	490f      	ldr	r1, [pc, #60]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <FLASH_Erase_Sector+0x8c>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6113      	str	r3, [r2, #16]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d017      	beq.n	8001ac8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d017      	beq.n	8001b04 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <FLASH_FlushCaches+0x88>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	6013      	str	r3, [r2, #0]
  }
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e16b      	b.n	8001e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 815a 	bne.w	8001e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d005      	beq.n	8001b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d130      	bne.n	8001bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0201 	and.w	r2, r3, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d017      	beq.n	8001c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80b4 	beq.w	8001e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x314>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d02b      	beq.n	8001d3a <HAL_GPIO_Init+0x226>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x318>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_Init+0x222>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x31c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x21e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x21a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	; (8001e38 <HAL_GPIO_Init+0x324>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x216>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_GPIO_Init+0x328>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_GPIO_Init+0x32c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x20e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	; (8001e44 <HAL_GPIO_Init+0x330>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x20a>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e00e      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d1e:	2308      	movs	r3, #8
 8001d20:	e00c      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d22:	2306      	movs	r3, #6
 8001d24:	e00a      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d26:	2305      	movs	r3, #5
 8001d28:	e008      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e004      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4093      	lsls	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7e:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f67f ae90 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40021800 	.word	0x40021800
 8001e44:	40021c00 	.word	0x40021c00
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f958 	bl	80011ec <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f954 	bl	80011ec <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f944 	bl	80011ec <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f940 	bl	80011ec <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f8f9 	bl	80011ec <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f8f5 	bl	80011ec <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f8d8 	bl	80011ec <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff f8d4 	bl	80011ec <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f8b8 	bl	80011ec <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff f8b4 	bl	80011ec <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f8a1 	bl	80011ec <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff f89d 	bl	80011ec <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff f85d 	bl	80011ec <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff f859 	bl	80011ec <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f81e 	bl	80011ec <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff f81a 	bl	80011ec <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff f808 	bl	80011ec <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff f804 	bl	80011ec <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe ffd8 	bl	80011ec <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ffd4 	bl	80011ec <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ffad 	bl	80011ec <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe ffa9 	bl	80011ec <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff96 	bl	80011ec <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff92 	bl	80011ec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fec4 	bl	80011ec <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fec0 	bl	80011ec <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fe24 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	080038c4 	.word	0x080038c4
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b090      	sub	sp, #64	; 0x40
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80a1 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e09b      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002574:	e09b      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257a:	e098      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	627a      	str	r2, [r7, #36]	; 0x24
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025a4:	2100      	movs	r1, #0
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a8:	fb03 f201 	mul.w	r2, r3, r1
 80025ac:	2300      	movs	r3, #0
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b6:	fba0 1202 	umull	r1, r2, r0, r2
 80025ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025bc:	460a      	mov	r2, r1
 80025be:	62ba      	str	r2, [r7, #40]	; 0x28
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	4413      	add	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	2200      	movs	r2, #0
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	61fa      	str	r2, [r7, #28]
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025d6:	f7fd fe09 	bl	80001ec <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4613      	mov	r3, r2
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	e053      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	2200      	movs	r2, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	617a      	str	r2, [r7, #20]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025f6:	f04f 0b00 	mov.w	fp, #0
 80025fa:	4652      	mov	r2, sl
 80025fc:	465b      	mov	r3, fp
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ebb2 080a 	subs.w	r8, r2, sl
 8002616:	eb63 090b 	sbc.w	r9, r3, fp
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800262a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800262e:	ebb2 0408 	subs.w	r4, r2, r8
 8002632:	eb63 0509 	sbc.w	r5, r3, r9
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	00eb      	lsls	r3, r5, #3
 8002640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002644:	00e2      	lsls	r2, r4, #3
 8002646:	4614      	mov	r4, r2
 8002648:	461d      	mov	r5, r3
 800264a:	eb14 030a 	adds.w	r3, r4, sl
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	eb45 030b 	adc.w	r3, r5, fp
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4629      	mov	r1, r5
 8002664:	028b      	lsls	r3, r1, #10
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800266c:	4621      	mov	r1, r4
 800266e:	028a      	lsls	r2, r1, #10
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	2200      	movs	r2, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002680:	f7fd fdb4 	bl	80001ec <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800269c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3740      	adds	r7, #64	; 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	017d7840 	.word	0x017d7840

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	080038d4 	.word	0x080038d4

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800270c:	f7ff ffdc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	080038d4 	.word	0x080038d4

08002730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e03f      	b.n	80027c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fc22 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fddf 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b08a      	sub	sp, #40	; 0x28
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d17c      	bne.n	80028e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_UART_Transmit+0x2c>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e075      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x3e>
 8002804:	2302      	movs	r3, #2
 8002806:	e06e      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2221      	movs	r2, #33	; 0x21
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7fe fce5 	bl	80011ec <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d108      	bne.n	800284c <HAL_UART_Transmit+0x82>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e003      	b.n	8002854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800285c:	e02a      	b.n	80028b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fb1f 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e036      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3302      	adds	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e007      	b.n	80028a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1cf      	bne.n	800285e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 faef 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e006      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	d11d      	bne.n	8002944 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_UART_Receive_IT+0x26>
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e016      	b.n	8002946 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_UART_Receive_IT+0x38>
 8002922:	2302      	movs	r3, #2
 8002924:	e00f      	b.n	8002946 <HAL_UART_Receive_IT+0x58>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	461a      	mov	r2, r3
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fb24 	bl	8002f88 <UART_Start_Receive_IT>
 8002940:	4603      	mov	r3, r0
 8002942:	e000      	b.n	8002946 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b0ba      	sub	sp, #232	; 0xe8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800298e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_UART_IRQHandler+0x66>
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fc07 	bl	80031c2 <UART_Receive_IT>
      return;
 80029b4:	e256      	b.n	8002e64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80de 	beq.w	8002b7c <HAL_UART_IRQHandler+0x22c>
 80029c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80d1 	beq.w	8002b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_UART_IRQHandler+0xae>
 80029e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_UART_IRQHandler+0xd2>
 8002a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_UART_IRQHandler+0xf6>
 8002a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0204 	orr.w	r2, r3, #4
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d011      	beq.n	8002a76 <HAL_UART_IRQHandler+0x126>
 8002a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0208 	orr.w	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 81ed 	beq.w	8002e5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_UART_IRQHandler+0x14e>
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fb92 	bl	80031c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_UART_IRQHandler+0x17a>
 8002ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04f      	beq.n	8002b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa9a 	bl	8003004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d141      	bne.n	8002b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3314      	adds	r3, #20
 8002b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1d9      	bne.n	8002ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d013      	beq.n	8002b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	4a7d      	ldr	r2, [pc, #500]	; (8002d2c <HAL_UART_IRQHandler+0x3dc>)
 8002b38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fce1 	bl	8001506 <HAL_DMA_Abort_IT>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b54:	4610      	mov	r0, r2
 8002b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b58:	e00e      	b.n	8002b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f990 	bl	8002e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e00a      	b.n	8002b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f98c 	bl	8002e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e006      	b.n	8002b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f988 	bl	8002e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b76:	e170      	b.n	8002e5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	bf00      	nop
    return;
 8002b7a:	e16e      	b.n	8002e5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	f040 814a 	bne.w	8002e1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8143 	beq.w	8002e1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 813c 	beq.w	8002e1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	f040 80b4 	bne.w	8002d30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8140 	beq.w	8002e5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002be6:	429a      	cmp	r2, r3
 8002be8:	f080 8139 	bcs.w	8002e5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfe:	f000 8088 	beq.w	8002d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1d9      	bne.n	8002c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3314      	adds	r3, #20
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e1      	bne.n	8002c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3314      	adds	r3, #20
 8002c90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e3      	bne.n	8002c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce2:	f023 0310 	bic.w	r3, r3, #16
 8002ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e3      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fb8a 	bl	8001426 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8b6 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d28:	e099      	b.n	8002e5e <HAL_UART_IRQHandler+0x50e>
 8002d2a:	bf00      	nop
 8002d2c:	080030cb 	.word	0x080030cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 808b 	beq.w	8002e62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8086 	beq.w	8002e62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002db2:	633a      	str	r2, [r7, #48]	; 0x30
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e3      	bne.n	8002d8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0310 	bic.w	r3, r3, #16
 8002dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002df8:	61fa      	str	r2, [r7, #28]
 8002dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	69b9      	ldr	r1, [r7, #24]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	617b      	str	r3, [r7, #20]
   return(result);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e3      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f83e 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e18:	e023      	b.n	8002e62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_UART_IRQHandler+0x4ea>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f95d 	bl	80030f2 <UART_Transmit_IT>
    return;
 8002e38:	e014      	b.n	8002e64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <HAL_UART_IRQHandler+0x514>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f99d 	bl	8003192 <UART_EndTransmit_IT>
    return;
 8002e58:	e004      	b.n	8002e64 <HAL_UART_IRQHandler+0x514>
    return;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <HAL_UART_IRQHandler+0x514>
      return;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_UART_IRQHandler+0x514>
      return;
 8002e62:	bf00      	nop
  }
}
 8002e64:	37e8      	adds	r7, #232	; 0xe8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop

08002e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b090      	sub	sp, #64	; 0x40
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	e050      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d04c      	beq.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ecc:	f7fe f98e 	bl	80011ec <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d241      	bcs.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efc:	637a      	str	r2, [r7, #52]	; 0x34
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3314      	adds	r3, #20
 8002f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f30:	623a      	str	r2, [r7, #32]
 8002f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	69f9      	ldr	r1, [r7, #28]
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e5      	bne.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e00f      	b.n	8002f80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d09f      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3740      	adds	r7, #64	; 0x40
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2222      	movs	r2, #34	; 0x22
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b095      	sub	sp, #84	; 0x54
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800302c:	643a      	str	r2, [r7, #64]	; 0x40
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b01      	cmp	r3, #1
 800307a:	d119      	bne.n	80030b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	60bb      	str	r3, [r7, #8]
   return(result);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0310 	bic.w	r3, r3, #16
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800309c:	61ba      	str	r2, [r7, #24]
 800309e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	613b      	str	r3, [r7, #16]
   return(result);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030be:	bf00      	nop
 80030c0:	3754      	adds	r7, #84	; 0x54
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fecb 	bl	8002e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b21      	cmp	r3, #33	; 0x21
 8003104:	d13e      	bne.n	8003184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d114      	bne.n	800313a <UART_Transmit_IT+0x48>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d110      	bne.n	800313a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]
 8003138:	e008      	b.n	800314c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	1c59      	adds	r1, r3, #1
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6211      	str	r1, [r2, #32]
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fe5a 	bl	8002e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b22      	cmp	r3, #34	; 0x22
 80031d4:	f040 80ab 	bne.w	800332e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d117      	bne.n	8003212 <UART_Receive_IT+0x50>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d113      	bne.n	8003212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	b29a      	uxth	r2, r3
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
 8003210:	e026      	b.n	8003260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d007      	beq.n	8003236 <UART_Receive_IT+0x74>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <UART_Receive_IT+0x82>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e008      	b.n	8003256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003250:	b2da      	uxtb	r2, r3
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29b      	uxth	r3, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003270:	2b00      	cmp	r3, #0
 8003272:	d15a      	bne.n	800332a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0220 	bic.w	r2, r2, #32
 8003282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d135      	bne.n	8003320 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	623a      	str	r2, [r7, #32]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d10a      	bne.n	8003312 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fdbb 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
 800331e:	e002      	b.n	8003326 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fb4d 	bl	80009c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e002      	b.n	8003330 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	; 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b0c0      	sub	sp, #256	; 0x100
 800333e:	af00      	add	r7, sp, #0
 8003340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	ea40 0301 	orr.w	r3, r0, r1
 8003360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003390:	f021 010c 	bic.w	r1, r1, #12
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	ea40 0301 	orr.w	r3, r0, r1
 80033be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <UART_SetConfig+0x2cc>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0xa0>
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8d      	ldr	r3, [pc, #564]	; (8003608 <UART_SetConfig+0x2d0>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff f996 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 80033dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7ff f97d 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 80033e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f4:	f040 810c 	bne.w	8003610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	1891      	adds	r1, r2, r2
 8003410:	65b9      	str	r1, [r7, #88]	; 0x58
 8003412:	415b      	adcs	r3, r3
 8003414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800341a:	4621      	mov	r1, r4
 800341c:	eb12 0801 	adds.w	r8, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0901 	adc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800345e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003466:	460b      	mov	r3, r1
 8003468:	18db      	adds	r3, r3, r3
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
 800346c:	4613      	mov	r3, r2
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800347c:	f7fc feb6 	bl	80001ec <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <UART_SetConfig+0x2d4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a8:	415b      	adcs	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034b0:	4641      	mov	r1, r8
 80034b2:	eb12 0a01 	adds.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0b01 	adc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	4692      	mov	sl, r2
 80034d2:	469b      	mov	fp, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	eb1a 0303 	adds.w	r3, sl, r3
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034de:	464b      	mov	r3, r9
 80034e0:	eb4b 0303 	adc.w	r3, fp, r3
 80034e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
 800350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003512:	f7fc fe6b 	bl	80001ec <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <UART_SetConfig+0x2d4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	; 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <UART_SetConfig+0x2d4>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800354c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	; 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6339      	str	r1, [r7, #48]	; 0x30
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ce:	f7fc fe0d 	bl	80001ec <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <UART_SetConfig+0x2d4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <UART_SetConfig+0x2d4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003600:	e105      	b.n	800380e <UART_SetConfig+0x4d6>
 8003602:	bf00      	nop
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800361a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6239      	str	r1, [r7, #32]
 800362a:	415b      	adcs	r3, r3
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003632:	4641      	mov	r1, r8
 8003634:	1854      	adds	r4, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0501 	adc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003658:	464b      	mov	r3, r9
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800366e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800367e:	4629      	mov	r1, r5
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4621      	mov	r1, r4
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003690:	f7fc fdac 	bl	80001ec <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	61b9      	str	r1, [r7, #24]
 80036bc:	415b      	adcs	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6139      	str	r1, [r7, #16]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	67bb      	str	r3, [r7, #120]	; 0x78
 800370e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800372e:	f7fc fd5d 	bl	80001ec <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <UART_SetConfig+0x4e4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <UART_SetConfig+0x4e4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003756:	441c      	add	r4, r3
 8003758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375c:	2200      	movs	r2, #0
 800375e:	673b      	str	r3, [r7, #112]	; 0x70
 8003760:	677a      	str	r2, [r7, #116]	; 0x74
 8003762:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003766:	4642      	mov	r2, r8
 8003768:	464b      	mov	r3, r9
 800376a:	1891      	adds	r1, r2, r2
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	415b      	adcs	r3, r3
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003776:	4641      	mov	r1, r8
 8003778:	1851      	adds	r1, r2, r1
 800377a:	6039      	str	r1, [r7, #0]
 800377c:	4649      	mov	r1, r9
 800377e:	414b      	adcs	r3, r1
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800378e:	4659      	mov	r1, fp
 8003790:	00cb      	lsls	r3, r1, #3
 8003792:	4651      	mov	r1, sl
 8003794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003798:	4651      	mov	r1, sl
 800379a:	00ca      	lsls	r2, r1, #3
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	4603      	mov	r3, r0
 80037a2:	4642      	mov	r2, r8
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	663b      	str	r3, [r7, #96]	; 0x60
 80037bc:	667a      	str	r2, [r7, #100]	; 0x64
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ca:	4649      	mov	r1, r9
 80037cc:	008b      	lsls	r3, r1, #2
 80037ce:	4641      	mov	r1, r8
 80037d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d4:	4641      	mov	r1, r8
 80037d6:	008a      	lsls	r2, r1, #2
 80037d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037dc:	f7fc fd06 	bl	80001ec <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <UART_SetConfig+0x4e4>)
 80037e6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2164      	movs	r1, #100	; 0x64
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a08      	ldr	r2, [pc, #32]	; (800381c <UART_SetConfig+0x4e4>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4422      	add	r2, r4
 800380c:	609a      	str	r2, [r3, #8]
}
 800380e:	bf00      	nop
 8003810:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	51eb851f 	.word	0x51eb851f

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	4d0d      	ldr	r5, [pc, #52]	; (8003858 <__libc_init_array+0x38>)
 8003824:	4c0d      	ldr	r4, [pc, #52]	; (800385c <__libc_init_array+0x3c>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	2600      	movs	r6, #0
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	4d0b      	ldr	r5, [pc, #44]	; (8003860 <__libc_init_array+0x40>)
 8003832:	4c0c      	ldr	r4, [pc, #48]	; (8003864 <__libc_init_array+0x44>)
 8003834:	f000 f820 	bl	8003878 <_init>
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	2600      	movs	r6, #0
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	080038e4 	.word	0x080038e4
 800385c:	080038e4 	.word	0x080038e4
 8003860:	080038e4 	.word	0x080038e4
 8003864:	080038e8 	.word	0x080038e8

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
